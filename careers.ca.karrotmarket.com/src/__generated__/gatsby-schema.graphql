# Add date formatting options.
directive @dateformat(formatString: String, locale: String, fromNow: Boolean, difference: String) on FIELD_DEFINITION

# Link to node by foreign-key relation.
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

# Link to File node by relative path.
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

# Proxy resolver from another field.
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

# Infer field types from field values.
directive @infer on OBJECT

# Do not infer field types from field values.
directive @dontInfer on OBJECT

# Define the mime-types handled by this type.
directive @mimeTypes(
  # The mime-types handled by this type.
  types: [String!]! = []
) on OBJECT

# Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`.
directive @childOf(
  # A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  mimeTypes: [String!]! = []

  # A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  types: [String!]! = []
) on OBJECT

# DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".
#
# Adds root query fields for an interface. All implementing types must also implement the Node interface.
directive @nodeInterface on INTERFACE

type File implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  accessTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  changeTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  ctime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  url: String

  # Returns all children nodes filtered by type ImageSharp
  childrenImageSharp: [ImageSharp]

  # Returns the first child node of type ImageSharp or null if there are no children of given type on this node
  childImageSharp: ImageSharp
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

# Node Interface
interface Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Internal {
  content: String
  contentDigest: String!
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

# A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar Date

type Directory implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  accessTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  changeTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  ctime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Site implements Node {
  buildTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  siteMetadata: SiteMetadata!
  port: Int
  host: String
  polyfill: Boolean
  pathPrefix: String
  jsxRuntime: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SiteSiteMetadata {
  title: String
  description: String
}

type SiteFunction implements Node {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SitePage implements Node {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON
  pluginCreator: SitePlugin
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type SitePlugin implements Node {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SiteBuildMetadata implements Node {
  buildTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharp implements Node {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    # A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: ImageLayout = CONSTRAINED

    # The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
    # Ignored if layout = FLUID.
    width: Int

    # The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
    # The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
    # matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # TRACED_SVG: a low-resolution traced SVG of the image.
    # NONE: no placeholder. Set "background" to use a fixed background color.
    placeholder: ImagePlaceholder

    # Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    blurredOptions: BlurredOptions

    # Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    tracedSVGOptions: Potrace

    # The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    # The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    # not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    # both PNG and JPG is not supported and will be ignored.
    formats: [ImageFormat]

    # A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
    # and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download.
    # You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    # does not actually span the full width of the screen, in which case you should pass the correct size here.
    sizes: String

    # The default quality. This is overridden by any format-specific options
    quality: Int

    # Options to pass to sharp when generating JPG images.
    jpgOptions: JPGOptions

    # Options to pass to sharp when generating PNG images.
    pngOptions: PNGOptions

    # Options to pass to sharp when generating WebP images.
    webpOptions: WebPOptions

    # Options to pass to sharp when generating AVIF images.
    avifOptions: AVIFOptions

    # Options to pass to sharp to control cropping and other image manipulations.
    transformOptions: TransformOptions

    # Background color applied to the wrapper. Also passed to sharp to use as a background when "letterboxing" an image to another aspect ratio.
    backgroundColor: String
  ): JSON!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  # Width of the generated low-res preview. Default is 20px
  width: Int

  # Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean = false
  duotone: DuotoneGradient
  rotate: Int = 0
  trim: Float = 0
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum GatsbyImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

type LocalSearchJobPosts implements Node {
  # The name of the index.
  name: String!

  # The search engine used to create the index.
  engine: String!

  # The search index created using the selected engine.
  index: String!

  # A JSON object used to map search results to their data.
  store: JSON!

  # Save the index to the site's static directory and return a public URL to it.
  publicIndexURL: String!

  # Save the store to the site's static directory and return a public URL to it.
  publicStoreURL: String!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

# Text content with rich formatting capabilities using a Prismic format called Structured Text.
scalar PrismicStructuredText

type PrismicAlternateLanguageType {
  id: ID
  uid: String
  lang: String
  type: String
  document: PrismicAllDocumentTypes
  raw: JSON
}

type PrismicEmbedType implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicGeoPointType {
  longitude: Float!
  latitude: Float!
}

type PrismicImageDimensionsType {
  width: Int!
  height: Int!
}

type PrismicImageThumbnailType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicLinkType {
  link_type: PrismicLinkTypeEnum
  isBroken: Boolean
  url: String
  target: String
  size: Int
  id: ID
  type: String
  tags: [String]
  lang: String
  slug: String
  uid: String
  document: PrismicAllDocumentTypes
  localFile: File
  raw: JSON
}

enum PrismicLinkTypeEnum {
  Any
  Document
  Media
  Web
}

interface PrismicSliceType {
  id: ID!
  slice_type: String!
  slice_label: String
}

interface PrismicSharedSliceType {
  id: ID!
  slice_type: String!
  slice_label: String
  variation: String!
  version: String!
}

type PrismicStructuredTextType {
  text: String
  html: String
  richText: PrismicStructuredText!
  raw: PrismicStructuredText! @deprecated(reason: "This field has been renamed to `richText`. The `richText` field has the same value the `raw` field.")
}

type PrismicTypePathType implements Node {
  kind: String!
  path: [String!]!
  type: String!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ImgixFixed {
  base64: String!
  src: String!
  srcSet: String!
  srcWebp: String!
  srcSetWebp: String!
  sizes: String!
  width: Int!
  height: Int!
}

type ImgixFluid {
  base64: String!
  src: String!
  srcSet: String!
  srcWebp: String!
  srcSetWebp: String!
  sizes: String!
  aspectRatio: Float!
}

enum ImgixPlaceholder {
  DOMINANT_COLOR
  BLURRED
  NONE
}

input ImgixParamsInput {
  # Specifies an aspect ratio to maintain when resizing and cropping the image. [See docs](https://docs.imgix.com/apis/url/size/ar).
  ar: String

  # Applies automatic enhancements to images. [See docs](https://docs.imgix.com/apis/url/auto).
  auto: String

  # Colors the background of padded and partially-transparent images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/bg).
  bg: String

  # Changes the blend alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/blending/blend-align).
  blendAlign: String

  # Alias for `blendAlign`.
  blendalign: String

  # Alias for `blendAlign`.
  ba: String

  # Changes the alpha of the blend image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/blending/blend-alpha).
  blendAlpha: Int

  # Alias for `blendAlpha`.
  blendalpha: Int

  # Alias for `blendAlpha`.
  balph: Int

  # Specifies a color to use when applying the blend. [See docs](https://docs.imgix.com/apis/url/blending/blend-color).
  blendColor: String

  # Alias for `blendColor`.
  blendcolor: String

  # Alias for `blendColor`.
  blendClr: String

  # Alias for `blendColor`.
  blendclr: String

  # Specifies the type of crop for blend images. [See docs](https://docs.imgix.com/apis/url/blending/blend-crop).
  blendCrop: String

  # Alias for `blendCrop`.
  blendcrop: String

  # Alias for `blendCrop`.
  bc: String

  # Specifies the fit mode for blend images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/blending/blend-fit).
  blendFit: String

  # Alias for `blendFit`.
  blendfit: String

  # Alias for `blendFit`.
  bf: String

  # Adjusts the height of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-h).
  blendH: Float

  # Alias for `blendH`.
  blendh: Float

  # Alias for `blendH`.
  bh: Float

  # Sets the blend mode for a blend image. Default: `overlay`. [See docs](https://docs.imgix.com/apis/url/blending/blend-mode).
  blendMode: String

  # Alias for `blendMode`.
  blendmode: String

  # Alias for `blendMode`.
  bm: String

  # Applies padding to the blend image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-pad).
  blendPad: Int

  # Alias for `blendPad`.
  blendpad: Int

  # Alias for `blendPad`.
  bp: Int

  # Adjusts the size of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-size).
  blendSize: String

  # Alias for `blendSize`.
  blendsize: String

  # Alias for `blendSize`.
  bs: String

  # Adjusts the width of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-w).
  blendW: Float

  # Alias for `blendW`.
  blendw: Float

  # Alias for `blendW`.
  bw: Float

  # Adjusts the x-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-x).
  blendX: Int

  # Alias for `blendX`.
  blendx: Int

  # Alias for `blendX`.
  bx: Int

  # Adjusts the y-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-y).
  blendY: Int

  # Alias for `blendY`.
  blendy: Int

  # Alias for `blendY`.
  by: Int

  # Specifies the location of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend).
  blend: String

  # Alias for `blend`.
  b: String

  # Applies a gaussian blur to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/blur).
  blur: Int

  # Sets bottom border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-bottom).
  borderBottom: Int

  # Sets left border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-left).
  borderLeft: Int

  # Sets the inner radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius-inner).
  borderRadiusInner: String

  # Sets the outer radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius).
  borderRadius: String

  # Sets right border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-right).
  borderRight: Int

  # Sets top border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-top).
  borderTop: Int

  # Applies a border to an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border).
  border: String

  # Adjusts the brightness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/bri).
  bri: Int

  # Sets one or more Client-Hints headers. [See docs](https://docs.imgix.com/apis/url/format/ch).
  ch: String

  # Specifies the output chroma subsampling rate. Default: `420`. [See docs](https://docs.imgix.com/apis/url/format/chromasub).
  chromasub: Int

  # Limits the number of unique colors in an image. [See docs](https://docs.imgix.com/apis/url/format/colorquant).
  colorquant: Int

  # Specifies how many colors to include in a palette-extraction response. Default: `6`. [See docs](https://docs.imgix.com/apis/url/color-palette/colors).
  colors: Int

  # Adjusts the contrast of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/con).
  con: Int

  # Specifies the radius value for a rounded corner mask. [See docs](https://docs.imgix.com/apis/url/mask/corner-radius).
  cornerRadius: String

  # Specifies how to crop an image. [See docs](https://docs.imgix.com/apis/url/size/crop).
  crop: String

  # Specifies the color space of the output image. [See docs](https://docs.imgix.com/apis/url/format/cs).
  cs: String

  # Forces a URL to use send-file in its response. [See docs](https://docs.imgix.com/apis/url/format/dl).
  dl: String

  # Sets the DPI value in the EXIF header. [See docs](https://docs.imgix.com/apis/url/format/dpi).
  dpi: Int

  # Adjusts the device-pixel ratio of the output image. Default: `1`. [See docs](https://docs.imgix.com/apis/url/dpr).
  dpr: Float

  # Changes the alpha of the duotone effect atop the source image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/stylize/duotone-alpha).
  duotoneAlpha: Int

  # Applies a duotone effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/duotone).
  duotone: String

  # Adjusts the exposure of the output image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/exp).
  exp: Int

  # A Unix timestamp specifying a UTC time. Requests made to this URL after that time will output a 404 status code. [See docs](https://docs.imgix.com/apis/url/expires).
  expires: String

  # Selects a face to crop to. [See docs](https://docs.imgix.com/apis/url/face-detection/faceindex).
  faceindex: Int

  # Adjusts padding around a selected face. Default: `1`. [See docs](https://docs.imgix.com/apis/url/face-detection/facepad).
  facepad: Float

  # Specifies that face data should be included in output when combined with `fm=json`. [See docs](https://docs.imgix.com/apis/url/face-detection/faces).
  faces: Int

  # Sets the fill color for images with additional space created by the fit setting. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/fill/fill-color).
  fillColor: String

  # Alias for `fillColor`.
  fillcolor: String

  # Determines how to fill in additional space created by the fit setting. [See docs](https://docs.imgix.com/apis/url/fill/fill).
  fill: String

  # Specifies how to map the source image to the output image dimensions. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/size/fit).
  fit: String

  # Alias for `fit`.
  f: String

  # Flips an image on a specified axis. [See docs](https://docs.imgix.com/apis/url/rotation/flip).
  flip: String

  # Changes the format of the output image. [See docs](https://docs.imgix.com/apis/url/format/fm).
  fm: String

  # Displays crosshairs identifying the location of the set focal point. Default: `false`. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-debug).
  fpDebug: Boolean

  # Sets the relative horizontal value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-x).
  fpX: Float

  # Sets the relative vertical value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-y).
  fpY: Float

  # Sets the relative zoom value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-z).
  fpZ: Float

  # Adjusts the gamma of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/gam).
  gam: Int

  # Sets grid colors for the transparency checkerboard grid.
  gridColors: String

  # Sets grid size for the transparency checkerboard grid.
  gridSize: Int

  # Adjusts the height of the output image. [See docs](https://docs.imgix.com/apis/url/size/h).
  h: Float

  # Alias for `h`.
  height: Float

  # Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/high).
  high: Int

  # Applies a half-tone effect to the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/htn).
  htn: Int

  # Adjusts the hue of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/hue).
  hue: Int

  # Inverts the colors on the source image. Default: `false`. [See docs](https://docs.imgix.com/apis/url/adjustment/invert).
  invert: Boolean

  # Alias for `invert`.
  inv: Boolean

  # Determine if IPTC data should be passed for JPEG images.
  iptc: String

  # Specifies that the output image should be a lossless variant. Default: `false`. [See docs](https://docs.imgix.com/apis/url/format/lossless).
  lossless: Boolean

  # Changes the watermark alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-align).
  markAlign: String

  # Alias for `markAlign`.
  ma: String

  # Alias for `markAlign`.
  markalign: String

  # Changes the alpha of the watermark image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-alpha).
  markAlpha: Int

  # Alias for `markAlpha`.
  markalpha: Int

  # Alias for `markAlpha`.
  malph: Int

  # Changes base URL of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-base).
  markBase: String

  # Alias for `markBase`.
  mb: String

  # Alias for `markBase`.
  markbase: String

  # Specifies the fit mode for watermark images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-fit).
  markFit: String

  # Alias for `markFit`.
  mf: String

  # Alias for `markFit`.
  markfit: String

  # Adjusts the height of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-h).
  markH: Float

  # Alias for `markH`.
  mh: Float

  # Alias for `markH`.
  markh: Float

  # Applies padding to the watermark image. Default: `5`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-pad).
  markPad: Int

  # Alias for `markPad`.
  mp: Int

  # Alias for `markPad`.
  markpad: Int

  # Rotates a watermark or tiled watermarks by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-rot).
  markRot: Float

  # Adjusts the scale of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-scale).
  markScale: Int

  # Alias for `markScale`.
  ms: Int

  # Alias for `markScale`.
  markscale: Int

  # Adds tiled watermark. [See docs](https://docs.imgix.com/apis/url/watermark/mark-tile).
  markTile: String

  # Alias for `markTile`.
  mtile: String

  # Alias for `markTile`.
  marktile: String

  # Adjusts the width of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-w).
  markW: Float

  # Alias for `markW`.
  mw: Float

  # Alias for `markW`.
  markw: Float

  # Adjusts the x-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-x).
  markX: Int

  # Alias for `markX`.
  mx: Int

  # Alias for `markX`.
  markx: Int

  # Adjusts the y-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-y).
  markY: Int

  # Alias for `markY`.
  my: Int

  # Alias for `markY`.
  marky: Int

  # Specifies the location of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark).
  mark: String

  # Alias for `mark`.
  m: String

  # Colors the background of the transparent mask area of images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/mask/mask-bg).
  maskBg: String

  # Alias for `maskBg`.
  maskbg: String

  # Defines the type of mask and specifies the URL if that type is selected. [See docs](https://docs.imgix.com/apis/url/mask).
  mask: String

  # Specifies the maximum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-height).
  maxH: Int

  # Alias for `maxH`.
  maxHeight: Int

  # Specifies the maximum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-width).
  maxW: Int

  # Alias for `maxW`.
  maxWidth: Int

  # Specifies the minimum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-height).
  minH: Int

  # Alias for `minH`.
  minHeight: Int

  # Specifies the minimum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-width).
  minW: Int

  # Alias for `minW`.
  minWidth: Int

  # Applies a monochrome effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/monochrome).
  monochrome: String

  # Alias for `monochrome`.
  mono: String

  # Reduces the noise in an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nr).
  nr: Int

  # Provides a threshold by which to sharpen an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nrs).
  nrs: Int

  # Changes the image orientation. [See docs](https://docs.imgix.com/apis/url/rotation/orient).
  orient: Int

  # Alias for `orient`.
  or: Int

  # Sets bottom padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-bottom).
  padBottom: Int

  # Sets left padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-left).
  padLeft: Int

  # Sets right padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-right).
  padRight: Int

  # Sets top padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-top).
  padTop: Int

  # Pads an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad).
  pad: Int

  # Selects a page from a PDF for display. Default: `1`. [See docs](https://docs.imgix.com/apis/url/pdf/page).
  page: Int

  # Specifies an output format for palette-extraction. [See docs](https://docs.imgix.com/apis/url/color-palette/palette).
  palette: String

  # Enables or disables PDF annotation. Default: `true`. [See docs](https://docs.imgix.com/apis/url/pdf/pdf-annotation).
  pdfAnnotation: Boolean

  # Alias for `pdfAnnotation`.
  annotation: Boolean

  # Specifies a CSS prefix for all classes in palette-extraction. Default: `image`. [See docs](https://docs.imgix.com/apis/url/color-palette/prefix).
  prefix: String

  # Applies a pixelation effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/px).
  px: Int

  # Adjusts the quality of an output image. Default: `75`. [See docs](https://docs.imgix.com/apis/url/format/q).
  q: Int

  # Crops an image to a specified rectangle. [See docs](https://docs.imgix.com/apis/url/size/rect).
  rect: String

  # Rotates an image by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/rotation/rot).
  rot: Float

  # Adjusts the saturation of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sat).
  sat: Int

  # Applies a sepia effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/sepia).
  sepia: Int

  # Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/shad).
  shad: Float

  # Adjusts the sharpness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sharp).
  sharp: Float

  # Adds checkerboard behind images which support transparency. [See docs](https://docs.imgix.com/apis/url/fill/transparency).
  transparency: String

  # Specifies a trim color on a trim operation. [See docs](https://docs.imgix.com/apis/url/trim/trim-color).
  trimColor: String

  # Alias for `trimColor`.
  trimcolor: String

  # Specifies the mean difference on a trim operation. Default: `11`. [See docs](https://docs.imgix.com/apis/url/trim/trim-md).
  trimMd: Float

  # Alias for `trimMd`.
  trimmd: Float

  # Pads the area of the source image before trimming. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-pad).
  trimPad: Int

  # Alias for `trimPad`.
  trimpad: Int

  # Specifies the standard deviation on a trim operation. Default: `10`. [See docs](https://docs.imgix.com/apis/url/trim/trim-sd).
  trimSd: Float

  # Alias for `trimSd`.
  trimsd: Float

  # Specifies the tolerance on a trim operation. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-tol).
  trimTol: Float

  # Alias for `trimTol`.
  trimtol: Float

  # Trims the source image. [See docs](https://docs.imgix.com/apis/url/trim/trim).
  trim: String

  # Sets the vertical and horizontal alignment of rendered text relative to the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-align).
  txtAlign: String

  # Alias for `txtAlign`.
  txtalign: String

  # Alias for `txtAlign`.
  ta: String

  # Sets the clipping properties of rendered text. Default: `end`. [See docs](https://docs.imgix.com/apis/url/text/txt-clip).
  txtClip: String

  # Alias for `txtClip`.
  txtclip: String

  # Alias for `txtClip`.
  tcl: String

  # Specifies the color of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-color).
  txtColor: String

  # Alias for `txtColor`.
  txtcolor: String

  # Alias for `txtColor`.
  txtClr: String

  # Alias for `txtColor`.
  txtclr: String

  # Alias for `txtColor`.
  tc: String

  # Specifies the fit approach for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-fit).
  txtFit: String

  # Alias for `txtFit`.
  txtfit: String

  # Selects a font for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-font).
  txtFont: String

  # Alias for `txtFont`.
  tf: String

  # Alias for `txtFont`.
  txtfont: String

  # Sets the leading (line spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-lead).
  txtLead: Int

  # Alias for `txtLead`.
  txtlead: Int

  # Controls the level of ligature substitution. [See docs](https://docs.imgix.com/apis/url/text/txt-lig).
  txtLig: Int

  # Alias for `txtLig`.
  txtlig: Int

  # Specifies a text outline color. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/text/txt-line-color).
  txtLineColor: String

  # Alias for `txtLineColor`.
  txtlinecolor: String

  # Alias for `txtLineColor`.
  txtLineClr: String

  # Alias for `txtLineColor`.
  txtlineclr: String

  # Outlines the rendered text with a specified color. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-line).
  txtLine: Int

  # Alias for `txtLine`.
  txtline: Int

  # Alias for `txtLine`.
  tl: Int

  # Specifies the padding (in device-independent pixels) between a textbox and the edges of the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-pad).
  txtPad: Int

  # Alias for `txtPad`.
  txtpad: Int

  # Alias for `txtPad`.
  tp: Int

  # Applies a shadow to rendered text. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-shad).
  txtShad: Float

  # Alias for `txtShad`.
  txtshad: Float

  # Alias for `txtShad`.
  tsh: Float

  # Sets the font size of rendered text. Default: `12`. [See docs](https://docs.imgix.com/apis/url/text/txt-size).
  txtSize: Int

  # Alias for `txtSize`.
  tsz: Int

  # Alias for `txtSize`.
  txtsize: Int

  # Sets the tracking (letter spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-track).
  txtTrack: Int

  # Alias for `txtTrack`.
  txttrack: Int

  # Alias for `txtTrack`.
  tt: Int

  # Sets the width of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-width).
  txtWidth: Int

  # Alias for `txtWidth`.
  txtwidth: Int

  # Sets the text string to render. [See docs](https://docs.imgix.com/apis/url/text/txt).
  txt: String

  # Alias for `txt`.
  t: String

  # Sharpens the source image using an unsharp mask. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/usm).
  usm: Int

  # Specifies the radius for an unsharp mask operation. Default: `2.5`. [See docs](https://docs.imgix.com/apis/url/adjustment/usmrad).
  usmrad: Float

  # Adjusts the vibrance of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/vib).
  vib: Int

  # Adjusts the width of the output image. [See docs](https://docs.imgix.com/apis/url/size/w).
  w: Float

  # Alias for `w`.
  width: Float
}

type PrismicMbtiTestResult implements Node {
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicMbtiIntro implements Node {
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicMbtiTestQuestion implements Node {
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicAdsIntro implements Node {
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicTeamPage implements Node {
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicMemberProfileDataImageImageThumbnailsType {
  small_banner: PrismicImageThumbnailType
  wide_banner: PrismicImageThumbnailType
}

type PrismicTermsAndConditionsDataType {
  content: PrismicStructuredTextType
  description: String
  revision_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
}

type PrismicFaqDataEntries {
  answer: PrismicStructuredTextType
  question: String
}

type PrismicTermsAndConditions implements Node {
  uid: String!
  data: PrismicTermsAndConditionsDataType!
  dataRaw: JSON!
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicTeamBannerDataLeftImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicFaqDataType {
  entries: [PrismicFaqDataEntries]
}

type PrismicGlobalContentsDataAboutBackgroundImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicFaq implements Node {
  uid: String!
  data: PrismicFaqDataType!
  dataRaw: JSON!
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicSiteNavigationDataFooterEntries {
  display_text: String
  group: String
  link: PrismicLinkType
}

type PrismicMemberProfileDataImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
  thumbnails: PrismicMemberProfileDataImageImageThumbnailsType
}

type PrismicTeamContentsDataCompletedPageLinkGroup {
  display_text: String
  link: PrismicLinkType
}

type PrismicAdvertisementContentsDataBodyVisitorCountSlideItem {
  region: String
  visitor_count: Float
}

type PrismicAdvertisementContentsDataBodyVisitorCountSlidePrimary {
  date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
}

type PrismicPayContentsDataBodyHeroPrimaryImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicAdvertisementContentsDataBodyVisitorCountSlide implements PrismicSliceType {
  items: [PrismicAdvertisementContentsDataBodyVisitorCountSlideItem!]!
  primary: PrismicAdvertisementContentsDataBodyVisitorCountSlidePrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamBannerDataRightImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicMemberProfileDataType {
  email: String
  image: PrismicMemberProfileDataImageImageType
  name: String
  nickname: String
  role: String
}

type PrismicPayContentsDataBodyHeroPrimary {
  image: PrismicPayContentsDataBodyHeroPrimaryImageImageType
}

type PrismicTeamsArticleDataBodyArticleSectionItemsThumbnailImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamBannerDataType {
  left: PrismicTeamBannerDataLeftImageType
  right: PrismicTeamBannerDataRightImageType
}

type PrismicMemberProfile implements Node {
  data: PrismicMemberProfileDataType!
  dataRaw: JSON!
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicSiteNavigationDataHeaderEntries {
  display_text: String
  group: String
  link: PrismicLinkType
}

union PrismicAdvertisementContentsDataBodySlicesType = PrismicAdvertisementContentsDataBodyVisitorCountSlide

type PrismicTeamBanner implements Node {
  data: PrismicTeamBannerDataType!
  dataRaw: JSON!
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicGlobalContentsDataAboutBodyDetailsListItem {
  label: String
  text: String
}

type PrismicAdvertisementContentsDataType {
  body: [PrismicAdvertisementContentsDataBodySlicesType!]!
}

type PrismicAdvertisementContents implements Node {
  data: PrismicAdvertisementContentsDataType!
  dataRaw: JSON!
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicTeamsArticleDataBodyArticleSectionItem {
  thumbnail_description: PrismicStructuredTextType
  thumbnail_image: PrismicTeamsArticleDataBodyArticleSectionItemsThumbnailImageImageType
}

type PrismicTeamsArticleDataBodyArticleSectionPrimary {
  body_text: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

type PrismicSiteNavigationDataSnsProfiles {
  link: PrismicLinkType
  service: String
}

type PrismicTeamsArticleDataBodyArticleSection implements PrismicSliceType {
  items: [PrismicTeamsArticleDataBodyArticleSectionItem!]!
  primary: PrismicTeamsArticleDataBodyArticleSectionPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicSiteNavigationDataType {
  address: PrismicStructuredTextType
  copyright: PrismicStructuredTextType
  email: PrismicStructuredTextType
  footer_entries: [PrismicSiteNavigationDataFooterEntries]
  header_entries: [PrismicSiteNavigationDataHeaderEntries]
  sns_profiles: [PrismicSiteNavigationDataSnsProfiles]
  tel: PrismicStructuredTextType
}

type PrismicTeamContentsDataCultureBodyBenefitItem {
  description: PrismicStructuredTextType
  subtext: String
  subtitle: String
}

type PrismicTeamContentsDataCultureBodyBenefitPrimary {
  title: PrismicStructuredTextType
}

type PrismicPayContentsDataBodyTitleAndDescriptionPrimary {
  description: PrismicStructuredTextType
  inverted: Boolean
  key_text: String
  link: PrismicLinkType
  link_text: String
  title: PrismicStructuredTextType
}

type PrismicGlobalContentsDataAboutBodySubtitleAndImagesItemsImageImageThumbnailsType {
  mobile: PrismicImageThumbnailType
}

union PrismicTeamsArticleDataBodySlicesType = PrismicTeamsArticleDataBodyArticleSection

type PrismicSiteNavigation implements Node {
  uid: String!
  data: PrismicSiteNavigationDataType!
  dataRaw: JSON!
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicGlobalContentsDataAboutBodySubtitleAndImagesItemsImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
  thumbnails: PrismicGlobalContentsDataAboutBodySubtitleAndImagesItemsImageImageThumbnailsType
}

type PrismicTeamsArticleDataPageMetaImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicGlobalContentsDataAboutBodySubtitleAndImagesItem {
  image: PrismicGlobalContentsDataAboutBodySubtitleAndImagesItemsImageImageType
}

type PrismicGlobalContentsDataAboutBodySubtitleAndImagesPrimary {
  subtitle: PrismicStructuredTextType
}

type PrismicPayContentsDataBodyTitleAndIllustrationPrimaryIllustrationImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamsArticleDataType {
  body: [PrismicTeamsArticleDataBodySlicesType!]!
  page_meta_description: String
  page_meta_image: PrismicTeamsArticleDataPageMetaImageImageType
  page_meta_title: String
  page_title: PrismicStructuredTextType
}

type PrismicTeamContentsDataCultureBodyHowWeWorkItem {
  description: PrismicStructuredTextType
  group: String
  key_text: String
}

type PrismicTeamContentsDataCultureBodyHowWeWorkPrimary {
  title: PrismicStructuredTextType
}

type PrismicTeamsArticle implements Node {
  uid: String!
  data: PrismicTeamsArticleDataType!
  dataRaw: JSON!
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicPayContentsDataBodyTitleAndIllustrationPrimary {
  illustration: PrismicPayContentsDataBodyTitleAndIllustrationPrimaryIllustrationImageType
  inverted: Boolean
  key_text: String
  link: PrismicLinkType
  link_text: String
  sub_title: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

type PrismicGlobalContentsDataAboutBodySubtitleAndLinksItem {
  date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  link: PrismicLinkType
  text: String
}

type PrismicGlobalContentsDataAboutBodySubtitleAndLinksPrimary {
  subtitle: PrismicStructuredTextType
}

type PrismicTeamContentsDataCultureBodyIllustrationAndDescriptionPrimaryIllustrationImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicGlobalContentsDataAboutBodySubtitleAndTextPrimary {
  subtitle: PrismicStructuredTextType
  text: PrismicStructuredTextType
}

type PrismicTeamContentsDataCultureBodyIllustrationAndDescriptionPrimary {
  description: PrismicStructuredTextType
  expanded: Boolean
  illustration: PrismicTeamContentsDataCultureBodyIllustrationAndDescriptionPrimaryIllustrationImageType
  inverted: Boolean
  link: PrismicLinkType
  link_text: String
}

type PrismicPayContentsDataBodyWideBannerPrimaryThumbnailImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicGlobalContentsDataAboutBodyDetailsList implements PrismicSliceType {
  items: [PrismicGlobalContentsDataAboutBodyDetailsListItem!]!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicGlobalContentsDataAboutBodySubtitleAndImages implements PrismicSliceType {
  items: [PrismicGlobalContentsDataAboutBodySubtitleAndImagesItem!]!
  primary: PrismicGlobalContentsDataAboutBodySubtitleAndImagesPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicGlobalContentsDataAboutBodySubtitleAndLinks implements PrismicSliceType {
  items: [PrismicGlobalContentsDataAboutBodySubtitleAndLinksItem!]!
  primary: PrismicGlobalContentsDataAboutBodySubtitleAndLinksPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicGlobalContentsDataAboutBodySubtitleAndText implements PrismicSliceType {
  primary: PrismicGlobalContentsDataAboutBodySubtitleAndTextPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicPayContentsDataBodyWideBannerPrimary {
  background_color: String
  link: PrismicLinkType
  link_text: String
  thumbnail: PrismicPayContentsDataBodyWideBannerPrimaryThumbnailImageType
  title: PrismicStructuredTextType
}

union PrismicGlobalContentsDataAboutBodySlicesType = PrismicGlobalContentsDataAboutBodyDetailsList | PrismicGlobalContentsDataAboutBodySubtitleAndImages | PrismicGlobalContentsDataAboutBodySubtitleAndLinks | PrismicGlobalContentsDataAboutBodySubtitleAndText

type PrismicPayContentsDataBodyHero implements PrismicSliceType {
  primary: PrismicPayContentsDataBodyHeroPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicPayContentsDataBodyTitleAndDescription implements PrismicSliceType {
  primary: PrismicPayContentsDataBodyTitleAndDescriptionPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicPayContentsDataBodyTitleAndIllustration implements PrismicSliceType {
  primary: PrismicPayContentsDataBodyTitleAndIllustrationPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicPayContentsDataBodyWideBanner implements PrismicSliceType {
  primary: PrismicPayContentsDataBodyWideBannerPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataCultureBodyKeyVisualPrimaryKeyVisualImageImageThumbnailsType {
  portrait: PrismicImageThumbnailType
}

union PrismicPayContentsDataBodySlicesType = PrismicPayContentsDataBodyHero | PrismicPayContentsDataBodyTitleAndDescription | PrismicPayContentsDataBodyTitleAndIllustration | PrismicPayContentsDataBodyWideBanner

type PrismicGlobalContentsDataAboutOpengraphImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamContentsDataCultureBodyKeyVisualPrimaryKeyVisualImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
  thumbnails: PrismicTeamContentsDataCultureBodyKeyVisualPrimaryKeyVisualImageImageThumbnailsType
}

type PrismicPayContentsDataLogoIconImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamContentsDataCultureBodyKeyVisualPrimary {
  description: PrismicStructuredTextType
  expanded: Boolean
  key_visual_image: PrismicTeamContentsDataCultureBodyKeyVisualPrimaryKeyVisualImageImageType
}

type PrismicPayContentsDataType {
  body: [PrismicPayContentsDataBodySlicesType!]!
  logo_icon: PrismicPayContentsDataLogoIconImageType
}

type PrismicPayContents implements Node {
  data: PrismicPayContentsDataType!
  dataRaw: JSON!
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicGlobalContentsDataMainBodyCentreSectionPrimaryImageImageThumbnailsType {
  mobile: PrismicImageThumbnailType
}

type PrismicTeamContentsDataCultureBodyMemberQuoteCarouselItemsImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamContentsDataCultureBodyMemberQuoteCarouselItem {
  image: PrismicTeamContentsDataCultureBodyMemberQuoteCarouselItemsImageImageType
  quote: String
  who: String
}

type PrismicGlobalContentsDataMainBodyCentreSectionPrimaryImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
  thumbnails: PrismicGlobalContentsDataMainBodyCentreSectionPrimaryImageImageThumbnailsType
}

type PrismicGlobalContentsDataMainBodyCentreSectionPrimary {
  image: PrismicGlobalContentsDataMainBodyCentreSectionPrimaryImageImageType
  text: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataCultureBodyTitleAndDescriptionPrimary {
  description: PrismicStructuredTextType
  inverted: Boolean
  key_text: String
  link: PrismicLinkType
  link_text: String
  title: PrismicStructuredTextType
}

type PrismicGlobalContentsDataMainBodyDownloadSectionPrimary {
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataCultureBodyTitleAndIllustrationPrimaryIllustrationImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicGlobalContentsDataMainBodyHeroSectionPrimaryBackgroundImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicGlobalContentsDataMainBodyHeroSectionPrimarySideImageImageThumbnailsType {
  mobile: PrismicImageThumbnailType
}

type PrismicTeamContentsDataCultureBodyTitleAndIllustrationPrimary {
  illustration: PrismicTeamContentsDataCultureBodyTitleAndIllustrationPrimaryIllustrationImageType
  inverted: Boolean
  key_text: String
  link: PrismicLinkType
  link_text: String
  title: PrismicStructuredTextType
}

type PrismicGlobalContentsDataMainBodyHeroSectionPrimarySideImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
  thumbnails: PrismicGlobalContentsDataMainBodyHeroSectionPrimarySideImageImageThumbnailsType
}

type PrismicGlobalContentsDataMainBodyHeroSectionPrimary {
  background_color: String
  background_image: PrismicGlobalContentsDataMainBodyHeroSectionPrimaryBackgroundImageImageType
  side_image: PrismicGlobalContentsDataMainBodyHeroSectionPrimarySideImageImageType
  text: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataCultureBodyWideBannerPrimaryThumbnailImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamContentsDataCultureBodyWideBannerPrimary {
  background_color: String
  link: PrismicLinkType
  link_text: String
  thumbnail: PrismicTeamContentsDataCultureBodyWideBannerPrimaryThumbnailImageType
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataCultureBodyBenefit implements PrismicSliceType {
  items: [PrismicTeamContentsDataCultureBodyBenefitItem!]!
  primary: PrismicTeamContentsDataCultureBodyBenefitPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataCultureBodyDivider implements PrismicSliceType {
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataCultureBodyHowWeWork implements PrismicSliceType {
  items: [PrismicTeamContentsDataCultureBodyHowWeWorkItem!]!
  primary: PrismicTeamContentsDataCultureBodyHowWeWorkPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataCultureBodyIllustrationAndDescription implements PrismicSliceType {
  primary: PrismicTeamContentsDataCultureBodyIllustrationAndDescriptionPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataCultureBodyKeyVisual implements PrismicSliceType {
  primary: PrismicTeamContentsDataCultureBodyKeyVisualPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataCultureBodyMemberQuoteCarousel implements PrismicSliceType {
  items: [PrismicTeamContentsDataCultureBodyMemberQuoteCarouselItem!]!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataCultureBodyTitleAndDescription implements PrismicSliceType {
  primary: PrismicTeamContentsDataCultureBodyTitleAndDescriptionPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataCultureBodyTitleAndIllustration implements PrismicSliceType {
  primary: PrismicTeamContentsDataCultureBodyTitleAndIllustrationPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataCultureBodyWideBanner implements PrismicSliceType {
  primary: PrismicTeamContentsDataCultureBodyWideBannerPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicGlobalContentsDataMainBodyIllustrationSectionPrimaryImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

union PrismicTeamContentsDataCultureBodySlicesType = PrismicTeamContentsDataCultureBodyBenefit | PrismicTeamContentsDataCultureBodyDivider | PrismicTeamContentsDataCultureBodyHowWeWork | PrismicTeamContentsDataCultureBodyIllustrationAndDescription | PrismicTeamContentsDataCultureBodyKeyVisual | PrismicTeamContentsDataCultureBodyMemberQuoteCarousel | PrismicTeamContentsDataCultureBodyTitleAndDescription | PrismicTeamContentsDataCultureBodyTitleAndIllustration | PrismicTeamContentsDataCultureBodyWideBanner

type PrismicGlobalContentsDataMainBodyIllustrationSectionPrimary {
  image: PrismicGlobalContentsDataMainBodyIllustrationSectionPrimaryImageImageType
  inverted: Boolean
  text: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataCulturePageMetaImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicGlobalContentsDataMainBodyMockupSectionItem {
  icon: String
  text: String
}

type PrismicGlobalContentsDataMainBodyMockupSectionPrimary {
  background_color: String
  inverted: Boolean
  phone_mockup_component: String
  text: PrismicStructuredTextType
  text_highlight_color: String
}

type PrismicTeamContentsDataFaqEntries {
  answer: PrismicStructuredTextType
  question: String
}

type PrismicGlobalContentsDataMainBodyParallaxSectionPrimaryBackgroundImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamContentsDataJobsPageMetaImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicGlobalContentsDataMainBodyParallaxSectionPrimary {
  background_image: PrismicGlobalContentsDataMainBodyParallaxSectionPrimaryBackgroundImageImageType
  title: PrismicStructuredTextType
  top_icon: String
  top_text: PrismicStructuredTextType
}

type PrismicGlobalContentsDataMainBodyPopularSectionPrimary {
  more_button: String
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataLifeBodyKeyVisualPrimaryKeyVisualImageImageThumbnailsType {
  portrait: PrismicImageThumbnailType
}

type PrismicTeamContentsDataLifeBodyKeyVisualPrimaryKeyVisualImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
  thumbnails: PrismicTeamContentsDataLifeBodyKeyVisualPrimaryKeyVisualImageImageThumbnailsType
}

type PrismicTeamContentsDataLifeBodyKeyVisualPrimary {
  description: PrismicStructuredTextType
  expanded: Boolean
  key_visual_image: PrismicTeamContentsDataLifeBodyKeyVisualPrimaryKeyVisualImageImageType
}

type PrismicGlobalContentsDataMainBodyReviewSectionPrimaryImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicGlobalContentsDataMainBodyReviewSectionItem {
  content: PrismicStructuredTextType
  text_highlight_color: String
  user_name: String
  user_region: String
}

type PrismicGlobalContentsDataMainBodyReviewSectionPrimary {
  background_color: String
  image: PrismicGlobalContentsDataMainBodyReviewSectionPrimaryImageImageType
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataLifeBodyLifeContentItemsThumbnailImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicGlobalContentsDataMainBodyCentreSection implements PrismicSliceType {
  primary: PrismicGlobalContentsDataMainBodyCentreSectionPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicGlobalContentsDataMainBodyDownloadSection implements PrismicSliceType {
  primary: PrismicGlobalContentsDataMainBodyDownloadSectionPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicGlobalContentsDataMainBodyHeroSection implements PrismicSliceType {
  primary: PrismicGlobalContentsDataMainBodyHeroSectionPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicGlobalContentsDataMainBodyIllustrationSection implements PrismicSliceType {
  primary: PrismicGlobalContentsDataMainBodyIllustrationSectionPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicGlobalContentsDataMainBodyMockupSection implements PrismicSliceType {
  items: [PrismicGlobalContentsDataMainBodyMockupSectionItem!]!
  primary: PrismicGlobalContentsDataMainBodyMockupSectionPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicGlobalContentsDataMainBodyParallaxSection implements PrismicSliceType {
  primary: PrismicGlobalContentsDataMainBodyParallaxSectionPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicGlobalContentsDataMainBodyPopularSection implements PrismicSliceType {
  primary: PrismicGlobalContentsDataMainBodyPopularSectionPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicGlobalContentsDataMainBodyReviewSection implements PrismicSliceType {
  items: [PrismicGlobalContentsDataMainBodyReviewSectionItem!]!
  primary: PrismicGlobalContentsDataMainBodyReviewSectionPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

union PrismicGlobalContentsDataMainBodySlicesType = PrismicGlobalContentsDataMainBodyCentreSection | PrismicGlobalContentsDataMainBodyDownloadSection | PrismicGlobalContentsDataMainBodyHeroSection | PrismicGlobalContentsDataMainBodyIllustrationSection | PrismicGlobalContentsDataMainBodyMockupSection | PrismicGlobalContentsDataMainBodyParallaxSection | PrismicGlobalContentsDataMainBodyPopularSection | PrismicGlobalContentsDataMainBodyReviewSection

type PrismicTeamContentsDataLifeBodyLifeContentItem {
  thumbnail_description: PrismicStructuredTextType
  thumbnail_image: PrismicTeamContentsDataLifeBodyLifeContentItemsThumbnailImageImageType
}

type PrismicTeamContentsDataLifeBodyLifeContentPrimary {
  body_text: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataLifeBodyKeyVisual implements PrismicSliceType {
  primary: PrismicTeamContentsDataLifeBodyKeyVisualPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataLifeBodyLifeContent implements PrismicSliceType {
  items: [PrismicTeamContentsDataLifeBodyLifeContentItem!]!
  primary: PrismicTeamContentsDataLifeBodyLifeContentPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicGlobalContentsDataMainOpengraphImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

union PrismicTeamContentsDataLifeBodySlicesType = PrismicTeamContentsDataLifeBodyKeyVisual | PrismicTeamContentsDataLifeBodyLifeContent

type PrismicGlobalContentsDataType {
  about_background_image: PrismicGlobalContentsDataAboutBackgroundImageImageType
  about_body: [PrismicGlobalContentsDataAboutBodySlicesType!]!
  about_opengraph_image: PrismicGlobalContentsDataAboutOpengraphImageImageType
  about_opengraph_image_link: String
  about_page_description: String
  about_page_title: String
  about_title: PrismicStructuredTextType
  app_store_link: String
  google_play_link: String
  main_body: [PrismicGlobalContentsDataMainBodySlicesType!]!
  main_opengraph_image: PrismicGlobalContentsDataMainOpengraphImageImageType
  main_opengraph_image_link: String
  main_page_description: String
  main_page_title: String
  one_link: String
  one_link_button_text: String
}

type PrismicGlobalContents implements Node {
  data: PrismicGlobalContentsDataType!
  dataRaw: JSON!
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicTeamContentsDataLifePageMetaImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamContentsDataMainBodyBenefitItem {
  description: PrismicStructuredTextType
  subtext: String
  subtitle: String
}

type PrismicTeamContentsDataMainBodyBenefitPrimary {
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataMainBodyHowWeWorkItem {
  description: PrismicStructuredTextType
  group: String
  key_text: String
}

type PrismicTeamContentsDataMainBodyHowWeWorkPrimary {
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataMainBodyIllustrationAndDescriptionPrimaryIllustrationImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamContentsDataMainBodyIllustrationAndDescriptionPrimary {
  description: PrismicStructuredTextType
  expanded: Boolean
  illustration: PrismicTeamContentsDataMainBodyIllustrationAndDescriptionPrimaryIllustrationImageType
  inverted: Boolean
  link: PrismicLinkType
  link_text: String
}

type PrismicTeamContentsDataMainBodyKeyVisualPrimaryKeyVisualImageImageThumbnailsType {
  portrait: PrismicImageThumbnailType
}

type PrismicTeamContentsDataMainBodyKeyVisualPrimaryKeyVisualImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
  thumbnails: PrismicTeamContentsDataMainBodyKeyVisualPrimaryKeyVisualImageImageThumbnailsType
}

type PrismicTeamContentsDataMainBodyKeyVisualPrimary {
  description: PrismicStructuredTextType
  expanded: Boolean
  key_visual_image: PrismicTeamContentsDataMainBodyKeyVisualPrimaryKeyVisualImageImageType
}

type PrismicTeamContentsDataMainBodyMemberQuoteCarouselItemsImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamContentsDataMainBodyMemberQuoteCarouselItem {
  image: PrismicTeamContentsDataMainBodyMemberQuoteCarouselItemsImageImageType
  quote: String
  who: String
}

type PrismicTeamContentsDataMainBodyTitleAndDescriptionPrimary {
  description: PrismicStructuredTextType
  inverted: Boolean
  key_text: String
  link: PrismicLinkType
  link_text: String
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataMainBodyTitleAndIllustrationPrimaryIllustrationImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamContentsDataMainBodyTitleAndIllustrationPrimary {
  illustration: PrismicTeamContentsDataMainBodyTitleAndIllustrationPrimaryIllustrationImageType
  inverted: Boolean
  key_text: String
  link: PrismicLinkType
  link_text: String
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataMainBodyWideBannerPrimaryThumbnailImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamContentsDataMainBodyWideBannerPrimary {
  background_color: String
  link: PrismicLinkType
  link_text: String
  thumbnail: PrismicTeamContentsDataMainBodyWideBannerPrimaryThumbnailImageType
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataMainBodyBenefit implements PrismicSliceType {
  items: [PrismicTeamContentsDataMainBodyBenefitItem!]!
  primary: PrismicTeamContentsDataMainBodyBenefitPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataMainBodyDivider implements PrismicSliceType {
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataMainBodyHowWeWork implements PrismicSliceType {
  items: [PrismicTeamContentsDataMainBodyHowWeWorkItem!]!
  primary: PrismicTeamContentsDataMainBodyHowWeWorkPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataMainBodyIllustrationAndDescription implements PrismicSliceType {
  primary: PrismicTeamContentsDataMainBodyIllustrationAndDescriptionPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataMainBodyKeyVisual implements PrismicSliceType {
  primary: PrismicTeamContentsDataMainBodyKeyVisualPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataMainBodyMemberQuoteCarousel implements PrismicSliceType {
  items: [PrismicTeamContentsDataMainBodyMemberQuoteCarouselItem!]!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataMainBodyTitleAndDescription implements PrismicSliceType {
  primary: PrismicTeamContentsDataMainBodyTitleAndDescriptionPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataMainBodyTitleAndIllustration implements PrismicSliceType {
  primary: PrismicTeamContentsDataMainBodyTitleAndIllustrationPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataMainBodyWideBanner implements PrismicSliceType {
  primary: PrismicTeamContentsDataMainBodyWideBannerPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

union PrismicTeamContentsDataMainBodySlicesType = PrismicTeamContentsDataMainBodyBenefit | PrismicTeamContentsDataMainBodyDivider | PrismicTeamContentsDataMainBodyHowWeWork | PrismicTeamContentsDataMainBodyIllustrationAndDescription | PrismicTeamContentsDataMainBodyKeyVisual | PrismicTeamContentsDataMainBodyMemberQuoteCarousel | PrismicTeamContentsDataMainBodyTitleAndDescription | PrismicTeamContentsDataMainBodyTitleAndIllustration | PrismicTeamContentsDataMainBodyWideBanner

type PrismicTeamContentsDataMainPageMetaImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamContentsDataNotfoundPageLinkGroup {
  display_text: String
  link: PrismicLinkType
}

type PrismicTeamContentsDataType {
  completed_page_content: PrismicStructuredTextType
  completed_page_link_group: [PrismicTeamContentsDataCompletedPageLinkGroup]
  culture_body: [PrismicTeamContentsDataCultureBodySlicesType!]!
  culture_page_meta_description: String
  culture_page_meta_image: PrismicTeamContentsDataCulturePageMetaImageImageType
  culture_page_meta_title: String
  culture_page_title: PrismicStructuredTextType
  enable_culture_page: Boolean
  enable_faq_page: Boolean
  enable_life_page: Boolean
  faq_entries: [PrismicTeamContentsDataFaqEntries]
  faq_page_meta_description: String
  faq_page_meta_title: String
  faq_page_title: PrismicStructuredTextType
  fb_app_id: String
  jobs_page_meta_description: String
  jobs_page_meta_image: PrismicTeamContentsDataJobsPageMetaImageImageType
  jobs_page_meta_title: String
  jobs_page_title: PrismicStructuredTextType
  life_body: [PrismicTeamContentsDataLifeBodySlicesType!]!
  life_page_meta_description: String
  life_page_meta_image: PrismicTeamContentsDataLifePageMetaImageImageType
  life_page_meta_title: String
  life_page_title: PrismicStructuredTextType
  main_body: [PrismicTeamContentsDataMainBodySlicesType!]!
  main_page_meta_description: String
  main_page_meta_image: PrismicTeamContentsDataMainPageMetaImageImageType
  main_page_meta_title: String
  main_page_title: PrismicStructuredTextType
  notfound_page_link_group: [PrismicTeamContentsDataNotfoundPageLinkGroup]
  notfound_page_title: PrismicStructuredTextType
  twitter_site_handle: String
}

type PrismicTeamContents implements Node {
  data: PrismicTeamContentsDataType!
  dataRaw: JSON!
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

union PrismicAllDocumentTypes = PrismicMbtiTestResult | PrismicMbtiIntro | PrismicMbtiTestQuestion | PrismicAdsIntro | PrismicGlobalContents | PrismicFaq | PrismicMemberProfile | PrismicPayContents | PrismicSiteNavigation | PrismicTeamBanner | PrismicTeamContents | PrismicTeamPage | PrismicTeamsArticle | PrismicTermsAndConditions | PrismicAdvertisementContents

type LokaliseTranslation implements Node {
  locale: String!
  messages: LokaliseMessages!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type LokaliseMessages {
  jobs_page__chapter_all: String
  jobs_page__employment_type_intern: String
  jobs_page__employment_type_fulltime: String
  jobs_page__employment_type_contractor: String
  jobs_page__employment_type_all: String
  jobs_page__employment_type_assistant: String
  jobs_page__search: String
  job_post_list__empty_placeholder__no_results: String
  job_post_list__empty_placeholder__back_to_list: String
  job_post_layout__tab_apply: String
  job_post_layout__tab_view: String
  job_post_layout__property_karrot_market: String
  job_post_page__faq: String
  job_post_page__back_to_list: String
  job_post_page__external_post_notice: String
  job_post_page__external_post_link: String
  job_application_page__field_portpolio_label: String
  job_application_page__field_phone_label: String
  job_application_page__field_phone_placeholder: String
  job_application_page__field_email_label: String
  job_application_page__field_resume_placeholder: String
  job_application_page__field_portpolio_placeholder: String
  job_application_page__field_resume_description: String
  job_application_page__field_name_label: String
  job_application_page__field_portpolio_description: String
  job_application_page__field_name_placeholder: String
  job_application_page__field_email_placeholder: String
  job_application_page__field_resume_label: String
  job_application_page__terms_sensitive_info: String
  job_application_page__button_submit: String
  job_application_page__terms_privacy_info: String
  job_application_page__confirm_apply: String
  job_post_layout__property_karrot_pay: String
  job_application_page__alert_completed: String
  job_application_page__alert_failed: String
  jobs_page__default_meta_title: String
  job_post_layout__prior_experience_yes: String
  job_post_layout__prior_experience_no: String
  job_post_layout__prior_experience_whatever: String
  job_application_page__field_file_placeholder: String
  detail_link__default_label: String
  form_field__placeholder: String
  form_field__empty_placeholder: String
  form_field__organization_name: String
  form_field__yes_placeholder: String
  form_field__no_placeholder: String
}

type PrismicImageFixedType {
  base64: String
  width: Int
  height: Int
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
}

type PrismicImageFluidType {
  base64: String
  aspectRatio: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  sizes: String
}

type Query {
  site(buildTime: DateQueryOperatorInput, siteMetadata: SiteMetadataFilterInput, port: IntQueryOperatorInput, host: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, pathPrefix: StringQueryOperatorInput, jsxRuntime: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Site
  file(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, url: StringQueryOperatorInput, childrenImageSharp: ImageSharpFilterListInput, childImageSharp: ImageSharpFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): File
  allFile(filter: FileFilterInput, sort: FileSortInput, skip: Int, limit: Int): FileConnection!
  directory(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Directory
  allDirectory(filter: DirectoryFilterInput, sort: DirectorySortInput, skip: Int, limit: Int): DirectoryConnection!
  allSite(filter: SiteFilterInput, sort: SiteSortInput, skip: Int, limit: Int): SiteConnection!
  siteFunction(functionRoute: StringQueryOperatorInput, pluginName: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput, absoluteCompiledFilePath: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SiteFunction
  allSiteFunction(filter: SiteFunctionFilterInput, sort: SiteFunctionSortInput, skip: Int, limit: Int): SiteFunctionConnection!
  sitePage(path: StringQueryOperatorInput, component: StringQueryOperatorInput, internalComponentName: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, pageContext: JSONQueryOperatorInput, pluginCreator: SitePluginFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SitePage
  allSitePage(filter: SitePageFilterInput, sort: SitePageSortInput, skip: Int, limit: Int): SitePageConnection!
  sitePlugin(resolve: StringQueryOperatorInput, name: StringQueryOperatorInput, version: StringQueryOperatorInput, nodeAPIs: StringQueryOperatorInput, browserAPIs: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, pluginFilepath: StringQueryOperatorInput, pluginOptions: JSONQueryOperatorInput, packageJson: JSONQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SitePlugin
  allSitePlugin(filter: SitePluginFilterInput, sort: SitePluginSortInput, skip: Int, limit: Int): SitePluginConnection!
  siteBuildMetadata(buildTime: DateQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SiteBuildMetadata
  allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, sort: SiteBuildMetadataSortInput, skip: Int, limit: Int): SiteBuildMetadataConnection!
  imageSharp(fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: JSONQueryOperatorInput, original: ImageSharpOriginalFilterInput, resize: ImageSharpResizeFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ImageSharp
  allImageSharp(filter: ImageSharpFilterInput, sort: ImageSharpSortInput, skip: Int, limit: Int): ImageSharpConnection!
  localSearchJobPosts(name: StringQueryOperatorInput, engine: StringQueryOperatorInput, index: StringQueryOperatorInput, store: JSONQueryOperatorInput, publicIndexURL: StringQueryOperatorInput, publicStoreURL: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): LocalSearchJobPosts
  allLocalSearchJobPosts(filter: LocalSearchJobPostsFilterInput, sort: LocalSearchJobPostsSortInput, skip: Int, limit: Int): LocalSearchJobPostsConnection!
  prismicEmbedType(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicEmbedType
  allPrismicEmbedType(filter: PrismicEmbedTypeFilterInput, sort: PrismicEmbedTypeSortInput, skip: Int, limit: Int): PrismicEmbedTypeConnection!
  prismicTypePathType(kind: StringQueryOperatorInput, path: StringQueryOperatorInput, type: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicTypePathType
  allPrismicTypePathType(filter: PrismicTypePathTypeFilterInput, sort: PrismicTypePathTypeSortInput, skip: Int, limit: Int): PrismicTypePathTypeConnection!
  prismicMbtiTestResult(prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicMbtiTestResult
  allPrismicMbtiTestResult(filter: PrismicMbtiTestResultFilterInput, sort: PrismicMbtiTestResultSortInput, skip: Int, limit: Int): PrismicMbtiTestResultConnection!
  prismicMbtiIntro(prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicMbtiIntro
  allPrismicMbtiIntro(filter: PrismicMbtiIntroFilterInput, sort: PrismicMbtiIntroSortInput, skip: Int, limit: Int): PrismicMbtiIntroConnection!
  prismicMbtiTestQuestion(prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicMbtiTestQuestion
  allPrismicMbtiTestQuestion(filter: PrismicMbtiTestQuestionFilterInput, sort: PrismicMbtiTestQuestionSortInput, skip: Int, limit: Int): PrismicMbtiTestQuestionConnection!
  prismicAdsIntro(prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicAdsIntro
  allPrismicAdsIntro(filter: PrismicAdsIntroFilterInput, sort: PrismicAdsIntroSortInput, skip: Int, limit: Int): PrismicAdsIntroConnection!
  prismicTeamPage(prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicTeamPage
  allPrismicTeamPage(filter: PrismicTeamPageFilterInput, sort: PrismicTeamPageSortInput, skip: Int, limit: Int): PrismicTeamPageConnection!
  prismicTermsAndConditions(uid: StringQueryOperatorInput, data: PrismicTermsAndConditionsDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicTermsAndConditions
  allPrismicTermsAndConditions(filter: PrismicTermsAndConditionsFilterInput, sort: PrismicTermsAndConditionsSortInput, skip: Int, limit: Int): PrismicTermsAndConditionsConnection!
  prismicFaq(uid: StringQueryOperatorInput, data: PrismicFaqDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicFaq
  allPrismicFaq(filter: PrismicFaqFilterInput, sort: PrismicFaqSortInput, skip: Int, limit: Int): PrismicFaqConnection!
  prismicMemberProfile(data: PrismicMemberProfileDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicMemberProfile
  allPrismicMemberProfile(filter: PrismicMemberProfileFilterInput, sort: PrismicMemberProfileSortInput, skip: Int, limit: Int): PrismicMemberProfileConnection!
  prismicTeamBanner(data: PrismicTeamBannerDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicTeamBanner
  allPrismicTeamBanner(filter: PrismicTeamBannerFilterInput, sort: PrismicTeamBannerSortInput, skip: Int, limit: Int): PrismicTeamBannerConnection!
  prismicAdvertisementContents(dataRaw: JSONQueryOperatorInput, prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicAdvertisementContents
  allPrismicAdvertisementContents(filter: PrismicAdvertisementContentsFilterInput, sort: PrismicAdvertisementContentsSortInput, skip: Int, limit: Int): PrismicAdvertisementContentsConnection!
  prismicSiteNavigation(uid: StringQueryOperatorInput, data: PrismicSiteNavigationDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicSiteNavigation
  allPrismicSiteNavigation(filter: PrismicSiteNavigationFilterInput, sort: PrismicSiteNavigationSortInput, skip: Int, limit: Int): PrismicSiteNavigationConnection!
  prismicTeamsArticle(uid: StringQueryOperatorInput, data: PrismicTeamsArticleDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicTeamsArticle
  allPrismicTeamsArticle(filter: PrismicTeamsArticleFilterInput, sort: PrismicTeamsArticleSortInput, skip: Int, limit: Int): PrismicTeamsArticleConnection!
  prismicPayContents(data: PrismicPayContentsDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicPayContents
  allPrismicPayContents(filter: PrismicPayContentsFilterInput, sort: PrismicPayContentsSortInput, skip: Int, limit: Int): PrismicPayContentsConnection!
  prismicGlobalContents(data: PrismicGlobalContentsDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicGlobalContents
  allPrismicGlobalContents(filter: PrismicGlobalContentsFilterInput, sort: PrismicGlobalContentsSortInput, skip: Int, limit: Int): PrismicGlobalContentsConnection!
  prismicTeamContents(data: PrismicTeamContentsDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicTeamContents
  allPrismicTeamContents(filter: PrismicTeamContentsFilterInput, sort: PrismicTeamContentsSortInput, skip: Int, limit: Int): PrismicTeamContentsConnection!
  lokaliseTranslation(locale: StringQueryOperatorInput, messages: LokaliseMessagesFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): LokaliseTranslation
  allLokaliseTranslation(filter: LokaliseTranslationFilterInput, sort: LokaliseTranslationSortInput, skip: Int, limit: Int): LokaliseTranslationConnection!
  jobPost(slug: StringQueryOperatorInput, absoluteUrl: StringQueryOperatorInput, ghId: StringQueryOperatorInput, parentJob: GreenhouseJobBoardJobFilterInput, updatedAt: DateQueryOperatorInput, validThrough: DateQueryOperatorInput, title: StringQueryOperatorInput, boardToken: StringQueryOperatorInput, boardUrl: StringQueryOperatorInput, content: JobPostContentSectionFilterListInput, rawContent: StringQueryOperatorInput, corporate: JobCorporateQueryOperatorInput, employmentType: JobEmploymentTypeQueryOperatorInput, alternativeCivilianService: BooleanQueryOperatorInput, priorExperience: JobPriorExperienceQueryOperatorInput, chapter: StringQueryOperatorInput, keywords: StringQueryOperatorInput, order: IntQueryOperatorInput, externalUrl: StringQueryOperatorInput, tags: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): JobPost
  allJobPost(filter: JobPostFilterInput, sort: JobPostSortInput, skip: Int, limit: Int): JobPostConnection!
  greenhouseJobBoardJob(ghId: StringQueryOperatorInput, title: StringQueryOperatorInput, boardUrl: StringQueryOperatorInput, content: StringQueryOperatorInput, updatedAt: DateQueryOperatorInput, questions: GreenhouseJobBoardJobQuestionFilterListInput, locationQuestions: GreenhouseJobBoardJobQuestionFilterListInput, departments: GreenhouseJobBoardDepartmentFilterListInput, metadata: GreenhouseJobBoardJobCustomFieldMetadataFilterListInput, boardToken: StringQueryOperatorInput, childJobPost: JobPostFilterInput, childrenJobPost: JobPostFilterListInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): GreenhouseJobBoardJob
  allGreenhouseJobBoardJob(filter: GreenhouseJobBoardJobFilterInput, sort: GreenhouseJobBoardJobSortInput, skip: Int, limit: Int): GreenhouseJobBoardJobConnection!
  greenhouseJobBoardDepartment(ghId: StringQueryOperatorInput, name: StringQueryOperatorInput, jobs: GreenhouseJobBoardJobFilterListInput, parentDepartment: GreenhouseJobBoardDepartmentFilterInput, childDepartments: GreenhouseJobBoardDepartmentFilterListInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): GreenhouseJobBoardDepartment
  allGreenhouseJobBoardDepartment(filter: GreenhouseJobBoardDepartmentFilterInput, sort: GreenhouseJobBoardDepartmentSortInput, skip: Int, limit: Int): GreenhouseJobBoardDepartmentConnection!
}

input DateQueryOperatorInput {
  eq: Date
  ne: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  in: [Date]
  nin: [Date]
}

input SiteMetadataFilterInput {
  siteUrl: StringQueryOperatorInput
  siteName: StringQueryOperatorInput
}

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}

input IntQueryOperatorInput {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input BooleanQueryOperatorInput {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

input NodeFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input FloatQueryOperatorInput {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input ImageSharpFilterListInput {
  elemMatch: ImageSharpFilterInput
}

input ImageSharpFilterInput {
  fixed: ImageSharpFixedFilterInput
  fluid: ImageSharpFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  original: ImageSharpOriginalFilterInput
  resize: ImageSharpResizeFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ImageSharpFixedFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
}

input ImageSharpFluidFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
}

input JSONQueryOperatorInput {
  eq: JSON
  ne: JSON
  in: [JSON]
  nin: [JSON]
  regex: JSON
  glob: JSON
}

input ImageSharpOriginalFilterInput {
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
}

input ImageSharpResizeFilterInput {
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
}

type FileConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldsEnum!): [String!]!
  max(field: FileFieldsEnum!): Float
  min(field: FileFieldsEnum!): Float
  sum(field: FileFieldsEnum!): Float
  group(skip: Int, limit: Int, field: FileFieldsEnum!): [FileGroupConnection!]!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

type PageInfo {
  currentPage: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

enum FileFieldsEnum {
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  ino
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  birthtime
  birthtimeMs
  blksize
  blocks
  url
  childrenImageSharp
  childrenImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___original___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___original___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___original___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___original___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___original___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___original___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type FileGroupConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldsEnum!): [String!]!
  max(field: FileFieldsEnum!): Float
  min(field: FileFieldsEnum!): Float
  sum(field: FileFieldsEnum!): Float
  group(skip: Int, limit: Int, field: FileFieldsEnum!): [FileGroupConnection!]!
  field: String!
  fieldValue: String
}

input FileFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  url: StringQueryOperatorInput
  childrenImageSharp: ImageSharpFilterListInput
  childImageSharp: ImageSharpFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input FileSortInput {
  fields: [FileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum SortOrderEnum {
  ASC
  DESC
}

type DirectoryConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldsEnum!): [String!]!
  max(field: DirectoryFieldsEnum!): Float
  min(field: DirectoryFieldsEnum!): Float
  sum(field: DirectoryFieldsEnum!): Float
  group(skip: Int, limit: Int, field: DirectoryFieldsEnum!): [DirectoryGroupConnection!]!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

enum DirectoryFieldsEnum {
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  ino
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  birthtime
  birthtimeMs
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type DirectoryGroupConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldsEnum!): [String!]!
  max(field: DirectoryFieldsEnum!): Float
  min(field: DirectoryFieldsEnum!): Float
  sum(field: DirectoryFieldsEnum!): Float
  group(skip: Int, limit: Int, field: DirectoryFieldsEnum!): [DirectoryGroupConnection!]!
  field: String!
  fieldValue: String
}

input DirectoryFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input DirectorySortInput {
  fields: [DirectoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldsEnum!): [String!]!
  max(field: SiteFieldsEnum!): Float
  min(field: SiteFieldsEnum!): Float
  sum(field: SiteFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteFieldsEnum!): [SiteGroupConnection!]!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

enum SiteFieldsEnum {
  buildTime
  siteMetadata___siteUrl
  siteMetadata___siteName
  port
  host
  polyfill
  pathPrefix
  jsxRuntime
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SiteGroupConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldsEnum!): [String!]!
  max(field: SiteFieldsEnum!): Float
  min(field: SiteFieldsEnum!): Float
  sum(field: SiteFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteFieldsEnum!): [SiteGroupConnection!]!
  field: String!
  fieldValue: String
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  siteMetadata: SiteMetadataFilterInput
  port: IntQueryOperatorInput
  host: StringQueryOperatorInput
  polyfill: BooleanQueryOperatorInput
  pathPrefix: StringQueryOperatorInput
  jsxRuntime: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteSortInput {
  fields: [SiteFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteFunctionConnection {
  totalCount: Int!
  edges: [SiteFunctionEdge!]!
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  distinct(field: SiteFunctionFieldsEnum!): [String!]!
  max(field: SiteFunctionFieldsEnum!): Float
  min(field: SiteFunctionFieldsEnum!): Float
  sum(field: SiteFunctionFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteFunctionFieldsEnum!): [SiteFunctionGroupConnection!]!
}

type SiteFunctionEdge {
  next: SiteFunction
  node: SiteFunction!
  previous: SiteFunction
}

enum SiteFunctionFieldsEnum {
  functionRoute
  pluginName
  originalAbsoluteFilePath
  originalRelativeFilePath
  relativeCompiledFilePath
  absoluteCompiledFilePath
  matchPath
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SiteFunctionGroupConnection {
  totalCount: Int!
  edges: [SiteFunctionEdge!]!
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  distinct(field: SiteFunctionFieldsEnum!): [String!]!
  max(field: SiteFunctionFieldsEnum!): Float
  min(field: SiteFunctionFieldsEnum!): Float
  sum(field: SiteFunctionFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteFunctionFieldsEnum!): [SiteFunctionGroupConnection!]!
  field: String!
  fieldValue: String
}

input SiteFunctionFilterInput {
  functionRoute: StringQueryOperatorInput
  pluginName: StringQueryOperatorInput
  originalAbsoluteFilePath: StringQueryOperatorInput
  originalRelativeFilePath: StringQueryOperatorInput
  relativeCompiledFilePath: StringQueryOperatorInput
  absoluteCompiledFilePath: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteFunctionSortInput {
  fields: [SiteFunctionFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input SitePluginFilterInput {
  resolve: StringQueryOperatorInput
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
  nodeAPIs: StringQueryOperatorInput
  browserAPIs: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  pluginFilepath: StringQueryOperatorInput
  pluginOptions: JSONQueryOperatorInput
  packageJson: JSONQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

type SitePageConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldsEnum!): [String!]!
  max(field: SitePageFieldsEnum!): Float
  min(field: SitePageFieldsEnum!): Float
  sum(field: SitePageFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SitePageFieldsEnum!): [SitePageGroupConnection!]!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

enum SitePageFieldsEnum {
  path
  component
  internalComponentName
  componentChunkName
  matchPath
  pageContext
  pluginCreator___resolve
  pluginCreator___name
  pluginCreator___version
  pluginCreator___nodeAPIs
  pluginCreator___browserAPIs
  pluginCreator___ssrAPIs
  pluginCreator___pluginFilepath
  pluginCreator___pluginOptions
  pluginCreator___packageJson
  pluginCreator___id
  pluginCreator___parent___id
  pluginCreator___parent___parent___id
  pluginCreator___parent___parent___children
  pluginCreator___parent___children
  pluginCreator___parent___children___id
  pluginCreator___parent___children___children
  pluginCreator___parent___internal___content
  pluginCreator___parent___internal___contentDigest
  pluginCreator___parent___internal___description
  pluginCreator___parent___internal___fieldOwners
  pluginCreator___parent___internal___ignoreType
  pluginCreator___parent___internal___mediaType
  pluginCreator___parent___internal___owner
  pluginCreator___parent___internal___type
  pluginCreator___children
  pluginCreator___children___id
  pluginCreator___children___parent___id
  pluginCreator___children___parent___children
  pluginCreator___children___children
  pluginCreator___children___children___id
  pluginCreator___children___children___children
  pluginCreator___children___internal___content
  pluginCreator___children___internal___contentDigest
  pluginCreator___children___internal___description
  pluginCreator___children___internal___fieldOwners
  pluginCreator___children___internal___ignoreType
  pluginCreator___children___internal___mediaType
  pluginCreator___children___internal___owner
  pluginCreator___children___internal___type
  pluginCreator___internal___content
  pluginCreator___internal___contentDigest
  pluginCreator___internal___description
  pluginCreator___internal___fieldOwners
  pluginCreator___internal___ignoreType
  pluginCreator___internal___mediaType
  pluginCreator___internal___owner
  pluginCreator___internal___type
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SitePageGroupConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldsEnum!): [String!]!
  max(field: SitePageFieldsEnum!): Float
  min(field: SitePageFieldsEnum!): Float
  sum(field: SitePageFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SitePageFieldsEnum!): [SitePageGroupConnection!]!
  field: String!
  fieldValue: String
}

input SitePageFilterInput {
  path: StringQueryOperatorInput
  component: StringQueryOperatorInput
  internalComponentName: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  pageContext: JSONQueryOperatorInput
  pluginCreator: SitePluginFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SitePageSortInput {
  fields: [SitePageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SitePluginConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldsEnum!): [String!]!
  max(field: SitePluginFieldsEnum!): Float
  min(field: SitePluginFieldsEnum!): Float
  sum(field: SitePluginFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SitePluginFieldsEnum!): [SitePluginGroupConnection!]!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

enum SitePluginFieldsEnum {
  resolve
  name
  version
  nodeAPIs
  browserAPIs
  ssrAPIs
  pluginFilepath
  pluginOptions
  packageJson
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SitePluginGroupConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldsEnum!): [String!]!
  max(field: SitePluginFieldsEnum!): Float
  min(field: SitePluginFieldsEnum!): Float
  sum(field: SitePluginFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SitePluginFieldsEnum!): [SitePluginGroupConnection!]!
  field: String!
  fieldValue: String
}

input SitePluginSortInput {
  fields: [SitePluginFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteBuildMetadataConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
  max(field: SiteBuildMetadataFieldsEnum!): Float
  min(field: SiteBuildMetadataFieldsEnum!): Float
  sum(field: SiteBuildMetadataFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteBuildMetadataFieldsEnum!): [SiteBuildMetadataGroupConnection!]!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

enum SiteBuildMetadataFieldsEnum {
  buildTime
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SiteBuildMetadataGroupConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
  max(field: SiteBuildMetadataFieldsEnum!): Float
  min(field: SiteBuildMetadataFieldsEnum!): Float
  sum(field: SiteBuildMetadataFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteBuildMetadataFieldsEnum!): [SiteBuildMetadataGroupConnection!]!
  field: String!
  fieldValue: String
}

input SiteBuildMetadataFilterInput {
  buildTime: DateQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteBuildMetadataSortInput {
  fields: [SiteBuildMetadataFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ImageSharpConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  max(field: ImageSharpFieldsEnum!): Float
  min(field: ImageSharpFieldsEnum!): Float
  sum(field: ImageSharpFieldsEnum!): Float
  group(skip: Int, limit: Int, field: ImageSharpFieldsEnum!): [ImageSharpGroupConnection!]!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

enum ImageSharpFieldsEnum {
  fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  original___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  original___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  original___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
}

type ImageSharpGroupConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  max(field: ImageSharpFieldsEnum!): Float
  min(field: ImageSharpFieldsEnum!): Float
  sum(field: ImageSharpFieldsEnum!): Float
  group(skip: Int, limit: Int, field: ImageSharpFieldsEnum!): [ImageSharpGroupConnection!]!
  field: String!
  fieldValue: String
}

input ImageSharpSortInput {
  fields: [ImageSharpFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type LocalSearchJobPostsConnection {
  totalCount: Int!
  edges: [LocalSearchJobPostsEdge!]!
  nodes: [LocalSearchJobPosts!]!
  pageInfo: PageInfo!
  distinct(field: LocalSearchJobPostsFieldsEnum!): [String!]!
  max(field: LocalSearchJobPostsFieldsEnum!): Float
  min(field: LocalSearchJobPostsFieldsEnum!): Float
  sum(field: LocalSearchJobPostsFieldsEnum!): Float
  group(skip: Int, limit: Int, field: LocalSearchJobPostsFieldsEnum!): [LocalSearchJobPostsGroupConnection!]!
}

type LocalSearchJobPostsEdge {
  next: LocalSearchJobPosts
  node: LocalSearchJobPosts!
  previous: LocalSearchJobPosts
}

enum LocalSearchJobPostsFieldsEnum {
  name
  engine
  index
  store
  publicIndexURL
  publicStoreURL
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type LocalSearchJobPostsGroupConnection {
  totalCount: Int!
  edges: [LocalSearchJobPostsEdge!]!
  nodes: [LocalSearchJobPosts!]!
  pageInfo: PageInfo!
  distinct(field: LocalSearchJobPostsFieldsEnum!): [String!]!
  max(field: LocalSearchJobPostsFieldsEnum!): Float
  min(field: LocalSearchJobPostsFieldsEnum!): Float
  sum(field: LocalSearchJobPostsFieldsEnum!): Float
  group(skip: Int, limit: Int, field: LocalSearchJobPostsFieldsEnum!): [LocalSearchJobPostsGroupConnection!]!
  field: String!
  fieldValue: String
}

input LocalSearchJobPostsFilterInput {
  name: StringQueryOperatorInput
  engine: StringQueryOperatorInput
  index: StringQueryOperatorInput
  store: JSONQueryOperatorInput
  publicIndexURL: StringQueryOperatorInput
  publicStoreURL: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input LocalSearchJobPostsSortInput {
  fields: [LocalSearchJobPostsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicEmbedTypeConnection {
  totalCount: Int!
  edges: [PrismicEmbedTypeEdge!]!
  nodes: [PrismicEmbedType!]!
  pageInfo: PageInfo!
  distinct(field: PrismicEmbedTypeFieldsEnum!): [String!]!
  max(field: PrismicEmbedTypeFieldsEnum!): Float
  min(field: PrismicEmbedTypeFieldsEnum!): Float
  sum(field: PrismicEmbedTypeFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicEmbedTypeFieldsEnum!): [PrismicEmbedTypeGroupConnection!]!
}

type PrismicEmbedTypeEdge {
  next: PrismicEmbedType
  node: PrismicEmbedType!
  previous: PrismicEmbedType
}

enum PrismicEmbedTypeFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicEmbedTypeGroupConnection {
  totalCount: Int!
  edges: [PrismicEmbedTypeEdge!]!
  nodes: [PrismicEmbedType!]!
  pageInfo: PageInfo!
  distinct(field: PrismicEmbedTypeFieldsEnum!): [String!]!
  max(field: PrismicEmbedTypeFieldsEnum!): Float
  min(field: PrismicEmbedTypeFieldsEnum!): Float
  sum(field: PrismicEmbedTypeFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicEmbedTypeFieldsEnum!): [PrismicEmbedTypeGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicEmbedTypeFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicEmbedTypeSortInput {
  fields: [PrismicEmbedTypeFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicTypePathTypeConnection {
  totalCount: Int!
  edges: [PrismicTypePathTypeEdge!]!
  nodes: [PrismicTypePathType!]!
  pageInfo: PageInfo!
  distinct(field: PrismicTypePathTypeFieldsEnum!): [String!]!
  max(field: PrismicTypePathTypeFieldsEnum!): Float
  min(field: PrismicTypePathTypeFieldsEnum!): Float
  sum(field: PrismicTypePathTypeFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicTypePathTypeFieldsEnum!): [PrismicTypePathTypeGroupConnection!]!
}

type PrismicTypePathTypeEdge {
  next: PrismicTypePathType
  node: PrismicTypePathType!
  previous: PrismicTypePathType
}

enum PrismicTypePathTypeFieldsEnum {
  kind
  path
  type
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicTypePathTypeGroupConnection {
  totalCount: Int!
  edges: [PrismicTypePathTypeEdge!]!
  nodes: [PrismicTypePathType!]!
  pageInfo: PageInfo!
  distinct(field: PrismicTypePathTypeFieldsEnum!): [String!]!
  max(field: PrismicTypePathTypeFieldsEnum!): Float
  min(field: PrismicTypePathTypeFieldsEnum!): Float
  sum(field: PrismicTypePathTypeFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicTypePathTypeFieldsEnum!): [PrismicTypePathTypeGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicTypePathTypeFilterInput {
  kind: StringQueryOperatorInput
  path: StringQueryOperatorInput
  type: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicTypePathTypeSortInput {
  fields: [PrismicTypePathTypeFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input IDQueryOperatorInput {
  eq: ID
  ne: ID
  in: [ID]
  nin: [ID]
}

input PrismicAlternateLanguageTypeFilterListInput {
  elemMatch: PrismicAlternateLanguageTypeFilterInput
}

input PrismicAlternateLanguageTypeFilterInput {
  id: IDQueryOperatorInput
  uid: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  type: StringQueryOperatorInput
  raw: JSONQueryOperatorInput
}

type PrismicMbtiTestResultConnection {
  totalCount: Int!
  edges: [PrismicMbtiTestResultEdge!]!
  nodes: [PrismicMbtiTestResult!]!
  pageInfo: PageInfo!
  distinct(field: PrismicMbtiTestResultFieldsEnum!): [String!]!
  max(field: PrismicMbtiTestResultFieldsEnum!): Float
  min(field: PrismicMbtiTestResultFieldsEnum!): Float
  sum(field: PrismicMbtiTestResultFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicMbtiTestResultFieldsEnum!): [PrismicMbtiTestResultGroupConnection!]!
}

type PrismicMbtiTestResultEdge {
  next: PrismicMbtiTestResult
  node: PrismicMbtiTestResult!
  previous: PrismicMbtiTestResult
}

enum PrismicMbtiTestResultFieldsEnum {
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicMbtiTestResultGroupConnection {
  totalCount: Int!
  edges: [PrismicMbtiTestResultEdge!]!
  nodes: [PrismicMbtiTestResult!]!
  pageInfo: PageInfo!
  distinct(field: PrismicMbtiTestResultFieldsEnum!): [String!]!
  max(field: PrismicMbtiTestResultFieldsEnum!): Float
  min(field: PrismicMbtiTestResultFieldsEnum!): Float
  sum(field: PrismicMbtiTestResultFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicMbtiTestResultFieldsEnum!): [PrismicMbtiTestResultGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicMbtiTestResultFilterInput {
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicMbtiTestResultSortInput {
  fields: [PrismicMbtiTestResultFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicMbtiIntroConnection {
  totalCount: Int!
  edges: [PrismicMbtiIntroEdge!]!
  nodes: [PrismicMbtiIntro!]!
  pageInfo: PageInfo!
  distinct(field: PrismicMbtiIntroFieldsEnum!): [String!]!
  max(field: PrismicMbtiIntroFieldsEnum!): Float
  min(field: PrismicMbtiIntroFieldsEnum!): Float
  sum(field: PrismicMbtiIntroFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicMbtiIntroFieldsEnum!): [PrismicMbtiIntroGroupConnection!]!
}

type PrismicMbtiIntroEdge {
  next: PrismicMbtiIntro
  node: PrismicMbtiIntro!
  previous: PrismicMbtiIntro
}

enum PrismicMbtiIntroFieldsEnum {
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicMbtiIntroGroupConnection {
  totalCount: Int!
  edges: [PrismicMbtiIntroEdge!]!
  nodes: [PrismicMbtiIntro!]!
  pageInfo: PageInfo!
  distinct(field: PrismicMbtiIntroFieldsEnum!): [String!]!
  max(field: PrismicMbtiIntroFieldsEnum!): Float
  min(field: PrismicMbtiIntroFieldsEnum!): Float
  sum(field: PrismicMbtiIntroFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicMbtiIntroFieldsEnum!): [PrismicMbtiIntroGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicMbtiIntroFilterInput {
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicMbtiIntroSortInput {
  fields: [PrismicMbtiIntroFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicMbtiTestQuestionConnection {
  totalCount: Int!
  edges: [PrismicMbtiTestQuestionEdge!]!
  nodes: [PrismicMbtiTestQuestion!]!
  pageInfo: PageInfo!
  distinct(field: PrismicMbtiTestQuestionFieldsEnum!): [String!]!
  max(field: PrismicMbtiTestQuestionFieldsEnum!): Float
  min(field: PrismicMbtiTestQuestionFieldsEnum!): Float
  sum(field: PrismicMbtiTestQuestionFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicMbtiTestQuestionFieldsEnum!): [PrismicMbtiTestQuestionGroupConnection!]!
}

type PrismicMbtiTestQuestionEdge {
  next: PrismicMbtiTestQuestion
  node: PrismicMbtiTestQuestion!
  previous: PrismicMbtiTestQuestion
}

enum PrismicMbtiTestQuestionFieldsEnum {
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicMbtiTestQuestionGroupConnection {
  totalCount: Int!
  edges: [PrismicMbtiTestQuestionEdge!]!
  nodes: [PrismicMbtiTestQuestion!]!
  pageInfo: PageInfo!
  distinct(field: PrismicMbtiTestQuestionFieldsEnum!): [String!]!
  max(field: PrismicMbtiTestQuestionFieldsEnum!): Float
  min(field: PrismicMbtiTestQuestionFieldsEnum!): Float
  sum(field: PrismicMbtiTestQuestionFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicMbtiTestQuestionFieldsEnum!): [PrismicMbtiTestQuestionGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicMbtiTestQuestionFilterInput {
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicMbtiTestQuestionSortInput {
  fields: [PrismicMbtiTestQuestionFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicAdsIntroConnection {
  totalCount: Int!
  edges: [PrismicAdsIntroEdge!]!
  nodes: [PrismicAdsIntro!]!
  pageInfo: PageInfo!
  distinct(field: PrismicAdsIntroFieldsEnum!): [String!]!
  max(field: PrismicAdsIntroFieldsEnum!): Float
  min(field: PrismicAdsIntroFieldsEnum!): Float
  sum(field: PrismicAdsIntroFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicAdsIntroFieldsEnum!): [PrismicAdsIntroGroupConnection!]!
}

type PrismicAdsIntroEdge {
  next: PrismicAdsIntro
  node: PrismicAdsIntro!
  previous: PrismicAdsIntro
}

enum PrismicAdsIntroFieldsEnum {
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicAdsIntroGroupConnection {
  totalCount: Int!
  edges: [PrismicAdsIntroEdge!]!
  nodes: [PrismicAdsIntro!]!
  pageInfo: PageInfo!
  distinct(field: PrismicAdsIntroFieldsEnum!): [String!]!
  max(field: PrismicAdsIntroFieldsEnum!): Float
  min(field: PrismicAdsIntroFieldsEnum!): Float
  sum(field: PrismicAdsIntroFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicAdsIntroFieldsEnum!): [PrismicAdsIntroGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicAdsIntroFilterInput {
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicAdsIntroSortInput {
  fields: [PrismicAdsIntroFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicTeamPageConnection {
  totalCount: Int!
  edges: [PrismicTeamPageEdge!]!
  nodes: [PrismicTeamPage!]!
  pageInfo: PageInfo!
  distinct(field: PrismicTeamPageFieldsEnum!): [String!]!
  max(field: PrismicTeamPageFieldsEnum!): Float
  min(field: PrismicTeamPageFieldsEnum!): Float
  sum(field: PrismicTeamPageFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicTeamPageFieldsEnum!): [PrismicTeamPageGroupConnection!]!
}

type PrismicTeamPageEdge {
  next: PrismicTeamPage
  node: PrismicTeamPage!
  previous: PrismicTeamPage
}

enum PrismicTeamPageFieldsEnum {
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicTeamPageGroupConnection {
  totalCount: Int!
  edges: [PrismicTeamPageEdge!]!
  nodes: [PrismicTeamPage!]!
  pageInfo: PageInfo!
  distinct(field: PrismicTeamPageFieldsEnum!): [String!]!
  max(field: PrismicTeamPageFieldsEnum!): Float
  min(field: PrismicTeamPageFieldsEnum!): Float
  sum(field: PrismicTeamPageFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicTeamPageFieldsEnum!): [PrismicTeamPageGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicTeamPageFilterInput {
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicTeamPageSortInput {
  fields: [PrismicTeamPageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicTermsAndConditionsDataTypeFilterInput {
  content: PrismicStructuredTextTypeFilterInput
  description: StringQueryOperatorInput
  revision_date: DateQueryOperatorInput
}

input PrismicStructuredTextTypeFilterInput {
  text: StringQueryOperatorInput
  html: StringQueryOperatorInput
  richText: PrismicStructuredTextQueryOperatorInput
  raw: PrismicStructuredTextQueryOperatorInput
}

input PrismicStructuredTextQueryOperatorInput {
  eq: PrismicStructuredText
  ne: PrismicStructuredText
  in: [PrismicStructuredText]
  nin: [PrismicStructuredText]
}

type PrismicTermsAndConditionsConnection {
  totalCount: Int!
  edges: [PrismicTermsAndConditionsEdge!]!
  nodes: [PrismicTermsAndConditions!]!
  pageInfo: PageInfo!
  distinct(field: PrismicTermsAndConditionsFieldsEnum!): [String!]!
  max(field: PrismicTermsAndConditionsFieldsEnum!): Float
  min(field: PrismicTermsAndConditionsFieldsEnum!): Float
  sum(field: PrismicTermsAndConditionsFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicTermsAndConditionsFieldsEnum!): [PrismicTermsAndConditionsGroupConnection!]!
}

type PrismicTermsAndConditionsEdge {
  next: PrismicTermsAndConditions
  node: PrismicTermsAndConditions!
  previous: PrismicTermsAndConditions
}

enum PrismicTermsAndConditionsFieldsEnum {
  uid
  data___content___text
  data___content___html
  data___content___richText
  data___content___raw
  data___description
  data___revision_date
  dataRaw
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicTermsAndConditionsGroupConnection {
  totalCount: Int!
  edges: [PrismicTermsAndConditionsEdge!]!
  nodes: [PrismicTermsAndConditions!]!
  pageInfo: PageInfo!
  distinct(field: PrismicTermsAndConditionsFieldsEnum!): [String!]!
  max(field: PrismicTermsAndConditionsFieldsEnum!): Float
  min(field: PrismicTermsAndConditionsFieldsEnum!): Float
  sum(field: PrismicTermsAndConditionsFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicTermsAndConditionsFieldsEnum!): [PrismicTermsAndConditionsGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicTermsAndConditionsFilterInput {
  uid: StringQueryOperatorInput
  data: PrismicTermsAndConditionsDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicTermsAndConditionsSortInput {
  fields: [PrismicTermsAndConditionsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicFaqDataTypeFilterInput {
  entries: PrismicFaqDataEntriesFilterListInput
}

input PrismicFaqDataEntriesFilterListInput {
  elemMatch: PrismicFaqDataEntriesFilterInput
}

input PrismicFaqDataEntriesFilterInput {
  answer: PrismicStructuredTextTypeFilterInput
  question: StringQueryOperatorInput
}

type PrismicFaqConnection {
  totalCount: Int!
  edges: [PrismicFaqEdge!]!
  nodes: [PrismicFaq!]!
  pageInfo: PageInfo!
  distinct(field: PrismicFaqFieldsEnum!): [String!]!
  max(field: PrismicFaqFieldsEnum!): Float
  min(field: PrismicFaqFieldsEnum!): Float
  sum(field: PrismicFaqFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicFaqFieldsEnum!): [PrismicFaqGroupConnection!]!
}

type PrismicFaqEdge {
  next: PrismicFaq
  node: PrismicFaq!
  previous: PrismicFaq
}

enum PrismicFaqFieldsEnum {
  uid
  data___entries
  data___entries___answer___text
  data___entries___answer___html
  data___entries___answer___richText
  data___entries___answer___raw
  data___entries___question
  dataRaw
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicFaqGroupConnection {
  totalCount: Int!
  edges: [PrismicFaqEdge!]!
  nodes: [PrismicFaq!]!
  pageInfo: PageInfo!
  distinct(field: PrismicFaqFieldsEnum!): [String!]!
  max(field: PrismicFaqFieldsEnum!): Float
  min(field: PrismicFaqFieldsEnum!): Float
  sum(field: PrismicFaqFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicFaqFieldsEnum!): [PrismicFaqGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicFaqFilterInput {
  uid: StringQueryOperatorInput
  data: PrismicFaqDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicFaqSortInput {
  fields: [PrismicFaqFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicMemberProfileDataTypeFilterInput {
  email: StringQueryOperatorInput
  image: PrismicMemberProfileDataImageImageTypeFilterInput
  name: StringQueryOperatorInput
  nickname: StringQueryOperatorInput
  role: StringQueryOperatorInput
}

input PrismicMemberProfileDataImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  url: StringQueryOperatorInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  thumbnails: PrismicMemberProfileDataImageImageThumbnailsTypeFilterInput
}

input PrismicImageDimensionsTypeFilterInput {
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
}

input ImgixFixedFilterInput {
  base64: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
}

input ImgixFluidFilterInput {
  base64: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
}

input PrismicMemberProfileDataImageImageThumbnailsTypeFilterInput {
  small_banner: PrismicImageThumbnailTypeFilterInput
  wide_banner: PrismicImageThumbnailTypeFilterInput
}

input PrismicImageThumbnailTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  url: StringQueryOperatorInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
}

type PrismicMemberProfileConnection {
  totalCount: Int!
  edges: [PrismicMemberProfileEdge!]!
  nodes: [PrismicMemberProfile!]!
  pageInfo: PageInfo!
  distinct(field: PrismicMemberProfileFieldsEnum!): [String!]!
  max(field: PrismicMemberProfileFieldsEnum!): Float
  min(field: PrismicMemberProfileFieldsEnum!): Float
  sum(field: PrismicMemberProfileFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicMemberProfileFieldsEnum!): [PrismicMemberProfileGroupConnection!]!
}

type PrismicMemberProfileEdge {
  next: PrismicMemberProfile
  node: PrismicMemberProfile!
  previous: PrismicMemberProfile
}

enum PrismicMemberProfileFieldsEnum {
  data___email
  data___image___alt
  data___image___copyright
  data___image___dimensions___width
  data___image___dimensions___height
  data___image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___sourceInstanceName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___absolutePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___relativePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___extension @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___size @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___prettySize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___modifiedTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___accessTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___changeTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___birthTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___root @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___dir @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___base @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___ext @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___name @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___relativeDirectory @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___dev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___mode @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___nlink @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___uid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___gid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___rdev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___ino @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___atimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___mtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___ctimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___atime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___mtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___ctime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___birthtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___birthtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___blksize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___blocks @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___childrenImageSharp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___name
  data___nickname
  data___role
  dataRaw
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicMemberProfileGroupConnection {
  totalCount: Int!
  edges: [PrismicMemberProfileEdge!]!
  nodes: [PrismicMemberProfile!]!
  pageInfo: PageInfo!
  distinct(field: PrismicMemberProfileFieldsEnum!): [String!]!
  max(field: PrismicMemberProfileFieldsEnum!): Float
  min(field: PrismicMemberProfileFieldsEnum!): Float
  sum(field: PrismicMemberProfileFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicMemberProfileFieldsEnum!): [PrismicMemberProfileGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicMemberProfileFilterInput {
  data: PrismicMemberProfileDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicMemberProfileSortInput {
  fields: [PrismicMemberProfileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicTeamBannerDataTypeFilterInput {
  left: PrismicTeamBannerDataLeftImageTypeFilterInput
  right: PrismicTeamBannerDataRightImageTypeFilterInput
}

input PrismicTeamBannerDataLeftImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  url: StringQueryOperatorInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
}

input PrismicTeamBannerDataRightImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  url: StringQueryOperatorInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
}

type PrismicTeamBannerConnection {
  totalCount: Int!
  edges: [PrismicTeamBannerEdge!]!
  nodes: [PrismicTeamBanner!]!
  pageInfo: PageInfo!
  distinct(field: PrismicTeamBannerFieldsEnum!): [String!]!
  max(field: PrismicTeamBannerFieldsEnum!): Float
  min(field: PrismicTeamBannerFieldsEnum!): Float
  sum(field: PrismicTeamBannerFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicTeamBannerFieldsEnum!): [PrismicTeamBannerGroupConnection!]!
}

type PrismicTeamBannerEdge {
  next: PrismicTeamBanner
  node: PrismicTeamBanner!
  previous: PrismicTeamBanner
}

enum PrismicTeamBannerFieldsEnum {
  data___left___alt
  data___left___copyright
  data___left___dimensions___width
  data___left___dimensions___height
  data___left___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___sourceInstanceName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___absolutePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___relativePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___extension @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___size @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___prettySize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___modifiedTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___accessTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___changeTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___birthTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___root @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___dir @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___base @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___ext @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___name @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___relativeDirectory @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___dev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___mode @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___nlink @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___uid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___gid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___rdev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___ino @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___atimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___mtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___ctimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___atime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___mtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___ctime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___birthtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___birthtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___blksize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___blocks @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___childrenImageSharp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___left___localFile___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___alt
  data___right___copyright
  data___right___dimensions___width
  data___right___dimensions___height
  data___right___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___sourceInstanceName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___absolutePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___relativePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___extension @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___size @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___prettySize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___modifiedTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___accessTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___changeTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___birthTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___root @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___dir @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___base @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___ext @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___name @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___relativeDirectory @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___dev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___mode @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___nlink @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___uid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___gid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___rdev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___ino @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___atimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___mtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___ctimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___atime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___mtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___ctime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___birthtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___birthtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___blksize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___blocks @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___childrenImageSharp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___right___localFile___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  dataRaw
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicTeamBannerGroupConnection {
  totalCount: Int!
  edges: [PrismicTeamBannerEdge!]!
  nodes: [PrismicTeamBanner!]!
  pageInfo: PageInfo!
  distinct(field: PrismicTeamBannerFieldsEnum!): [String!]!
  max(field: PrismicTeamBannerFieldsEnum!): Float
  min(field: PrismicTeamBannerFieldsEnum!): Float
  sum(field: PrismicTeamBannerFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicTeamBannerFieldsEnum!): [PrismicTeamBannerGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicTeamBannerFilterInput {
  data: PrismicTeamBannerDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicTeamBannerSortInput {
  fields: [PrismicTeamBannerFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicAdvertisementContentsConnection {
  totalCount: Int!
  edges: [PrismicAdvertisementContentsEdge!]!
  nodes: [PrismicAdvertisementContents!]!
  pageInfo: PageInfo!
  distinct(field: PrismicAdvertisementContentsFieldsEnum!): [String!]!
  max(field: PrismicAdvertisementContentsFieldsEnum!): Float
  min(field: PrismicAdvertisementContentsFieldsEnum!): Float
  sum(field: PrismicAdvertisementContentsFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicAdvertisementContentsFieldsEnum!): [PrismicAdvertisementContentsGroupConnection!]!
}

type PrismicAdvertisementContentsEdge {
  next: PrismicAdvertisementContents
  node: PrismicAdvertisementContents!
  previous: PrismicAdvertisementContents
}

enum PrismicAdvertisementContentsFieldsEnum {
  dataRaw
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicAdvertisementContentsGroupConnection {
  totalCount: Int!
  edges: [PrismicAdvertisementContentsEdge!]!
  nodes: [PrismicAdvertisementContents!]!
  pageInfo: PageInfo!
  distinct(field: PrismicAdvertisementContentsFieldsEnum!): [String!]!
  max(field: PrismicAdvertisementContentsFieldsEnum!): Float
  min(field: PrismicAdvertisementContentsFieldsEnum!): Float
  sum(field: PrismicAdvertisementContentsFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicAdvertisementContentsFieldsEnum!): [PrismicAdvertisementContentsGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicAdvertisementContentsFilterInput {
  dataRaw: JSONQueryOperatorInput
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicAdvertisementContentsSortInput {
  fields: [PrismicAdvertisementContentsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicSiteNavigationDataTypeFilterInput {
  address: PrismicStructuredTextTypeFilterInput
  copyright: PrismicStructuredTextTypeFilterInput
  email: PrismicStructuredTextTypeFilterInput
  footer_entries: PrismicSiteNavigationDataFooterEntriesFilterListInput
  header_entries: PrismicSiteNavigationDataHeaderEntriesFilterListInput
  sns_profiles: PrismicSiteNavigationDataSnsProfilesFilterListInput
  tel: PrismicStructuredTextTypeFilterInput
}

input PrismicSiteNavigationDataFooterEntriesFilterListInput {
  elemMatch: PrismicSiteNavigationDataFooterEntriesFilterInput
}

input PrismicSiteNavigationDataFooterEntriesFilterInput {
  display_text: StringQueryOperatorInput
  group: StringQueryOperatorInput
  link: PrismicLinkTypeFilterInput
}

input PrismicLinkTypeFilterInput {
  link_type: PrismicLinkTypeEnumQueryOperatorInput
  isBroken: BooleanQueryOperatorInput
  url: StringQueryOperatorInput
  target: StringQueryOperatorInput
  size: IntQueryOperatorInput
  id: IDQueryOperatorInput
  type: StringQueryOperatorInput
  tags: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  slug: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  localFile: FileFilterInput
  raw: JSONQueryOperatorInput
}

input PrismicLinkTypeEnumQueryOperatorInput {
  eq: PrismicLinkTypeEnum
  ne: PrismicLinkTypeEnum
  in: [PrismicLinkTypeEnum]
  nin: [PrismicLinkTypeEnum]
}

input PrismicSiteNavigationDataHeaderEntriesFilterListInput {
  elemMatch: PrismicSiteNavigationDataHeaderEntriesFilterInput
}

input PrismicSiteNavigationDataHeaderEntriesFilterInput {
  display_text: StringQueryOperatorInput
  group: StringQueryOperatorInput
  link: PrismicLinkTypeFilterInput
}

input PrismicSiteNavigationDataSnsProfilesFilterListInput {
  elemMatch: PrismicSiteNavigationDataSnsProfilesFilterInput
}

input PrismicSiteNavigationDataSnsProfilesFilterInput {
  link: PrismicLinkTypeFilterInput
  service: StringQueryOperatorInput
}

type PrismicSiteNavigationConnection {
  totalCount: Int!
  edges: [PrismicSiteNavigationEdge!]!
  nodes: [PrismicSiteNavigation!]!
  pageInfo: PageInfo!
  distinct(field: PrismicSiteNavigationFieldsEnum!): [String!]!
  max(field: PrismicSiteNavigationFieldsEnum!): Float
  min(field: PrismicSiteNavigationFieldsEnum!): Float
  sum(field: PrismicSiteNavigationFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicSiteNavigationFieldsEnum!): [PrismicSiteNavigationGroupConnection!]!
}

type PrismicSiteNavigationEdge {
  next: PrismicSiteNavigation
  node: PrismicSiteNavigation!
  previous: PrismicSiteNavigation
}

enum PrismicSiteNavigationFieldsEnum {
  uid
  data___address___text
  data___address___html
  data___address___richText
  data___address___raw
  data___copyright___text
  data___copyright___html
  data___copyright___richText
  data___copyright___raw
  data___email___text
  data___email___html
  data___email___richText
  data___email___raw
  data___footer_entries
  data___footer_entries___display_text
  data___footer_entries___group
  data___footer_entries___link___link_type
  data___footer_entries___link___isBroken
  data___footer_entries___link___url
  data___footer_entries___link___target
  data___footer_entries___link___size
  data___footer_entries___link___id
  data___footer_entries___link___type
  data___footer_entries___link___tags
  data___footer_entries___link___lang
  data___footer_entries___link___slug
  data___footer_entries___link___uid
  data___footer_entries___link___raw
  data___header_entries
  data___header_entries___display_text
  data___header_entries___group
  data___header_entries___link___link_type
  data___header_entries___link___isBroken
  data___header_entries___link___url
  data___header_entries___link___target
  data___header_entries___link___size
  data___header_entries___link___id
  data___header_entries___link___type
  data___header_entries___link___tags
  data___header_entries___link___lang
  data___header_entries___link___slug
  data___header_entries___link___uid
  data___header_entries___link___raw
  data___sns_profiles
  data___sns_profiles___link___link_type
  data___sns_profiles___link___isBroken
  data___sns_profiles___link___url
  data___sns_profiles___link___target
  data___sns_profiles___link___size
  data___sns_profiles___link___id
  data___sns_profiles___link___type
  data___sns_profiles___link___tags
  data___sns_profiles___link___lang
  data___sns_profiles___link___slug
  data___sns_profiles___link___uid
  data___sns_profiles___link___raw
  data___sns_profiles___service
  data___tel___text
  data___tel___html
  data___tel___richText
  data___tel___raw
  dataRaw
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicSiteNavigationGroupConnection {
  totalCount: Int!
  edges: [PrismicSiteNavigationEdge!]!
  nodes: [PrismicSiteNavigation!]!
  pageInfo: PageInfo!
  distinct(field: PrismicSiteNavigationFieldsEnum!): [String!]!
  max(field: PrismicSiteNavigationFieldsEnum!): Float
  min(field: PrismicSiteNavigationFieldsEnum!): Float
  sum(field: PrismicSiteNavigationFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicSiteNavigationFieldsEnum!): [PrismicSiteNavigationGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicSiteNavigationFilterInput {
  uid: StringQueryOperatorInput
  data: PrismicSiteNavigationDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicSiteNavigationSortInput {
  fields: [PrismicSiteNavigationFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicTeamsArticleDataTypeFilterInput {
  page_meta_description: StringQueryOperatorInput
  page_meta_image: PrismicTeamsArticleDataPageMetaImageImageTypeFilterInput
  page_meta_title: StringQueryOperatorInput
  page_title: PrismicStructuredTextTypeFilterInput
}

input PrismicTeamsArticleDataPageMetaImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  url: StringQueryOperatorInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
}

type PrismicTeamsArticleConnection {
  totalCount: Int!
  edges: [PrismicTeamsArticleEdge!]!
  nodes: [PrismicTeamsArticle!]!
  pageInfo: PageInfo!
  distinct(field: PrismicTeamsArticleFieldsEnum!): [String!]!
  max(field: PrismicTeamsArticleFieldsEnum!): Float
  min(field: PrismicTeamsArticleFieldsEnum!): Float
  sum(field: PrismicTeamsArticleFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicTeamsArticleFieldsEnum!): [PrismicTeamsArticleGroupConnection!]!
}

type PrismicTeamsArticleEdge {
  next: PrismicTeamsArticle
  node: PrismicTeamsArticle!
  previous: PrismicTeamsArticle
}

enum PrismicTeamsArticleFieldsEnum {
  uid
  data___page_meta_description
  data___page_meta_image___alt
  data___page_meta_image___copyright
  data___page_meta_image___dimensions___width
  data___page_meta_image___dimensions___height
  data___page_meta_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___sourceInstanceName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___absolutePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___relativePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___extension @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___size @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___prettySize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___modifiedTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___accessTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___changeTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___birthTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___root @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___dir @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___base @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___ext @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___name @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___relativeDirectory @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___dev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___mode @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___nlink @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___uid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___gid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___rdev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___ino @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___atimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___mtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___ctimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___atime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___mtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___ctime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___birthtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___birthtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___blksize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___blocks @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___childrenImageSharp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_title
  data___page_title___text
  data___page_title___html
  data___page_title___richText
  data___page_title___raw
  dataRaw
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicTeamsArticleGroupConnection {
  totalCount: Int!
  edges: [PrismicTeamsArticleEdge!]!
  nodes: [PrismicTeamsArticle!]!
  pageInfo: PageInfo!
  distinct(field: PrismicTeamsArticleFieldsEnum!): [String!]!
  max(field: PrismicTeamsArticleFieldsEnum!): Float
  min(field: PrismicTeamsArticleFieldsEnum!): Float
  sum(field: PrismicTeamsArticleFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicTeamsArticleFieldsEnum!): [PrismicTeamsArticleGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicTeamsArticleFilterInput {
  uid: StringQueryOperatorInput
  data: PrismicTeamsArticleDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicTeamsArticleSortInput {
  fields: [PrismicTeamsArticleFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicPayContentsDataTypeFilterInput {
  logo_icon: PrismicPayContentsDataLogoIconImageTypeFilterInput
}

input PrismicPayContentsDataLogoIconImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  url: StringQueryOperatorInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
}

type PrismicPayContentsConnection {
  totalCount: Int!
  edges: [PrismicPayContentsEdge!]!
  nodes: [PrismicPayContents!]!
  pageInfo: PageInfo!
  distinct(field: PrismicPayContentsFieldsEnum!): [String!]!
  max(field: PrismicPayContentsFieldsEnum!): Float
  min(field: PrismicPayContentsFieldsEnum!): Float
  sum(field: PrismicPayContentsFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicPayContentsFieldsEnum!): [PrismicPayContentsGroupConnection!]!
}

type PrismicPayContentsEdge {
  next: PrismicPayContents
  node: PrismicPayContents!
  previous: PrismicPayContents
}

enum PrismicPayContentsFieldsEnum {
  data___logo_icon___alt
  data___logo_icon___copyright
  data___logo_icon___dimensions___width
  data___logo_icon___dimensions___height
  data___logo_icon___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___sourceInstanceName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___absolutePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___relativePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___extension @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___size @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___prettySize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___modifiedTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___accessTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___changeTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___birthTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___root @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___dir @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___base @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___ext @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___name @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___relativeDirectory @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___dev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___mode @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___nlink @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___uid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___gid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___rdev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___ino @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___atimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___mtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___ctimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___atime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___mtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___ctime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___birthtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___birthtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___blksize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___blocks @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___childrenImageSharp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  dataRaw
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicPayContentsGroupConnection {
  totalCount: Int!
  edges: [PrismicPayContentsEdge!]!
  nodes: [PrismicPayContents!]!
  pageInfo: PageInfo!
  distinct(field: PrismicPayContentsFieldsEnum!): [String!]!
  max(field: PrismicPayContentsFieldsEnum!): Float
  min(field: PrismicPayContentsFieldsEnum!): Float
  sum(field: PrismicPayContentsFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicPayContentsFieldsEnum!): [PrismicPayContentsGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicPayContentsFilterInput {
  data: PrismicPayContentsDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicPayContentsSortInput {
  fields: [PrismicPayContentsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicGlobalContentsDataTypeFilterInput {
  about_background_image: PrismicGlobalContentsDataAboutBackgroundImageImageTypeFilterInput
  about_opengraph_image: PrismicGlobalContentsDataAboutOpengraphImageImageTypeFilterInput
  about_opengraph_image_link: StringQueryOperatorInput
  about_page_description: StringQueryOperatorInput
  about_page_title: StringQueryOperatorInput
  about_title: PrismicStructuredTextTypeFilterInput
  app_store_link: StringQueryOperatorInput
  google_play_link: StringQueryOperatorInput
  main_opengraph_image: PrismicGlobalContentsDataMainOpengraphImageImageTypeFilterInput
  main_opengraph_image_link: StringQueryOperatorInput
  main_page_description: StringQueryOperatorInput
  main_page_title: StringQueryOperatorInput
  one_link: StringQueryOperatorInput
  one_link_button_text: StringQueryOperatorInput
}

input PrismicGlobalContentsDataAboutBackgroundImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  url: StringQueryOperatorInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
}

input PrismicGlobalContentsDataAboutOpengraphImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  url: StringQueryOperatorInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
}

input PrismicGlobalContentsDataMainOpengraphImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  url: StringQueryOperatorInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
}

type PrismicGlobalContentsConnection {
  totalCount: Int!
  edges: [PrismicGlobalContentsEdge!]!
  nodes: [PrismicGlobalContents!]!
  pageInfo: PageInfo!
  distinct(field: PrismicGlobalContentsFieldsEnum!): [String!]!
  max(field: PrismicGlobalContentsFieldsEnum!): Float
  min(field: PrismicGlobalContentsFieldsEnum!): Float
  sum(field: PrismicGlobalContentsFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicGlobalContentsFieldsEnum!): [PrismicGlobalContentsGroupConnection!]!
}

type PrismicGlobalContentsEdge {
  next: PrismicGlobalContents
  node: PrismicGlobalContents!
  previous: PrismicGlobalContents
}

enum PrismicGlobalContentsFieldsEnum {
  data___about_background_image___alt
  data___about_background_image___copyright
  data___about_background_image___dimensions___width
  data___about_background_image___dimensions___height
  data___about_background_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___sourceInstanceName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___absolutePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___relativePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___extension @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___size @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___prettySize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___modifiedTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___accessTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___changeTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___birthTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___root @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___dir @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___base @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___ext @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___name @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___relativeDirectory @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___dev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___mode @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___nlink @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___uid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___gid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___rdev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___ino @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___atimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___mtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___ctimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___atime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___mtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___ctime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___birthtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___birthtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___blksize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___blocks @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___childrenImageSharp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___alt
  data___about_opengraph_image___copyright
  data___about_opengraph_image___dimensions___width
  data___about_opengraph_image___dimensions___height
  data___about_opengraph_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___sourceInstanceName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___absolutePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___relativePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___extension @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___size @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___prettySize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___modifiedTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___accessTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___changeTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___birthTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___root @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___dir @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___base @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___ext @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___name @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___relativeDirectory @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___dev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___mode @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___nlink @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___uid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___gid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___rdev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___ino @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___atimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___mtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___ctimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___atime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___mtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___ctime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___birthtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___birthtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___blksize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___blocks @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___childrenImageSharp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image_link
  data___about_page_description
  data___about_page_title
  data___about_title___text
  data___about_title___html
  data___about_title___richText
  data___about_title___raw
  data___app_store_link
  data___google_play_link
  data___main_opengraph_image___alt
  data___main_opengraph_image___copyright
  data___main_opengraph_image___dimensions___width
  data___main_opengraph_image___dimensions___height
  data___main_opengraph_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___sourceInstanceName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___absolutePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___relativePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___extension @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___size @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___prettySize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___modifiedTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___accessTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___changeTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___birthTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___root @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___dir @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___base @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___ext @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___name @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___relativeDirectory @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___dev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___mode @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___nlink @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___uid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___gid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___rdev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___ino @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___atimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___mtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___ctimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___atime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___mtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___ctime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___birthtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___birthtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___blksize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___blocks @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___childrenImageSharp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image_link
  data___main_page_description
  data___main_page_title
  data___one_link
  data___one_link_button_text
  dataRaw
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicGlobalContentsGroupConnection {
  totalCount: Int!
  edges: [PrismicGlobalContentsEdge!]!
  nodes: [PrismicGlobalContents!]!
  pageInfo: PageInfo!
  distinct(field: PrismicGlobalContentsFieldsEnum!): [String!]!
  max(field: PrismicGlobalContentsFieldsEnum!): Float
  min(field: PrismicGlobalContentsFieldsEnum!): Float
  sum(field: PrismicGlobalContentsFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicGlobalContentsFieldsEnum!): [PrismicGlobalContentsGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicGlobalContentsFilterInput {
  data: PrismicGlobalContentsDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicGlobalContentsSortInput {
  fields: [PrismicGlobalContentsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicTeamContentsDataTypeFilterInput {
  completed_page_content: PrismicStructuredTextTypeFilterInput
  completed_page_link_group: PrismicTeamContentsDataCompletedPageLinkGroupFilterListInput
  culture_page_meta_description: StringQueryOperatorInput
  culture_page_meta_image: PrismicTeamContentsDataCulturePageMetaImageImageTypeFilterInput
  culture_page_meta_title: StringQueryOperatorInput
  culture_page_title: PrismicStructuredTextTypeFilterInput
  enable_culture_page: BooleanQueryOperatorInput
  enable_faq_page: BooleanQueryOperatorInput
  enable_life_page: BooleanQueryOperatorInput
  faq_entries: PrismicTeamContentsDataFaqEntriesFilterListInput
  faq_page_meta_description: StringQueryOperatorInput
  faq_page_meta_title: StringQueryOperatorInput
  faq_page_title: PrismicStructuredTextTypeFilterInput
  fb_app_id: StringQueryOperatorInput
  jobs_page_meta_description: StringQueryOperatorInput
  jobs_page_meta_image: PrismicTeamContentsDataJobsPageMetaImageImageTypeFilterInput
  jobs_page_meta_title: StringQueryOperatorInput
  jobs_page_title: PrismicStructuredTextTypeFilterInput
  life_page_meta_description: StringQueryOperatorInput
  life_page_meta_image: PrismicTeamContentsDataLifePageMetaImageImageTypeFilterInput
  life_page_meta_title: StringQueryOperatorInput
  life_page_title: PrismicStructuredTextTypeFilterInput
  main_page_meta_description: StringQueryOperatorInput
  main_page_meta_image: PrismicTeamContentsDataMainPageMetaImageImageTypeFilterInput
  main_page_meta_title: StringQueryOperatorInput
  main_page_title: PrismicStructuredTextTypeFilterInput
  notfound_page_link_group: PrismicTeamContentsDataNotfoundPageLinkGroupFilterListInput
  notfound_page_title: PrismicStructuredTextTypeFilterInput
  twitter_site_handle: StringQueryOperatorInput
}

input PrismicTeamContentsDataCompletedPageLinkGroupFilterListInput {
  elemMatch: PrismicTeamContentsDataCompletedPageLinkGroupFilterInput
}

input PrismicTeamContentsDataCompletedPageLinkGroupFilterInput {
  display_text: StringQueryOperatorInput
  link: PrismicLinkTypeFilterInput
}

input PrismicTeamContentsDataCulturePageMetaImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  url: StringQueryOperatorInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
}

input PrismicTeamContentsDataFaqEntriesFilterListInput {
  elemMatch: PrismicTeamContentsDataFaqEntriesFilterInput
}

input PrismicTeamContentsDataFaqEntriesFilterInput {
  answer: PrismicStructuredTextTypeFilterInput
  question: StringQueryOperatorInput
}

input PrismicTeamContentsDataJobsPageMetaImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  url: StringQueryOperatorInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
}

input PrismicTeamContentsDataLifePageMetaImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  url: StringQueryOperatorInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
}

input PrismicTeamContentsDataMainPageMetaImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  url: StringQueryOperatorInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
}

input PrismicTeamContentsDataNotfoundPageLinkGroupFilterListInput {
  elemMatch: PrismicTeamContentsDataNotfoundPageLinkGroupFilterInput
}

input PrismicTeamContentsDataNotfoundPageLinkGroupFilterInput {
  display_text: StringQueryOperatorInput
  link: PrismicLinkTypeFilterInput
}

type PrismicTeamContentsConnection {
  totalCount: Int!
  edges: [PrismicTeamContentsEdge!]!
  nodes: [PrismicTeamContents!]!
  pageInfo: PageInfo!
  distinct(field: PrismicTeamContentsFieldsEnum!): [String!]!
  max(field: PrismicTeamContentsFieldsEnum!): Float
  min(field: PrismicTeamContentsFieldsEnum!): Float
  sum(field: PrismicTeamContentsFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicTeamContentsFieldsEnum!): [PrismicTeamContentsGroupConnection!]!
}

type PrismicTeamContentsEdge {
  next: PrismicTeamContents
  node: PrismicTeamContents!
  previous: PrismicTeamContents
}

enum PrismicTeamContentsFieldsEnum {
  data___completed_page_content___text
  data___completed_page_content___html
  data___completed_page_content___richText
  data___completed_page_content___raw
  data___completed_page_link_group
  data___completed_page_link_group___display_text
  data___completed_page_link_group___link___link_type
  data___completed_page_link_group___link___isBroken
  data___completed_page_link_group___link___url
  data___completed_page_link_group___link___target
  data___completed_page_link_group___link___size
  data___completed_page_link_group___link___id
  data___completed_page_link_group___link___type
  data___completed_page_link_group___link___tags
  data___completed_page_link_group___link___lang
  data___completed_page_link_group___link___slug
  data___completed_page_link_group___link___uid
  data___completed_page_link_group___link___raw
  data___culture_page_meta_description
  data___culture_page_meta_image___alt
  data___culture_page_meta_image___copyright
  data___culture_page_meta_image___dimensions___width
  data___culture_page_meta_image___dimensions___height
  data___culture_page_meta_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___sourceInstanceName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___absolutePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___relativePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___extension @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___size @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___prettySize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___modifiedTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___accessTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___changeTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___birthTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___root @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___dir @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___base @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___ext @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___name @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___relativeDirectory @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___dev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___mode @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___nlink @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___uid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___gid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___rdev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___ino @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___atimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___mtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___ctimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___atime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___mtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___ctime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___birthtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___birthtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___blksize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___blocks @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___childrenImageSharp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_title
  data___culture_page_title___text
  data___culture_page_title___html
  data___culture_page_title___richText
  data___culture_page_title___raw
  data___enable_culture_page
  data___enable_faq_page
  data___enable_life_page
  data___faq_entries
  data___faq_entries___answer___text
  data___faq_entries___answer___html
  data___faq_entries___answer___richText
  data___faq_entries___answer___raw
  data___faq_entries___question
  data___faq_page_meta_description
  data___faq_page_meta_title
  data___faq_page_title___text
  data___faq_page_title___html
  data___faq_page_title___richText
  data___faq_page_title___raw
  data___fb_app_id
  data___jobs_page_meta_description
  data___jobs_page_meta_image___alt
  data___jobs_page_meta_image___copyright
  data___jobs_page_meta_image___dimensions___width
  data___jobs_page_meta_image___dimensions___height
  data___jobs_page_meta_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___sourceInstanceName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___absolutePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___relativePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___extension @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___size @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___prettySize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___modifiedTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___accessTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___changeTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___birthTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___root @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___dir @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___base @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___ext @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___name @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___relativeDirectory @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___dev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___mode @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___nlink @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___uid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___gid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___rdev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___ino @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___atimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___mtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___ctimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___atime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___mtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___ctime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___birthtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___birthtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___blksize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___blocks @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___childrenImageSharp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_title
  data___jobs_page_title___text
  data___jobs_page_title___html
  data___jobs_page_title___richText
  data___jobs_page_title___raw
  data___life_page_meta_description
  data___life_page_meta_image___alt
  data___life_page_meta_image___copyright
  data___life_page_meta_image___dimensions___width
  data___life_page_meta_image___dimensions___height
  data___life_page_meta_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___sourceInstanceName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___absolutePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___relativePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___extension @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___size @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___prettySize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___modifiedTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___accessTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___changeTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___birthTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___root @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___dir @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___base @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___ext @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___name @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___relativeDirectory @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___dev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___mode @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___nlink @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___uid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___gid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___rdev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___ino @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___atimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___mtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___ctimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___atime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___mtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___ctime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___birthtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___birthtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___blksize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___blocks @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___childrenImageSharp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_title
  data___life_page_title___text
  data___life_page_title___html
  data___life_page_title___richText
  data___life_page_title___raw
  data___main_page_meta_description
  data___main_page_meta_image___alt
  data___main_page_meta_image___copyright
  data___main_page_meta_image___dimensions___width
  data___main_page_meta_image___dimensions___height
  data___main_page_meta_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___sourceInstanceName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___absolutePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___relativePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___extension @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___size @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___prettySize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___modifiedTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___accessTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___changeTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___birthTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___root @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___dir @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___base @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___ext @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___name @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___relativeDirectory @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___dev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___mode @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___nlink @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___uid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___gid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___rdev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___ino @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___atimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___mtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___ctimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___atime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___mtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___ctime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___birthtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___birthtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___blksize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___blocks @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___childrenImageSharp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_title
  data___main_page_title___text
  data___main_page_title___html
  data___main_page_title___richText
  data___main_page_title___raw
  data___notfound_page_link_group
  data___notfound_page_link_group___display_text
  data___notfound_page_link_group___link___link_type
  data___notfound_page_link_group___link___isBroken
  data___notfound_page_link_group___link___url
  data___notfound_page_link_group___link___target
  data___notfound_page_link_group___link___size
  data___notfound_page_link_group___link___id
  data___notfound_page_link_group___link___type
  data___notfound_page_link_group___link___tags
  data___notfound_page_link_group___link___lang
  data___notfound_page_link_group___link___slug
  data___notfound_page_link_group___link___uid
  data___notfound_page_link_group___link___raw
  data___notfound_page_title___text
  data___notfound_page_title___html
  data___notfound_page_title___richText
  data___notfound_page_title___raw
  data___twitter_site_handle
  dataRaw
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicTeamContentsGroupConnection {
  totalCount: Int!
  edges: [PrismicTeamContentsEdge!]!
  nodes: [PrismicTeamContents!]!
  pageInfo: PageInfo!
  distinct(field: PrismicTeamContentsFieldsEnum!): [String!]!
  max(field: PrismicTeamContentsFieldsEnum!): Float
  min(field: PrismicTeamContentsFieldsEnum!): Float
  sum(field: PrismicTeamContentsFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicTeamContentsFieldsEnum!): [PrismicTeamContentsGroupConnection!]!
  field: String!
  fieldValue: String
}

input PrismicTeamContentsFilterInput {
  data: PrismicTeamContentsDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicTeamContentsSortInput {
  fields: [PrismicTeamContentsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input LokaliseMessagesFilterInput {
  jobs_page__chapter_all: StringQueryOperatorInput
  jobs_page__employment_type_intern: StringQueryOperatorInput
  jobs_page__employment_type_fulltime: StringQueryOperatorInput
  jobs_page__employment_type_contractor: StringQueryOperatorInput
  jobs_page__employment_type_all: StringQueryOperatorInput
  jobs_page__employment_type_assistant: StringQueryOperatorInput
  jobs_page__search: StringQueryOperatorInput
  job_post_list__empty_placeholder__no_results: StringQueryOperatorInput
  job_post_list__empty_placeholder__back_to_list: StringQueryOperatorInput
  job_post_layout__tab_apply: StringQueryOperatorInput
  job_post_layout__tab_view: StringQueryOperatorInput
  job_post_layout__property_karrot_market: StringQueryOperatorInput
  job_post_page__faq: StringQueryOperatorInput
  job_post_page__back_to_list: StringQueryOperatorInput
  job_post_page__external_post_notice: StringQueryOperatorInput
  job_post_page__external_post_link: StringQueryOperatorInput
  job_application_page__field_portpolio_label: StringQueryOperatorInput
  job_application_page__field_phone_label: StringQueryOperatorInput
  job_application_page__field_phone_placeholder: StringQueryOperatorInput
  job_application_page__field_email_label: StringQueryOperatorInput
  job_application_page__field_resume_placeholder: StringQueryOperatorInput
  job_application_page__field_portpolio_placeholder: StringQueryOperatorInput
  job_application_page__field_resume_description: StringQueryOperatorInput
  job_application_page__field_name_label: StringQueryOperatorInput
  job_application_page__field_portpolio_description: StringQueryOperatorInput
  job_application_page__field_name_placeholder: StringQueryOperatorInput
  job_application_page__field_email_placeholder: StringQueryOperatorInput
  job_application_page__field_resume_label: StringQueryOperatorInput
  job_application_page__terms_sensitive_info: StringQueryOperatorInput
  job_application_page__button_submit: StringQueryOperatorInput
  job_application_page__terms_privacy_info: StringQueryOperatorInput
  job_application_page__confirm_apply: StringQueryOperatorInput
  job_post_layout__property_karrot_pay: StringQueryOperatorInput
  job_application_page__alert_completed: StringQueryOperatorInput
  job_application_page__alert_failed: StringQueryOperatorInput
  jobs_page__default_meta_title: StringQueryOperatorInput
  job_post_layout__prior_experience_yes: StringQueryOperatorInput
  job_post_layout__prior_experience_no: StringQueryOperatorInput
  job_post_layout__prior_experience_whatever: StringQueryOperatorInput
  job_application_page__field_file_placeholder: StringQueryOperatorInput
  detail_link__default_label: StringQueryOperatorInput
  form_field__placeholder: StringQueryOperatorInput
  form_field__empty_placeholder: StringQueryOperatorInput
  form_field__organization_name: StringQueryOperatorInput
  form_field__yes_placeholder: StringQueryOperatorInput
  form_field__no_placeholder: StringQueryOperatorInput
}

type LokaliseTranslationConnection {
  totalCount: Int!
  edges: [LokaliseTranslationEdge!]!
  nodes: [LokaliseTranslation!]!
  pageInfo: PageInfo!
  distinct(field: LokaliseTranslationFieldsEnum!): [String!]!
  max(field: LokaliseTranslationFieldsEnum!): Float
  min(field: LokaliseTranslationFieldsEnum!): Float
  sum(field: LokaliseTranslationFieldsEnum!): Float
  group(skip: Int, limit: Int, field: LokaliseTranslationFieldsEnum!): [LokaliseTranslationGroupConnection!]!
}

type LokaliseTranslationEdge {
  next: LokaliseTranslation
  node: LokaliseTranslation!
  previous: LokaliseTranslation
}

enum LokaliseTranslationFieldsEnum {
  locale
  messages___jobs_page__chapter_all
  messages___jobs_page__employment_type_intern
  messages___jobs_page__employment_type_fulltime
  messages___jobs_page__employment_type_contractor
  messages___jobs_page__employment_type_all
  messages___jobs_page__employment_type_assistant
  messages___jobs_page__search
  messages___job_post_list__empty_placeholder__no_results
  messages___job_post_list__empty_placeholder__back_to_list
  messages___job_post_layout__tab_apply
  messages___job_post_layout__tab_view
  messages___job_post_layout__property_karrot_market
  messages___job_post_page__faq
  messages___job_post_page__back_to_list
  messages___job_post_page__external_post_notice
  messages___job_post_page__external_post_link
  messages___job_application_page__field_portpolio_label
  messages___job_application_page__field_phone_label
  messages___job_application_page__field_phone_placeholder
  messages___job_application_page__field_email_label
  messages___job_application_page__field_resume_placeholder
  messages___job_application_page__field_portpolio_placeholder
  messages___job_application_page__field_resume_description
  messages___job_application_page__field_name_label
  messages___job_application_page__field_portpolio_description
  messages___job_application_page__field_name_placeholder
  messages___job_application_page__field_email_placeholder
  messages___job_application_page__field_resume_label
  messages___job_application_page__terms_sensitive_info
  messages___job_application_page__button_submit
  messages___job_application_page__terms_privacy_info
  messages___job_application_page__confirm_apply
  messages___job_post_layout__property_karrot_pay
  messages___job_application_page__alert_completed
  messages___job_application_page__alert_failed
  messages___jobs_page__default_meta_title
  messages___job_post_layout__prior_experience_yes
  messages___job_post_layout__prior_experience_no
  messages___job_post_layout__prior_experience_whatever
  messages___job_application_page__field_file_placeholder
  messages___detail_link__default_label
  messages___form_field__placeholder
  messages___form_field__empty_placeholder
  messages___form_field__organization_name
  messages___form_field__yes_placeholder
  messages___form_field__no_placeholder
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type LokaliseTranslationGroupConnection {
  totalCount: Int!
  edges: [LokaliseTranslationEdge!]!
  nodes: [LokaliseTranslation!]!
  pageInfo: PageInfo!
  distinct(field: LokaliseTranslationFieldsEnum!): [String!]!
  max(field: LokaliseTranslationFieldsEnum!): Float
  min(field: LokaliseTranslationFieldsEnum!): Float
  sum(field: LokaliseTranslationFieldsEnum!): Float
  group(skip: Int, limit: Int, field: LokaliseTranslationFieldsEnum!): [LokaliseTranslationGroupConnection!]!
  field: String!
  fieldValue: String
}

input LokaliseTranslationFilterInput {
  locale: StringQueryOperatorInput
  messages: LokaliseMessagesFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input LokaliseTranslationSortInput {
  fields: [LokaliseTranslationFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input GreenhouseJobBoardJobFilterInput {
  ghId: StringQueryOperatorInput
  title: StringQueryOperatorInput
  boardUrl: StringQueryOperatorInput
  content: StringQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  questions: GreenhouseJobBoardJobQuestionFilterListInput
  locationQuestions: GreenhouseJobBoardJobQuestionFilterListInput
  departments: GreenhouseJobBoardDepartmentFilterListInput
  metadata: GreenhouseJobBoardJobCustomFieldMetadataFilterListInput
  boardToken: StringQueryOperatorInput
  childJobPost: JobPostFilterInput
  childrenJobPost: JobPostFilterListInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input GreenhouseJobBoardJobQuestionFilterListInput {
  elemMatch: GreenhouseJobBoardJobQuestionFilterInput
}

input GreenhouseJobBoardJobQuestionFilterInput {
  label: StringQueryOperatorInput
  required: BooleanQueryOperatorInput
  description: StringQueryOperatorInput
  name: StringQueryOperatorInput
}

input GreenhouseJobBoardDepartmentFilterListInput {
  elemMatch: GreenhouseJobBoardDepartmentFilterInput
}

input GreenhouseJobBoardDepartmentFilterInput {
  ghId: StringQueryOperatorInput
  name: StringQueryOperatorInput
  jobs: GreenhouseJobBoardJobFilterListInput
  parentDepartment: GreenhouseJobBoardDepartmentFilterInput
  childDepartments: GreenhouseJobBoardDepartmentFilterListInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input GreenhouseJobBoardJobFilterListInput {
  elemMatch: GreenhouseJobBoardJobFilterInput
}

input GreenhouseJobBoardJobCustomFieldMetadataFilterListInput {
  elemMatch: GreenhouseJobBoardJobCustomFieldMetadataFilterInput
}

input GreenhouseJobBoardJobCustomFieldMetadataFilterInput {
  id: StringQueryOperatorInput
  name: StringQueryOperatorInput
  type: GreenhouseJobBoardJobCustomFieldTypeQueryOperatorInput
  value: StringQueryOperatorInput
}

input GreenhouseJobBoardJobCustomFieldTypeQueryOperatorInput {
  eq: GreenhouseJobBoardJobCustomFieldType
  ne: GreenhouseJobBoardJobCustomFieldType
  in: [GreenhouseJobBoardJobCustomFieldType]
  nin: [GreenhouseJobBoardJobCustomFieldType]
}

input JobPostFilterInput {
  slug: StringQueryOperatorInput
  absoluteUrl: StringQueryOperatorInput
  ghId: StringQueryOperatorInput
  parentJob: GreenhouseJobBoardJobFilterInput
  updatedAt: DateQueryOperatorInput
  validThrough: DateQueryOperatorInput
  title: StringQueryOperatorInput
  boardToken: StringQueryOperatorInput
  boardUrl: StringQueryOperatorInput
  content: JobPostContentSectionFilterListInput
  rawContent: StringQueryOperatorInput
  corporate: JobCorporateQueryOperatorInput
  employmentType: JobEmploymentTypeQueryOperatorInput
  alternativeCivilianService: BooleanQueryOperatorInput
  priorExperience: JobPriorExperienceQueryOperatorInput
  chapter: StringQueryOperatorInput
  keywords: StringQueryOperatorInput
  order: IntQueryOperatorInput
  externalUrl: StringQueryOperatorInput
  tags: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input JobPostContentSectionFilterListInput {
  elemMatch: JobPostContentSectionFilterInput
}

input JobPostContentSectionFilterInput {
  title: StringQueryOperatorInput
  level: HeadingLevelQueryOperatorInput
  bodyHtml: StringQueryOperatorInput
}

input HeadingLevelQueryOperatorInput {
  eq: HeadingLevel
  ne: HeadingLevel
  in: [HeadingLevel]
  nin: [HeadingLevel]
}

input JobCorporateQueryOperatorInput {
  eq: JobCorporate
  ne: JobCorporate
  in: [JobCorporate]
  nin: [JobCorporate]
}

input JobEmploymentTypeQueryOperatorInput {
  eq: JobEmploymentType
  ne: JobEmploymentType
  in: [JobEmploymentType]
  nin: [JobEmploymentType]
}

input JobPriorExperienceQueryOperatorInput {
  eq: JobPriorExperience
  ne: JobPriorExperience
  in: [JobPriorExperience]
  nin: [JobPriorExperience]
}

input JobPostFilterListInput {
  elemMatch: JobPostFilterInput
}

type JobPostConnection {
  totalCount: Int!
  edges: [JobPostEdge!]!
  nodes: [JobPost!]!
  pageInfo: PageInfo!
  distinct(field: JobPostFieldsEnum!): [String!]!
  max(field: JobPostFieldsEnum!): Float
  min(field: JobPostFieldsEnum!): Float
  sum(field: JobPostFieldsEnum!): Float
  group(skip: Int, limit: Int, field: JobPostFieldsEnum!): [JobPostGroupConnection!]!
}

type JobPostEdge {
  next: JobPost
  node: JobPost!
  previous: JobPost
}

enum JobPostFieldsEnum {
  slug
  absoluteUrl
  ghId
  parentJob___ghId
  parentJob___title
  parentJob___boardUrl
  parentJob___content
  parentJob___updatedAt
  parentJob___questions
  parentJob___questions___label
  parentJob___questions___required
  parentJob___questions___description
  parentJob___questions___name
  parentJob___locationQuestions
  parentJob___locationQuestions___label
  parentJob___locationQuestions___required
  parentJob___locationQuestions___description
  parentJob___locationQuestions___name
  parentJob___departments
  parentJob___departments___ghId
  parentJob___departments___name
  parentJob___departments___jobs
  parentJob___departments___jobs___ghId
  parentJob___departments___jobs___title
  parentJob___departments___jobs___boardUrl
  parentJob___departments___jobs___content
  parentJob___departments___jobs___updatedAt
  parentJob___departments___jobs___questions
  parentJob___departments___jobs___locationQuestions
  parentJob___departments___jobs___departments
  parentJob___departments___jobs___metadata
  parentJob___departments___jobs___boardToken
  parentJob___departments___jobs___childrenJobPost
  parentJob___departments___jobs___id
  parentJob___departments___jobs___children
  parentJob___departments___parentDepartment___ghId
  parentJob___departments___parentDepartment___name
  parentJob___departments___parentDepartment___jobs
  parentJob___departments___parentDepartment___childDepartments
  parentJob___departments___parentDepartment___id
  parentJob___departments___parentDepartment___children
  parentJob___departments___childDepartments
  parentJob___departments___childDepartments___ghId
  parentJob___departments___childDepartments___name
  parentJob___departments___childDepartments___jobs
  parentJob___departments___childDepartments___childDepartments
  parentJob___departments___childDepartments___id
  parentJob___departments___childDepartments___children
  parentJob___departments___id
  parentJob___departments___parent___id
  parentJob___departments___parent___children
  parentJob___departments___children
  parentJob___departments___children___id
  parentJob___departments___children___children
  parentJob___departments___internal___content
  parentJob___departments___internal___contentDigest
  parentJob___departments___internal___description
  parentJob___departments___internal___fieldOwners
  parentJob___departments___internal___ignoreType
  parentJob___departments___internal___mediaType
  parentJob___departments___internal___owner
  parentJob___departments___internal___type
  parentJob___metadata
  parentJob___metadata___id
  parentJob___metadata___name
  parentJob___metadata___type
  parentJob___metadata___value
  parentJob___boardToken
  parentJob___childJobPost___slug
  parentJob___childJobPost___absoluteUrl
  parentJob___childJobPost___ghId
  parentJob___childJobPost___parentJob___ghId
  parentJob___childJobPost___parentJob___title
  parentJob___childJobPost___parentJob___boardUrl
  parentJob___childJobPost___parentJob___content
  parentJob___childJobPost___parentJob___updatedAt
  parentJob___childJobPost___parentJob___questions
  parentJob___childJobPost___parentJob___locationQuestions
  parentJob___childJobPost___parentJob___departments
  parentJob___childJobPost___parentJob___metadata
  parentJob___childJobPost___parentJob___boardToken
  parentJob___childJobPost___parentJob___childrenJobPost
  parentJob___childJobPost___parentJob___id
  parentJob___childJobPost___parentJob___children
  parentJob___childJobPost___updatedAt
  parentJob___childJobPost___validThrough
  parentJob___childJobPost___title
  parentJob___childJobPost___boardToken
  parentJob___childJobPost___boardUrl
  parentJob___childJobPost___content
  parentJob___childJobPost___content___title
  parentJob___childJobPost___content___level
  parentJob___childJobPost___content___bodyHtml
  parentJob___childJobPost___rawContent
  parentJob___childJobPost___corporate
  parentJob___childJobPost___employmentType
  parentJob___childJobPost___alternativeCivilianService
  parentJob___childJobPost___priorExperience
  parentJob___childJobPost___chapter
  parentJob___childJobPost___keywords
  parentJob___childJobPost___order
  parentJob___childJobPost___externalUrl
  parentJob___childJobPost___tags
  parentJob___childJobPost___id
  parentJob___childJobPost___parent___id
  parentJob___childJobPost___parent___children
  parentJob___childJobPost___children
  parentJob___childJobPost___children___id
  parentJob___childJobPost___children___children
  parentJob___childJobPost___internal___content
  parentJob___childJobPost___internal___contentDigest
  parentJob___childJobPost___internal___description
  parentJob___childJobPost___internal___fieldOwners
  parentJob___childJobPost___internal___ignoreType
  parentJob___childJobPost___internal___mediaType
  parentJob___childJobPost___internal___owner
  parentJob___childJobPost___internal___type
  parentJob___childrenJobPost
  parentJob___childrenJobPost___slug
  parentJob___childrenJobPost___absoluteUrl
  parentJob___childrenJobPost___ghId
  parentJob___childrenJobPost___parentJob___ghId
  parentJob___childrenJobPost___parentJob___title
  parentJob___childrenJobPost___parentJob___boardUrl
  parentJob___childrenJobPost___parentJob___content
  parentJob___childrenJobPost___parentJob___updatedAt
  parentJob___childrenJobPost___parentJob___questions
  parentJob___childrenJobPost___parentJob___locationQuestions
  parentJob___childrenJobPost___parentJob___departments
  parentJob___childrenJobPost___parentJob___metadata
  parentJob___childrenJobPost___parentJob___boardToken
  parentJob___childrenJobPost___parentJob___childrenJobPost
  parentJob___childrenJobPost___parentJob___id
  parentJob___childrenJobPost___parentJob___children
  parentJob___childrenJobPost___updatedAt
  parentJob___childrenJobPost___validThrough
  parentJob___childrenJobPost___title
  parentJob___childrenJobPost___boardToken
  parentJob___childrenJobPost___boardUrl
  parentJob___childrenJobPost___content
  parentJob___childrenJobPost___content___title
  parentJob___childrenJobPost___content___level
  parentJob___childrenJobPost___content___bodyHtml
  parentJob___childrenJobPost___rawContent
  parentJob___childrenJobPost___corporate
  parentJob___childrenJobPost___employmentType
  parentJob___childrenJobPost___alternativeCivilianService
  parentJob___childrenJobPost___priorExperience
  parentJob___childrenJobPost___chapter
  parentJob___childrenJobPost___keywords
  parentJob___childrenJobPost___order
  parentJob___childrenJobPost___externalUrl
  parentJob___childrenJobPost___tags
  parentJob___childrenJobPost___id
  parentJob___childrenJobPost___parent___id
  parentJob___childrenJobPost___parent___children
  parentJob___childrenJobPost___children
  parentJob___childrenJobPost___children___id
  parentJob___childrenJobPost___children___children
  parentJob___childrenJobPost___internal___content
  parentJob___childrenJobPost___internal___contentDigest
  parentJob___childrenJobPost___internal___description
  parentJob___childrenJobPost___internal___fieldOwners
  parentJob___childrenJobPost___internal___ignoreType
  parentJob___childrenJobPost___internal___mediaType
  parentJob___childrenJobPost___internal___owner
  parentJob___childrenJobPost___internal___type
  parentJob___id
  parentJob___parent___id
  parentJob___parent___parent___id
  parentJob___parent___parent___children
  parentJob___parent___children
  parentJob___parent___children___id
  parentJob___parent___children___children
  parentJob___parent___internal___content
  parentJob___parent___internal___contentDigest
  parentJob___parent___internal___description
  parentJob___parent___internal___fieldOwners
  parentJob___parent___internal___ignoreType
  parentJob___parent___internal___mediaType
  parentJob___parent___internal___owner
  parentJob___parent___internal___type
  parentJob___children
  parentJob___children___id
  parentJob___children___parent___id
  parentJob___children___parent___children
  parentJob___children___children
  parentJob___children___children___id
  parentJob___children___children___children
  parentJob___children___internal___content
  parentJob___children___internal___contentDigest
  parentJob___children___internal___description
  parentJob___children___internal___fieldOwners
  parentJob___children___internal___ignoreType
  parentJob___children___internal___mediaType
  parentJob___children___internal___owner
  parentJob___children___internal___type
  parentJob___internal___content
  parentJob___internal___contentDigest
  parentJob___internal___description
  parentJob___internal___fieldOwners
  parentJob___internal___ignoreType
  parentJob___internal___mediaType
  parentJob___internal___owner
  parentJob___internal___type
  updatedAt
  validThrough
  title
  boardToken
  boardUrl
  content
  content___title
  content___level
  content___bodyHtml
  rawContent
  corporate
  employmentType
  alternativeCivilianService
  priorExperience
  chapter
  keywords
  order
  externalUrl
  tags
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type JobPostGroupConnection {
  totalCount: Int!
  edges: [JobPostEdge!]!
  nodes: [JobPost!]!
  pageInfo: PageInfo!
  distinct(field: JobPostFieldsEnum!): [String!]!
  max(field: JobPostFieldsEnum!): Float
  min(field: JobPostFieldsEnum!): Float
  sum(field: JobPostFieldsEnum!): Float
  group(skip: Int, limit: Int, field: JobPostFieldsEnum!): [JobPostGroupConnection!]!
  field: String!
  fieldValue: String
}

input JobPostSortInput {
  fields: [JobPostFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type GreenhouseJobBoardJobConnection {
  totalCount: Int!
  edges: [GreenhouseJobBoardJobEdge!]!
  nodes: [GreenhouseJobBoardJob!]!
  pageInfo: PageInfo!
  distinct(field: GreenhouseJobBoardJobFieldsEnum!): [String!]!
  max(field: GreenhouseJobBoardJobFieldsEnum!): Float
  min(field: GreenhouseJobBoardJobFieldsEnum!): Float
  sum(field: GreenhouseJobBoardJobFieldsEnum!): Float
  group(skip: Int, limit: Int, field: GreenhouseJobBoardJobFieldsEnum!): [GreenhouseJobBoardJobGroupConnection!]!
}

type GreenhouseJobBoardJobEdge {
  next: GreenhouseJobBoardJob
  node: GreenhouseJobBoardJob!
  previous: GreenhouseJobBoardJob
}

enum GreenhouseJobBoardJobFieldsEnum {
  ghId
  title
  boardUrl
  content
  updatedAt
  questions
  questions___label
  questions___required
  questions___description
  questions___name
  locationQuestions
  locationQuestions___label
  locationQuestions___required
  locationQuestions___description
  locationQuestions___name
  departments
  departments___ghId
  departments___name
  departments___jobs
  departments___jobs___ghId
  departments___jobs___title
  departments___jobs___boardUrl
  departments___jobs___content
  departments___jobs___updatedAt
  departments___jobs___questions
  departments___jobs___questions___label
  departments___jobs___questions___required
  departments___jobs___questions___description
  departments___jobs___questions___name
  departments___jobs___locationQuestions
  departments___jobs___locationQuestions___label
  departments___jobs___locationQuestions___required
  departments___jobs___locationQuestions___description
  departments___jobs___locationQuestions___name
  departments___jobs___departments
  departments___jobs___departments___ghId
  departments___jobs___departments___name
  departments___jobs___departments___jobs
  departments___jobs___departments___childDepartments
  departments___jobs___departments___id
  departments___jobs___departments___children
  departments___jobs___metadata
  departments___jobs___metadata___id
  departments___jobs___metadata___name
  departments___jobs___metadata___type
  departments___jobs___metadata___value
  departments___jobs___boardToken
  departments___jobs___childJobPost___slug
  departments___jobs___childJobPost___absoluteUrl
  departments___jobs___childJobPost___ghId
  departments___jobs___childJobPost___updatedAt
  departments___jobs___childJobPost___validThrough
  departments___jobs___childJobPost___title
  departments___jobs___childJobPost___boardToken
  departments___jobs___childJobPost___boardUrl
  departments___jobs___childJobPost___content
  departments___jobs___childJobPost___rawContent
  departments___jobs___childJobPost___corporate
  departments___jobs___childJobPost___employmentType
  departments___jobs___childJobPost___alternativeCivilianService
  departments___jobs___childJobPost___priorExperience
  departments___jobs___childJobPost___chapter
  departments___jobs___childJobPost___keywords
  departments___jobs___childJobPost___order
  departments___jobs___childJobPost___externalUrl
  departments___jobs___childJobPost___tags
  departments___jobs___childJobPost___id
  departments___jobs___childJobPost___children
  departments___jobs___childrenJobPost
  departments___jobs___childrenJobPost___slug
  departments___jobs___childrenJobPost___absoluteUrl
  departments___jobs___childrenJobPost___ghId
  departments___jobs___childrenJobPost___updatedAt
  departments___jobs___childrenJobPost___validThrough
  departments___jobs___childrenJobPost___title
  departments___jobs___childrenJobPost___boardToken
  departments___jobs___childrenJobPost___boardUrl
  departments___jobs___childrenJobPost___content
  departments___jobs___childrenJobPost___rawContent
  departments___jobs___childrenJobPost___corporate
  departments___jobs___childrenJobPost___employmentType
  departments___jobs___childrenJobPost___alternativeCivilianService
  departments___jobs___childrenJobPost___priorExperience
  departments___jobs___childrenJobPost___chapter
  departments___jobs___childrenJobPost___keywords
  departments___jobs___childrenJobPost___order
  departments___jobs___childrenJobPost___externalUrl
  departments___jobs___childrenJobPost___tags
  departments___jobs___childrenJobPost___id
  departments___jobs___childrenJobPost___children
  departments___jobs___id
  departments___jobs___parent___id
  departments___jobs___parent___children
  departments___jobs___children
  departments___jobs___children___id
  departments___jobs___children___children
  departments___jobs___internal___content
  departments___jobs___internal___contentDigest
  departments___jobs___internal___description
  departments___jobs___internal___fieldOwners
  departments___jobs___internal___ignoreType
  departments___jobs___internal___mediaType
  departments___jobs___internal___owner
  departments___jobs___internal___type
  departments___parentDepartment___ghId
  departments___parentDepartment___name
  departments___parentDepartment___jobs
  departments___parentDepartment___jobs___ghId
  departments___parentDepartment___jobs___title
  departments___parentDepartment___jobs___boardUrl
  departments___parentDepartment___jobs___content
  departments___parentDepartment___jobs___updatedAt
  departments___parentDepartment___jobs___questions
  departments___parentDepartment___jobs___locationQuestions
  departments___parentDepartment___jobs___departments
  departments___parentDepartment___jobs___metadata
  departments___parentDepartment___jobs___boardToken
  departments___parentDepartment___jobs___childrenJobPost
  departments___parentDepartment___jobs___id
  departments___parentDepartment___jobs___children
  departments___parentDepartment___parentDepartment___ghId
  departments___parentDepartment___parentDepartment___name
  departments___parentDepartment___parentDepartment___jobs
  departments___parentDepartment___parentDepartment___childDepartments
  departments___parentDepartment___parentDepartment___id
  departments___parentDepartment___parentDepartment___children
  departments___parentDepartment___childDepartments
  departments___parentDepartment___childDepartments___ghId
  departments___parentDepartment___childDepartments___name
  departments___parentDepartment___childDepartments___jobs
  departments___parentDepartment___childDepartments___childDepartments
  departments___parentDepartment___childDepartments___id
  departments___parentDepartment___childDepartments___children
  departments___parentDepartment___id
  departments___parentDepartment___parent___id
  departments___parentDepartment___parent___children
  departments___parentDepartment___children
  departments___parentDepartment___children___id
  departments___parentDepartment___children___children
  departments___parentDepartment___internal___content
  departments___parentDepartment___internal___contentDigest
  departments___parentDepartment___internal___description
  departments___parentDepartment___internal___fieldOwners
  departments___parentDepartment___internal___ignoreType
  departments___parentDepartment___internal___mediaType
  departments___parentDepartment___internal___owner
  departments___parentDepartment___internal___type
  departments___childDepartments
  departments___childDepartments___ghId
  departments___childDepartments___name
  departments___childDepartments___jobs
  departments___childDepartments___jobs___ghId
  departments___childDepartments___jobs___title
  departments___childDepartments___jobs___boardUrl
  departments___childDepartments___jobs___content
  departments___childDepartments___jobs___updatedAt
  departments___childDepartments___jobs___questions
  departments___childDepartments___jobs___locationQuestions
  departments___childDepartments___jobs___departments
  departments___childDepartments___jobs___metadata
  departments___childDepartments___jobs___boardToken
  departments___childDepartments___jobs___childrenJobPost
  departments___childDepartments___jobs___id
  departments___childDepartments___jobs___children
  departments___childDepartments___parentDepartment___ghId
  departments___childDepartments___parentDepartment___name
  departments___childDepartments___parentDepartment___jobs
  departments___childDepartments___parentDepartment___childDepartments
  departments___childDepartments___parentDepartment___id
  departments___childDepartments___parentDepartment___children
  departments___childDepartments___childDepartments
  departments___childDepartments___childDepartments___ghId
  departments___childDepartments___childDepartments___name
  departments___childDepartments___childDepartments___jobs
  departments___childDepartments___childDepartments___childDepartments
  departments___childDepartments___childDepartments___id
  departments___childDepartments___childDepartments___children
  departments___childDepartments___id
  departments___childDepartments___parent___id
  departments___childDepartments___parent___children
  departments___childDepartments___children
  departments___childDepartments___children___id
  departments___childDepartments___children___children
  departments___childDepartments___internal___content
  departments___childDepartments___internal___contentDigest
  departments___childDepartments___internal___description
  departments___childDepartments___internal___fieldOwners
  departments___childDepartments___internal___ignoreType
  departments___childDepartments___internal___mediaType
  departments___childDepartments___internal___owner
  departments___childDepartments___internal___type
  departments___id
  departments___parent___id
  departments___parent___parent___id
  departments___parent___parent___children
  departments___parent___children
  departments___parent___children___id
  departments___parent___children___children
  departments___parent___internal___content
  departments___parent___internal___contentDigest
  departments___parent___internal___description
  departments___parent___internal___fieldOwners
  departments___parent___internal___ignoreType
  departments___parent___internal___mediaType
  departments___parent___internal___owner
  departments___parent___internal___type
  departments___children
  departments___children___id
  departments___children___parent___id
  departments___children___parent___children
  departments___children___children
  departments___children___children___id
  departments___children___children___children
  departments___children___internal___content
  departments___children___internal___contentDigest
  departments___children___internal___description
  departments___children___internal___fieldOwners
  departments___children___internal___ignoreType
  departments___children___internal___mediaType
  departments___children___internal___owner
  departments___children___internal___type
  departments___internal___content
  departments___internal___contentDigest
  departments___internal___description
  departments___internal___fieldOwners
  departments___internal___ignoreType
  departments___internal___mediaType
  departments___internal___owner
  departments___internal___type
  metadata
  metadata___id
  metadata___name
  metadata___type
  metadata___value
  boardToken
  childJobPost___slug
  childJobPost___absoluteUrl
  childJobPost___ghId
  childJobPost___parentJob___ghId
  childJobPost___parentJob___title
  childJobPost___parentJob___boardUrl
  childJobPost___parentJob___content
  childJobPost___parentJob___updatedAt
  childJobPost___parentJob___questions
  childJobPost___parentJob___questions___label
  childJobPost___parentJob___questions___required
  childJobPost___parentJob___questions___description
  childJobPost___parentJob___questions___name
  childJobPost___parentJob___locationQuestions
  childJobPost___parentJob___locationQuestions___label
  childJobPost___parentJob___locationQuestions___required
  childJobPost___parentJob___locationQuestions___description
  childJobPost___parentJob___locationQuestions___name
  childJobPost___parentJob___departments
  childJobPost___parentJob___departments___ghId
  childJobPost___parentJob___departments___name
  childJobPost___parentJob___departments___jobs
  childJobPost___parentJob___departments___childDepartments
  childJobPost___parentJob___departments___id
  childJobPost___parentJob___departments___children
  childJobPost___parentJob___metadata
  childJobPost___parentJob___metadata___id
  childJobPost___parentJob___metadata___name
  childJobPost___parentJob___metadata___type
  childJobPost___parentJob___metadata___value
  childJobPost___parentJob___boardToken
  childJobPost___parentJob___childJobPost___slug
  childJobPost___parentJob___childJobPost___absoluteUrl
  childJobPost___parentJob___childJobPost___ghId
  childJobPost___parentJob___childJobPost___updatedAt
  childJobPost___parentJob___childJobPost___validThrough
  childJobPost___parentJob___childJobPost___title
  childJobPost___parentJob___childJobPost___boardToken
  childJobPost___parentJob___childJobPost___boardUrl
  childJobPost___parentJob___childJobPost___content
  childJobPost___parentJob___childJobPost___rawContent
  childJobPost___parentJob___childJobPost___corporate
  childJobPost___parentJob___childJobPost___employmentType
  childJobPost___parentJob___childJobPost___alternativeCivilianService
  childJobPost___parentJob___childJobPost___priorExperience
  childJobPost___parentJob___childJobPost___chapter
  childJobPost___parentJob___childJobPost___keywords
  childJobPost___parentJob___childJobPost___order
  childJobPost___parentJob___childJobPost___externalUrl
  childJobPost___parentJob___childJobPost___tags
  childJobPost___parentJob___childJobPost___id
  childJobPost___parentJob___childJobPost___children
  childJobPost___parentJob___childrenJobPost
  childJobPost___parentJob___childrenJobPost___slug
  childJobPost___parentJob___childrenJobPost___absoluteUrl
  childJobPost___parentJob___childrenJobPost___ghId
  childJobPost___parentJob___childrenJobPost___updatedAt
  childJobPost___parentJob___childrenJobPost___validThrough
  childJobPost___parentJob___childrenJobPost___title
  childJobPost___parentJob___childrenJobPost___boardToken
  childJobPost___parentJob___childrenJobPost___boardUrl
  childJobPost___parentJob___childrenJobPost___content
  childJobPost___parentJob___childrenJobPost___rawContent
  childJobPost___parentJob___childrenJobPost___corporate
  childJobPost___parentJob___childrenJobPost___employmentType
  childJobPost___parentJob___childrenJobPost___alternativeCivilianService
  childJobPost___parentJob___childrenJobPost___priorExperience
  childJobPost___parentJob___childrenJobPost___chapter
  childJobPost___parentJob___childrenJobPost___keywords
  childJobPost___parentJob___childrenJobPost___order
  childJobPost___parentJob___childrenJobPost___externalUrl
  childJobPost___parentJob___childrenJobPost___tags
  childJobPost___parentJob___childrenJobPost___id
  childJobPost___parentJob___childrenJobPost___children
  childJobPost___parentJob___id
  childJobPost___parentJob___parent___id
  childJobPost___parentJob___parent___children
  childJobPost___parentJob___children
  childJobPost___parentJob___children___id
  childJobPost___parentJob___children___children
  childJobPost___parentJob___internal___content
  childJobPost___parentJob___internal___contentDigest
  childJobPost___parentJob___internal___description
  childJobPost___parentJob___internal___fieldOwners
  childJobPost___parentJob___internal___ignoreType
  childJobPost___parentJob___internal___mediaType
  childJobPost___parentJob___internal___owner
  childJobPost___parentJob___internal___type
  childJobPost___updatedAt
  childJobPost___validThrough
  childJobPost___title
  childJobPost___boardToken
  childJobPost___boardUrl
  childJobPost___content
  childJobPost___content___title
  childJobPost___content___level
  childJobPost___content___bodyHtml
  childJobPost___rawContent
  childJobPost___corporate
  childJobPost___employmentType
  childJobPost___alternativeCivilianService
  childJobPost___priorExperience
  childJobPost___chapter
  childJobPost___keywords
  childJobPost___order
  childJobPost___externalUrl
  childJobPost___tags
  childJobPost___id
  childJobPost___parent___id
  childJobPost___parent___parent___id
  childJobPost___parent___parent___children
  childJobPost___parent___children
  childJobPost___parent___children___id
  childJobPost___parent___children___children
  childJobPost___parent___internal___content
  childJobPost___parent___internal___contentDigest
  childJobPost___parent___internal___description
  childJobPost___parent___internal___fieldOwners
  childJobPost___parent___internal___ignoreType
  childJobPost___parent___internal___mediaType
  childJobPost___parent___internal___owner
  childJobPost___parent___internal___type
  childJobPost___children
  childJobPost___children___id
  childJobPost___children___parent___id
  childJobPost___children___parent___children
  childJobPost___children___children
  childJobPost___children___children___id
  childJobPost___children___children___children
  childJobPost___children___internal___content
  childJobPost___children___internal___contentDigest
  childJobPost___children___internal___description
  childJobPost___children___internal___fieldOwners
  childJobPost___children___internal___ignoreType
  childJobPost___children___internal___mediaType
  childJobPost___children___internal___owner
  childJobPost___children___internal___type
  childJobPost___internal___content
  childJobPost___internal___contentDigest
  childJobPost___internal___description
  childJobPost___internal___fieldOwners
  childJobPost___internal___ignoreType
  childJobPost___internal___mediaType
  childJobPost___internal___owner
  childJobPost___internal___type
  childrenJobPost
  childrenJobPost___slug
  childrenJobPost___absoluteUrl
  childrenJobPost___ghId
  childrenJobPost___parentJob___ghId
  childrenJobPost___parentJob___title
  childrenJobPost___parentJob___boardUrl
  childrenJobPost___parentJob___content
  childrenJobPost___parentJob___updatedAt
  childrenJobPost___parentJob___questions
  childrenJobPost___parentJob___questions___label
  childrenJobPost___parentJob___questions___required
  childrenJobPost___parentJob___questions___description
  childrenJobPost___parentJob___questions___name
  childrenJobPost___parentJob___locationQuestions
  childrenJobPost___parentJob___locationQuestions___label
  childrenJobPost___parentJob___locationQuestions___required
  childrenJobPost___parentJob___locationQuestions___description
  childrenJobPost___parentJob___locationQuestions___name
  childrenJobPost___parentJob___departments
  childrenJobPost___parentJob___departments___ghId
  childrenJobPost___parentJob___departments___name
  childrenJobPost___parentJob___departments___jobs
  childrenJobPost___parentJob___departments___childDepartments
  childrenJobPost___parentJob___departments___id
  childrenJobPost___parentJob___departments___children
  childrenJobPost___parentJob___metadata
  childrenJobPost___parentJob___metadata___id
  childrenJobPost___parentJob___metadata___name
  childrenJobPost___parentJob___metadata___type
  childrenJobPost___parentJob___metadata___value
  childrenJobPost___parentJob___boardToken
  childrenJobPost___parentJob___childJobPost___slug
  childrenJobPost___parentJob___childJobPost___absoluteUrl
  childrenJobPost___parentJob___childJobPost___ghId
  childrenJobPost___parentJob___childJobPost___updatedAt
  childrenJobPost___parentJob___childJobPost___validThrough
  childrenJobPost___parentJob___childJobPost___title
  childrenJobPost___parentJob___childJobPost___boardToken
  childrenJobPost___parentJob___childJobPost___boardUrl
  childrenJobPost___parentJob___childJobPost___content
  childrenJobPost___parentJob___childJobPost___rawContent
  childrenJobPost___parentJob___childJobPost___corporate
  childrenJobPost___parentJob___childJobPost___employmentType
  childrenJobPost___parentJob___childJobPost___alternativeCivilianService
  childrenJobPost___parentJob___childJobPost___priorExperience
  childrenJobPost___parentJob___childJobPost___chapter
  childrenJobPost___parentJob___childJobPost___keywords
  childrenJobPost___parentJob___childJobPost___order
  childrenJobPost___parentJob___childJobPost___externalUrl
  childrenJobPost___parentJob___childJobPost___tags
  childrenJobPost___parentJob___childJobPost___id
  childrenJobPost___parentJob___childJobPost___children
  childrenJobPost___parentJob___childrenJobPost
  childrenJobPost___parentJob___childrenJobPost___slug
  childrenJobPost___parentJob___childrenJobPost___absoluteUrl
  childrenJobPost___parentJob___childrenJobPost___ghId
  childrenJobPost___parentJob___childrenJobPost___updatedAt
  childrenJobPost___parentJob___childrenJobPost___validThrough
  childrenJobPost___parentJob___childrenJobPost___title
  childrenJobPost___parentJob___childrenJobPost___boardToken
  childrenJobPost___parentJob___childrenJobPost___boardUrl
  childrenJobPost___parentJob___childrenJobPost___content
  childrenJobPost___parentJob___childrenJobPost___rawContent
  childrenJobPost___parentJob___childrenJobPost___corporate
  childrenJobPost___parentJob___childrenJobPost___employmentType
  childrenJobPost___parentJob___childrenJobPost___alternativeCivilianService
  childrenJobPost___parentJob___childrenJobPost___priorExperience
  childrenJobPost___parentJob___childrenJobPost___chapter
  childrenJobPost___parentJob___childrenJobPost___keywords
  childrenJobPost___parentJob___childrenJobPost___order
  childrenJobPost___parentJob___childrenJobPost___externalUrl
  childrenJobPost___parentJob___childrenJobPost___tags
  childrenJobPost___parentJob___childrenJobPost___id
  childrenJobPost___parentJob___childrenJobPost___children
  childrenJobPost___parentJob___id
  childrenJobPost___parentJob___parent___id
  childrenJobPost___parentJob___parent___children
  childrenJobPost___parentJob___children
  childrenJobPost___parentJob___children___id
  childrenJobPost___parentJob___children___children
  childrenJobPost___parentJob___internal___content
  childrenJobPost___parentJob___internal___contentDigest
  childrenJobPost___parentJob___internal___description
  childrenJobPost___parentJob___internal___fieldOwners
  childrenJobPost___parentJob___internal___ignoreType
  childrenJobPost___parentJob___internal___mediaType
  childrenJobPost___parentJob___internal___owner
  childrenJobPost___parentJob___internal___type
  childrenJobPost___updatedAt
  childrenJobPost___validThrough
  childrenJobPost___title
  childrenJobPost___boardToken
  childrenJobPost___boardUrl
  childrenJobPost___content
  childrenJobPost___content___title
  childrenJobPost___content___level
  childrenJobPost___content___bodyHtml
  childrenJobPost___rawContent
  childrenJobPost___corporate
  childrenJobPost___employmentType
  childrenJobPost___alternativeCivilianService
  childrenJobPost___priorExperience
  childrenJobPost___chapter
  childrenJobPost___keywords
  childrenJobPost___order
  childrenJobPost___externalUrl
  childrenJobPost___tags
  childrenJobPost___id
  childrenJobPost___parent___id
  childrenJobPost___parent___parent___id
  childrenJobPost___parent___parent___children
  childrenJobPost___parent___children
  childrenJobPost___parent___children___id
  childrenJobPost___parent___children___children
  childrenJobPost___parent___internal___content
  childrenJobPost___parent___internal___contentDigest
  childrenJobPost___parent___internal___description
  childrenJobPost___parent___internal___fieldOwners
  childrenJobPost___parent___internal___ignoreType
  childrenJobPost___parent___internal___mediaType
  childrenJobPost___parent___internal___owner
  childrenJobPost___parent___internal___type
  childrenJobPost___children
  childrenJobPost___children___id
  childrenJobPost___children___parent___id
  childrenJobPost___children___parent___children
  childrenJobPost___children___children
  childrenJobPost___children___children___id
  childrenJobPost___children___children___children
  childrenJobPost___children___internal___content
  childrenJobPost___children___internal___contentDigest
  childrenJobPost___children___internal___description
  childrenJobPost___children___internal___fieldOwners
  childrenJobPost___children___internal___ignoreType
  childrenJobPost___children___internal___mediaType
  childrenJobPost___children___internal___owner
  childrenJobPost___children___internal___type
  childrenJobPost___internal___content
  childrenJobPost___internal___contentDigest
  childrenJobPost___internal___description
  childrenJobPost___internal___fieldOwners
  childrenJobPost___internal___ignoreType
  childrenJobPost___internal___mediaType
  childrenJobPost___internal___owner
  childrenJobPost___internal___type
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type GreenhouseJobBoardJobGroupConnection {
  totalCount: Int!
  edges: [GreenhouseJobBoardJobEdge!]!
  nodes: [GreenhouseJobBoardJob!]!
  pageInfo: PageInfo!
  distinct(field: GreenhouseJobBoardJobFieldsEnum!): [String!]!
  max(field: GreenhouseJobBoardJobFieldsEnum!): Float
  min(field: GreenhouseJobBoardJobFieldsEnum!): Float
  sum(field: GreenhouseJobBoardJobFieldsEnum!): Float
  group(skip: Int, limit: Int, field: GreenhouseJobBoardJobFieldsEnum!): [GreenhouseJobBoardJobGroupConnection!]!
  field: String!
  fieldValue: String
}

input GreenhouseJobBoardJobSortInput {
  fields: [GreenhouseJobBoardJobFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type GreenhouseJobBoardDepartmentConnection {
  totalCount: Int!
  edges: [GreenhouseJobBoardDepartmentEdge!]!
  nodes: [GreenhouseJobBoardDepartment!]!
  pageInfo: PageInfo!
  distinct(field: GreenhouseJobBoardDepartmentFieldsEnum!): [String!]!
  max(field: GreenhouseJobBoardDepartmentFieldsEnum!): Float
  min(field: GreenhouseJobBoardDepartmentFieldsEnum!): Float
  sum(field: GreenhouseJobBoardDepartmentFieldsEnum!): Float
  group(skip: Int, limit: Int, field: GreenhouseJobBoardDepartmentFieldsEnum!): [GreenhouseJobBoardDepartmentGroupConnection!]!
}

type GreenhouseJobBoardDepartmentEdge {
  next: GreenhouseJobBoardDepartment
  node: GreenhouseJobBoardDepartment!
  previous: GreenhouseJobBoardDepartment
}

enum GreenhouseJobBoardDepartmentFieldsEnum {
  ghId
  name
  jobs
  jobs___ghId
  jobs___title
  jobs___boardUrl
  jobs___content
  jobs___updatedAt
  jobs___questions
  jobs___questions___label
  jobs___questions___required
  jobs___questions___description
  jobs___questions___name
  jobs___locationQuestions
  jobs___locationQuestions___label
  jobs___locationQuestions___required
  jobs___locationQuestions___description
  jobs___locationQuestions___name
  jobs___departments
  jobs___departments___ghId
  jobs___departments___name
  jobs___departments___jobs
  jobs___departments___jobs___ghId
  jobs___departments___jobs___title
  jobs___departments___jobs___boardUrl
  jobs___departments___jobs___content
  jobs___departments___jobs___updatedAt
  jobs___departments___jobs___questions
  jobs___departments___jobs___locationQuestions
  jobs___departments___jobs___departments
  jobs___departments___jobs___metadata
  jobs___departments___jobs___boardToken
  jobs___departments___jobs___childrenJobPost
  jobs___departments___jobs___id
  jobs___departments___jobs___children
  jobs___departments___parentDepartment___ghId
  jobs___departments___parentDepartment___name
  jobs___departments___parentDepartment___jobs
  jobs___departments___parentDepartment___childDepartments
  jobs___departments___parentDepartment___id
  jobs___departments___parentDepartment___children
  jobs___departments___childDepartments
  jobs___departments___childDepartments___ghId
  jobs___departments___childDepartments___name
  jobs___departments___childDepartments___jobs
  jobs___departments___childDepartments___childDepartments
  jobs___departments___childDepartments___id
  jobs___departments___childDepartments___children
  jobs___departments___id
  jobs___departments___parent___id
  jobs___departments___parent___children
  jobs___departments___children
  jobs___departments___children___id
  jobs___departments___children___children
  jobs___departments___internal___content
  jobs___departments___internal___contentDigest
  jobs___departments___internal___description
  jobs___departments___internal___fieldOwners
  jobs___departments___internal___ignoreType
  jobs___departments___internal___mediaType
  jobs___departments___internal___owner
  jobs___departments___internal___type
  jobs___metadata
  jobs___metadata___id
  jobs___metadata___name
  jobs___metadata___type
  jobs___metadata___value
  jobs___boardToken
  jobs___childJobPost___slug
  jobs___childJobPost___absoluteUrl
  jobs___childJobPost___ghId
  jobs___childJobPost___parentJob___ghId
  jobs___childJobPost___parentJob___title
  jobs___childJobPost___parentJob___boardUrl
  jobs___childJobPost___parentJob___content
  jobs___childJobPost___parentJob___updatedAt
  jobs___childJobPost___parentJob___questions
  jobs___childJobPost___parentJob___locationQuestions
  jobs___childJobPost___parentJob___departments
  jobs___childJobPost___parentJob___metadata
  jobs___childJobPost___parentJob___boardToken
  jobs___childJobPost___parentJob___childrenJobPost
  jobs___childJobPost___parentJob___id
  jobs___childJobPost___parentJob___children
  jobs___childJobPost___updatedAt
  jobs___childJobPost___validThrough
  jobs___childJobPost___title
  jobs___childJobPost___boardToken
  jobs___childJobPost___boardUrl
  jobs___childJobPost___content
  jobs___childJobPost___content___title
  jobs___childJobPost___content___level
  jobs___childJobPost___content___bodyHtml
  jobs___childJobPost___rawContent
  jobs___childJobPost___corporate
  jobs___childJobPost___employmentType
  jobs___childJobPost___alternativeCivilianService
  jobs___childJobPost___priorExperience
  jobs___childJobPost___chapter
  jobs___childJobPost___keywords
  jobs___childJobPost___order
  jobs___childJobPost___externalUrl
  jobs___childJobPost___tags
  jobs___childJobPost___id
  jobs___childJobPost___parent___id
  jobs___childJobPost___parent___children
  jobs___childJobPost___children
  jobs___childJobPost___children___id
  jobs___childJobPost___children___children
  jobs___childJobPost___internal___content
  jobs___childJobPost___internal___contentDigest
  jobs___childJobPost___internal___description
  jobs___childJobPost___internal___fieldOwners
  jobs___childJobPost___internal___ignoreType
  jobs___childJobPost___internal___mediaType
  jobs___childJobPost___internal___owner
  jobs___childJobPost___internal___type
  jobs___childrenJobPost
  jobs___childrenJobPost___slug
  jobs___childrenJobPost___absoluteUrl
  jobs___childrenJobPost___ghId
  jobs___childrenJobPost___parentJob___ghId
  jobs___childrenJobPost___parentJob___title
  jobs___childrenJobPost___parentJob___boardUrl
  jobs___childrenJobPost___parentJob___content
  jobs___childrenJobPost___parentJob___updatedAt
  jobs___childrenJobPost___parentJob___questions
  jobs___childrenJobPost___parentJob___locationQuestions
  jobs___childrenJobPost___parentJob___departments
  jobs___childrenJobPost___parentJob___metadata
  jobs___childrenJobPost___parentJob___boardToken
  jobs___childrenJobPost___parentJob___childrenJobPost
  jobs___childrenJobPost___parentJob___id
  jobs___childrenJobPost___parentJob___children
  jobs___childrenJobPost___updatedAt
  jobs___childrenJobPost___validThrough
  jobs___childrenJobPost___title
  jobs___childrenJobPost___boardToken
  jobs___childrenJobPost___boardUrl
  jobs___childrenJobPost___content
  jobs___childrenJobPost___content___title
  jobs___childrenJobPost___content___level
  jobs___childrenJobPost___content___bodyHtml
  jobs___childrenJobPost___rawContent
  jobs___childrenJobPost___corporate
  jobs___childrenJobPost___employmentType
  jobs___childrenJobPost___alternativeCivilianService
  jobs___childrenJobPost___priorExperience
  jobs___childrenJobPost___chapter
  jobs___childrenJobPost___keywords
  jobs___childrenJobPost___order
  jobs___childrenJobPost___externalUrl
  jobs___childrenJobPost___tags
  jobs___childrenJobPost___id
  jobs___childrenJobPost___parent___id
  jobs___childrenJobPost___parent___children
  jobs___childrenJobPost___children
  jobs___childrenJobPost___children___id
  jobs___childrenJobPost___children___children
  jobs___childrenJobPost___internal___content
  jobs___childrenJobPost___internal___contentDigest
  jobs___childrenJobPost___internal___description
  jobs___childrenJobPost___internal___fieldOwners
  jobs___childrenJobPost___internal___ignoreType
  jobs___childrenJobPost___internal___mediaType
  jobs___childrenJobPost___internal___owner
  jobs___childrenJobPost___internal___type
  jobs___id
  jobs___parent___id
  jobs___parent___parent___id
  jobs___parent___parent___children
  jobs___parent___children
  jobs___parent___children___id
  jobs___parent___children___children
  jobs___parent___internal___content
  jobs___parent___internal___contentDigest
  jobs___parent___internal___description
  jobs___parent___internal___fieldOwners
  jobs___parent___internal___ignoreType
  jobs___parent___internal___mediaType
  jobs___parent___internal___owner
  jobs___parent___internal___type
  jobs___children
  jobs___children___id
  jobs___children___parent___id
  jobs___children___parent___children
  jobs___children___children
  jobs___children___children___id
  jobs___children___children___children
  jobs___children___internal___content
  jobs___children___internal___contentDigest
  jobs___children___internal___description
  jobs___children___internal___fieldOwners
  jobs___children___internal___ignoreType
  jobs___children___internal___mediaType
  jobs___children___internal___owner
  jobs___children___internal___type
  jobs___internal___content
  jobs___internal___contentDigest
  jobs___internal___description
  jobs___internal___fieldOwners
  jobs___internal___ignoreType
  jobs___internal___mediaType
  jobs___internal___owner
  jobs___internal___type
  parentDepartment___ghId
  parentDepartment___name
  parentDepartment___jobs
  parentDepartment___jobs___ghId
  parentDepartment___jobs___title
  parentDepartment___jobs___boardUrl
  parentDepartment___jobs___content
  parentDepartment___jobs___updatedAt
  parentDepartment___jobs___questions
  parentDepartment___jobs___questions___label
  parentDepartment___jobs___questions___required
  parentDepartment___jobs___questions___description
  parentDepartment___jobs___questions___name
  parentDepartment___jobs___locationQuestions
  parentDepartment___jobs___locationQuestions___label
  parentDepartment___jobs___locationQuestions___required
  parentDepartment___jobs___locationQuestions___description
  parentDepartment___jobs___locationQuestions___name
  parentDepartment___jobs___departments
  parentDepartment___jobs___departments___ghId
  parentDepartment___jobs___departments___name
  parentDepartment___jobs___departments___jobs
  parentDepartment___jobs___departments___childDepartments
  parentDepartment___jobs___departments___id
  parentDepartment___jobs___departments___children
  parentDepartment___jobs___metadata
  parentDepartment___jobs___metadata___id
  parentDepartment___jobs___metadata___name
  parentDepartment___jobs___metadata___type
  parentDepartment___jobs___metadata___value
  parentDepartment___jobs___boardToken
  parentDepartment___jobs___childJobPost___slug
  parentDepartment___jobs___childJobPost___absoluteUrl
  parentDepartment___jobs___childJobPost___ghId
  parentDepartment___jobs___childJobPost___updatedAt
  parentDepartment___jobs___childJobPost___validThrough
  parentDepartment___jobs___childJobPost___title
  parentDepartment___jobs___childJobPost___boardToken
  parentDepartment___jobs___childJobPost___boardUrl
  parentDepartment___jobs___childJobPost___content
  parentDepartment___jobs___childJobPost___rawContent
  parentDepartment___jobs___childJobPost___corporate
  parentDepartment___jobs___childJobPost___employmentType
  parentDepartment___jobs___childJobPost___alternativeCivilianService
  parentDepartment___jobs___childJobPost___priorExperience
  parentDepartment___jobs___childJobPost___chapter
  parentDepartment___jobs___childJobPost___keywords
  parentDepartment___jobs___childJobPost___order
  parentDepartment___jobs___childJobPost___externalUrl
  parentDepartment___jobs___childJobPost___tags
  parentDepartment___jobs___childJobPost___id
  parentDepartment___jobs___childJobPost___children
  parentDepartment___jobs___childrenJobPost
  parentDepartment___jobs___childrenJobPost___slug
  parentDepartment___jobs___childrenJobPost___absoluteUrl
  parentDepartment___jobs___childrenJobPost___ghId
  parentDepartment___jobs___childrenJobPost___updatedAt
  parentDepartment___jobs___childrenJobPost___validThrough
  parentDepartment___jobs___childrenJobPost___title
  parentDepartment___jobs___childrenJobPost___boardToken
  parentDepartment___jobs___childrenJobPost___boardUrl
  parentDepartment___jobs___childrenJobPost___content
  parentDepartment___jobs___childrenJobPost___rawContent
  parentDepartment___jobs___childrenJobPost___corporate
  parentDepartment___jobs___childrenJobPost___employmentType
  parentDepartment___jobs___childrenJobPost___alternativeCivilianService
  parentDepartment___jobs___childrenJobPost___priorExperience
  parentDepartment___jobs___childrenJobPost___chapter
  parentDepartment___jobs___childrenJobPost___keywords
  parentDepartment___jobs___childrenJobPost___order
  parentDepartment___jobs___childrenJobPost___externalUrl
  parentDepartment___jobs___childrenJobPost___tags
  parentDepartment___jobs___childrenJobPost___id
  parentDepartment___jobs___childrenJobPost___children
  parentDepartment___jobs___id
  parentDepartment___jobs___parent___id
  parentDepartment___jobs___parent___children
  parentDepartment___jobs___children
  parentDepartment___jobs___children___id
  parentDepartment___jobs___children___children
  parentDepartment___jobs___internal___content
  parentDepartment___jobs___internal___contentDigest
  parentDepartment___jobs___internal___description
  parentDepartment___jobs___internal___fieldOwners
  parentDepartment___jobs___internal___ignoreType
  parentDepartment___jobs___internal___mediaType
  parentDepartment___jobs___internal___owner
  parentDepartment___jobs___internal___type
  parentDepartment___parentDepartment___ghId
  parentDepartment___parentDepartment___name
  parentDepartment___parentDepartment___jobs
  parentDepartment___parentDepartment___jobs___ghId
  parentDepartment___parentDepartment___jobs___title
  parentDepartment___parentDepartment___jobs___boardUrl
  parentDepartment___parentDepartment___jobs___content
  parentDepartment___parentDepartment___jobs___updatedAt
  parentDepartment___parentDepartment___jobs___questions
  parentDepartment___parentDepartment___jobs___locationQuestions
  parentDepartment___parentDepartment___jobs___departments
  parentDepartment___parentDepartment___jobs___metadata
  parentDepartment___parentDepartment___jobs___boardToken
  parentDepartment___parentDepartment___jobs___childrenJobPost
  parentDepartment___parentDepartment___jobs___id
  parentDepartment___parentDepartment___jobs___children
  parentDepartment___parentDepartment___parentDepartment___ghId
  parentDepartment___parentDepartment___parentDepartment___name
  parentDepartment___parentDepartment___parentDepartment___jobs
  parentDepartment___parentDepartment___parentDepartment___childDepartments
  parentDepartment___parentDepartment___parentDepartment___id
  parentDepartment___parentDepartment___parentDepartment___children
  parentDepartment___parentDepartment___childDepartments
  parentDepartment___parentDepartment___childDepartments___ghId
  parentDepartment___parentDepartment___childDepartments___name
  parentDepartment___parentDepartment___childDepartments___jobs
  parentDepartment___parentDepartment___childDepartments___childDepartments
  parentDepartment___parentDepartment___childDepartments___id
  parentDepartment___parentDepartment___childDepartments___children
  parentDepartment___parentDepartment___id
  parentDepartment___parentDepartment___parent___id
  parentDepartment___parentDepartment___parent___children
  parentDepartment___parentDepartment___children
  parentDepartment___parentDepartment___children___id
  parentDepartment___parentDepartment___children___children
  parentDepartment___parentDepartment___internal___content
  parentDepartment___parentDepartment___internal___contentDigest
  parentDepartment___parentDepartment___internal___description
  parentDepartment___parentDepartment___internal___fieldOwners
  parentDepartment___parentDepartment___internal___ignoreType
  parentDepartment___parentDepartment___internal___mediaType
  parentDepartment___parentDepartment___internal___owner
  parentDepartment___parentDepartment___internal___type
  parentDepartment___childDepartments
  parentDepartment___childDepartments___ghId
  parentDepartment___childDepartments___name
  parentDepartment___childDepartments___jobs
  parentDepartment___childDepartments___jobs___ghId
  parentDepartment___childDepartments___jobs___title
  parentDepartment___childDepartments___jobs___boardUrl
  parentDepartment___childDepartments___jobs___content
  parentDepartment___childDepartments___jobs___updatedAt
  parentDepartment___childDepartments___jobs___questions
  parentDepartment___childDepartments___jobs___locationQuestions
  parentDepartment___childDepartments___jobs___departments
  parentDepartment___childDepartments___jobs___metadata
  parentDepartment___childDepartments___jobs___boardToken
  parentDepartment___childDepartments___jobs___childrenJobPost
  parentDepartment___childDepartments___jobs___id
  parentDepartment___childDepartments___jobs___children
  parentDepartment___childDepartments___parentDepartment___ghId
  parentDepartment___childDepartments___parentDepartment___name
  parentDepartment___childDepartments___parentDepartment___jobs
  parentDepartment___childDepartments___parentDepartment___childDepartments
  parentDepartment___childDepartments___parentDepartment___id
  parentDepartment___childDepartments___parentDepartment___children
  parentDepartment___childDepartments___childDepartments
  parentDepartment___childDepartments___childDepartments___ghId
  parentDepartment___childDepartments___childDepartments___name
  parentDepartment___childDepartments___childDepartments___jobs
  parentDepartment___childDepartments___childDepartments___childDepartments
  parentDepartment___childDepartments___childDepartments___id
  parentDepartment___childDepartments___childDepartments___children
  parentDepartment___childDepartments___id
  parentDepartment___childDepartments___parent___id
  parentDepartment___childDepartments___parent___children
  parentDepartment___childDepartments___children
  parentDepartment___childDepartments___children___id
  parentDepartment___childDepartments___children___children
  parentDepartment___childDepartments___internal___content
  parentDepartment___childDepartments___internal___contentDigest
  parentDepartment___childDepartments___internal___description
  parentDepartment___childDepartments___internal___fieldOwners
  parentDepartment___childDepartments___internal___ignoreType
  parentDepartment___childDepartments___internal___mediaType
  parentDepartment___childDepartments___internal___owner
  parentDepartment___childDepartments___internal___type
  parentDepartment___id
  parentDepartment___parent___id
  parentDepartment___parent___parent___id
  parentDepartment___parent___parent___children
  parentDepartment___parent___children
  parentDepartment___parent___children___id
  parentDepartment___parent___children___children
  parentDepartment___parent___internal___content
  parentDepartment___parent___internal___contentDigest
  parentDepartment___parent___internal___description
  parentDepartment___parent___internal___fieldOwners
  parentDepartment___parent___internal___ignoreType
  parentDepartment___parent___internal___mediaType
  parentDepartment___parent___internal___owner
  parentDepartment___parent___internal___type
  parentDepartment___children
  parentDepartment___children___id
  parentDepartment___children___parent___id
  parentDepartment___children___parent___children
  parentDepartment___children___children
  parentDepartment___children___children___id
  parentDepartment___children___children___children
  parentDepartment___children___internal___content
  parentDepartment___children___internal___contentDigest
  parentDepartment___children___internal___description
  parentDepartment___children___internal___fieldOwners
  parentDepartment___children___internal___ignoreType
  parentDepartment___children___internal___mediaType
  parentDepartment___children___internal___owner
  parentDepartment___children___internal___type
  parentDepartment___internal___content
  parentDepartment___internal___contentDigest
  parentDepartment___internal___description
  parentDepartment___internal___fieldOwners
  parentDepartment___internal___ignoreType
  parentDepartment___internal___mediaType
  parentDepartment___internal___owner
  parentDepartment___internal___type
  childDepartments
  childDepartments___ghId
  childDepartments___name
  childDepartments___jobs
  childDepartments___jobs___ghId
  childDepartments___jobs___title
  childDepartments___jobs___boardUrl
  childDepartments___jobs___content
  childDepartments___jobs___updatedAt
  childDepartments___jobs___questions
  childDepartments___jobs___questions___label
  childDepartments___jobs___questions___required
  childDepartments___jobs___questions___description
  childDepartments___jobs___questions___name
  childDepartments___jobs___locationQuestions
  childDepartments___jobs___locationQuestions___label
  childDepartments___jobs___locationQuestions___required
  childDepartments___jobs___locationQuestions___description
  childDepartments___jobs___locationQuestions___name
  childDepartments___jobs___departments
  childDepartments___jobs___departments___ghId
  childDepartments___jobs___departments___name
  childDepartments___jobs___departments___jobs
  childDepartments___jobs___departments___childDepartments
  childDepartments___jobs___departments___id
  childDepartments___jobs___departments___children
  childDepartments___jobs___metadata
  childDepartments___jobs___metadata___id
  childDepartments___jobs___metadata___name
  childDepartments___jobs___metadata___type
  childDepartments___jobs___metadata___value
  childDepartments___jobs___boardToken
  childDepartments___jobs___childJobPost___slug
  childDepartments___jobs___childJobPost___absoluteUrl
  childDepartments___jobs___childJobPost___ghId
  childDepartments___jobs___childJobPost___updatedAt
  childDepartments___jobs___childJobPost___validThrough
  childDepartments___jobs___childJobPost___title
  childDepartments___jobs___childJobPost___boardToken
  childDepartments___jobs___childJobPost___boardUrl
  childDepartments___jobs___childJobPost___content
  childDepartments___jobs___childJobPost___rawContent
  childDepartments___jobs___childJobPost___corporate
  childDepartments___jobs___childJobPost___employmentType
  childDepartments___jobs___childJobPost___alternativeCivilianService
  childDepartments___jobs___childJobPost___priorExperience
  childDepartments___jobs___childJobPost___chapter
  childDepartments___jobs___childJobPost___keywords
  childDepartments___jobs___childJobPost___order
  childDepartments___jobs___childJobPost___externalUrl
  childDepartments___jobs___childJobPost___tags
  childDepartments___jobs___childJobPost___id
  childDepartments___jobs___childJobPost___children
  childDepartments___jobs___childrenJobPost
  childDepartments___jobs___childrenJobPost___slug
  childDepartments___jobs___childrenJobPost___absoluteUrl
  childDepartments___jobs___childrenJobPost___ghId
  childDepartments___jobs___childrenJobPost___updatedAt
  childDepartments___jobs___childrenJobPost___validThrough
  childDepartments___jobs___childrenJobPost___title
  childDepartments___jobs___childrenJobPost___boardToken
  childDepartments___jobs___childrenJobPost___boardUrl
  childDepartments___jobs___childrenJobPost___content
  childDepartments___jobs___childrenJobPost___rawContent
  childDepartments___jobs___childrenJobPost___corporate
  childDepartments___jobs___childrenJobPost___employmentType
  childDepartments___jobs___childrenJobPost___alternativeCivilianService
  childDepartments___jobs___childrenJobPost___priorExperience
  childDepartments___jobs___childrenJobPost___chapter
  childDepartments___jobs___childrenJobPost___keywords
  childDepartments___jobs___childrenJobPost___order
  childDepartments___jobs___childrenJobPost___externalUrl
  childDepartments___jobs___childrenJobPost___tags
  childDepartments___jobs___childrenJobPost___id
  childDepartments___jobs___childrenJobPost___children
  childDepartments___jobs___id
  childDepartments___jobs___parent___id
  childDepartments___jobs___parent___children
  childDepartments___jobs___children
  childDepartments___jobs___children___id
  childDepartments___jobs___children___children
  childDepartments___jobs___internal___content
  childDepartments___jobs___internal___contentDigest
  childDepartments___jobs___internal___description
  childDepartments___jobs___internal___fieldOwners
  childDepartments___jobs___internal___ignoreType
  childDepartments___jobs___internal___mediaType
  childDepartments___jobs___internal___owner
  childDepartments___jobs___internal___type
  childDepartments___parentDepartment___ghId
  childDepartments___parentDepartment___name
  childDepartments___parentDepartment___jobs
  childDepartments___parentDepartment___jobs___ghId
  childDepartments___parentDepartment___jobs___title
  childDepartments___parentDepartment___jobs___boardUrl
  childDepartments___parentDepartment___jobs___content
  childDepartments___parentDepartment___jobs___updatedAt
  childDepartments___parentDepartment___jobs___questions
  childDepartments___parentDepartment___jobs___locationQuestions
  childDepartments___parentDepartment___jobs___departments
  childDepartments___parentDepartment___jobs___metadata
  childDepartments___parentDepartment___jobs___boardToken
  childDepartments___parentDepartment___jobs___childrenJobPost
  childDepartments___parentDepartment___jobs___id
  childDepartments___parentDepartment___jobs___children
  childDepartments___parentDepartment___parentDepartment___ghId
  childDepartments___parentDepartment___parentDepartment___name
  childDepartments___parentDepartment___parentDepartment___jobs
  childDepartments___parentDepartment___parentDepartment___childDepartments
  childDepartments___parentDepartment___parentDepartment___id
  childDepartments___parentDepartment___parentDepartment___children
  childDepartments___parentDepartment___childDepartments
  childDepartments___parentDepartment___childDepartments___ghId
  childDepartments___parentDepartment___childDepartments___name
  childDepartments___parentDepartment___childDepartments___jobs
  childDepartments___parentDepartment___childDepartments___childDepartments
  childDepartments___parentDepartment___childDepartments___id
  childDepartments___parentDepartment___childDepartments___children
  childDepartments___parentDepartment___id
  childDepartments___parentDepartment___parent___id
  childDepartments___parentDepartment___parent___children
  childDepartments___parentDepartment___children
  childDepartments___parentDepartment___children___id
  childDepartments___parentDepartment___children___children
  childDepartments___parentDepartment___internal___content
  childDepartments___parentDepartment___internal___contentDigest
  childDepartments___parentDepartment___internal___description
  childDepartments___parentDepartment___internal___fieldOwners
  childDepartments___parentDepartment___internal___ignoreType
  childDepartments___parentDepartment___internal___mediaType
  childDepartments___parentDepartment___internal___owner
  childDepartments___parentDepartment___internal___type
  childDepartments___childDepartments
  childDepartments___childDepartments___ghId
  childDepartments___childDepartments___name
  childDepartments___childDepartments___jobs
  childDepartments___childDepartments___jobs___ghId
  childDepartments___childDepartments___jobs___title
  childDepartments___childDepartments___jobs___boardUrl
  childDepartments___childDepartments___jobs___content
  childDepartments___childDepartments___jobs___updatedAt
  childDepartments___childDepartments___jobs___questions
  childDepartments___childDepartments___jobs___locationQuestions
  childDepartments___childDepartments___jobs___departments
  childDepartments___childDepartments___jobs___metadata
  childDepartments___childDepartments___jobs___boardToken
  childDepartments___childDepartments___jobs___childrenJobPost
  childDepartments___childDepartments___jobs___id
  childDepartments___childDepartments___jobs___children
  childDepartments___childDepartments___parentDepartment___ghId
  childDepartments___childDepartments___parentDepartment___name
  childDepartments___childDepartments___parentDepartment___jobs
  childDepartments___childDepartments___parentDepartment___childDepartments
  childDepartments___childDepartments___parentDepartment___id
  childDepartments___childDepartments___parentDepartment___children
  childDepartments___childDepartments___childDepartments
  childDepartments___childDepartments___childDepartments___ghId
  childDepartments___childDepartments___childDepartments___name
  childDepartments___childDepartments___childDepartments___jobs
  childDepartments___childDepartments___childDepartments___childDepartments
  childDepartments___childDepartments___childDepartments___id
  childDepartments___childDepartments___childDepartments___children
  childDepartments___childDepartments___id
  childDepartments___childDepartments___parent___id
  childDepartments___childDepartments___parent___children
  childDepartments___childDepartments___children
  childDepartments___childDepartments___children___id
  childDepartments___childDepartments___children___children
  childDepartments___childDepartments___internal___content
  childDepartments___childDepartments___internal___contentDigest
  childDepartments___childDepartments___internal___description
  childDepartments___childDepartments___internal___fieldOwners
  childDepartments___childDepartments___internal___ignoreType
  childDepartments___childDepartments___internal___mediaType
  childDepartments___childDepartments___internal___owner
  childDepartments___childDepartments___internal___type
  childDepartments___id
  childDepartments___parent___id
  childDepartments___parent___parent___id
  childDepartments___parent___parent___children
  childDepartments___parent___children
  childDepartments___parent___children___id
  childDepartments___parent___children___children
  childDepartments___parent___internal___content
  childDepartments___parent___internal___contentDigest
  childDepartments___parent___internal___description
  childDepartments___parent___internal___fieldOwners
  childDepartments___parent___internal___ignoreType
  childDepartments___parent___internal___mediaType
  childDepartments___parent___internal___owner
  childDepartments___parent___internal___type
  childDepartments___children
  childDepartments___children___id
  childDepartments___children___parent___id
  childDepartments___children___parent___children
  childDepartments___children___children
  childDepartments___children___children___id
  childDepartments___children___children___children
  childDepartments___children___internal___content
  childDepartments___children___internal___contentDigest
  childDepartments___children___internal___description
  childDepartments___children___internal___fieldOwners
  childDepartments___children___internal___ignoreType
  childDepartments___children___internal___mediaType
  childDepartments___children___internal___owner
  childDepartments___children___internal___type
  childDepartments___internal___content
  childDepartments___internal___contentDigest
  childDepartments___internal___description
  childDepartments___internal___fieldOwners
  childDepartments___internal___ignoreType
  childDepartments___internal___mediaType
  childDepartments___internal___owner
  childDepartments___internal___type
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type GreenhouseJobBoardDepartmentGroupConnection {
  totalCount: Int!
  edges: [GreenhouseJobBoardDepartmentEdge!]!
  nodes: [GreenhouseJobBoardDepartment!]!
  pageInfo: PageInfo!
  distinct(field: GreenhouseJobBoardDepartmentFieldsEnum!): [String!]!
  max(field: GreenhouseJobBoardDepartmentFieldsEnum!): Float
  min(field: GreenhouseJobBoardDepartmentFieldsEnum!): Float
  sum(field: GreenhouseJobBoardDepartmentFieldsEnum!): Float
  group(skip: Int, limit: Int, field: GreenhouseJobBoardDepartmentFieldsEnum!): [GreenhouseJobBoardDepartmentGroupConnection!]!
  field: String!
  fieldValue: String
}

input GreenhouseJobBoardDepartmentSortInput {
  fields: [GreenhouseJobBoardDepartmentFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteMetadata {
  siteUrl: String!
  siteName: String
}

type JobPost implements Node {
  slug: String!
  absoluteUrl: String!
  ghId: String!
  parentJob: GreenhouseJobBoardJob!
  updatedAt(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  validThrough(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  title: String!
  boardToken: String!
  boardUrl: String!
  content: [JobPostContentSection!]!
  rawContent: String!
  corporate: JobCorporate
  employmentType: JobEmploymentType!
  alternativeCivilianService: Boolean!
  priorExperience: JobPriorExperience!
  chapter: String!
  keywords: [String!]!
  order: Int!
  externalUrl: String
  tags: [String!]!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

enum GreenhouseJobBoardJobCustomFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_SELECT
  MULTI_SELECT
  YES_NO
  CURRENCY
  DATE
  URL
  USER
  CURRENCY_RANGE
  NUMBER_RANGE
}

type GreenhouseJobBoardJob implements Node {
  ghId: String!
  title: String!

  # URL to public Greenhouse job board UI
  boardUrl: String!
  content: String!
  updatedAt(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  questions: [GreenhouseJobBoardJobQuestion!]!
  locationQuestions: [GreenhouseJobBoardJobQuestion!]!
  departments: [GreenhouseJobBoardDepartment!]!
  metadata: [GreenhouseJobBoardJobCustomFieldMetadata!]!
  boardToken: String!

  # Returns the first child node of type JobPost or null if there are no children of given type on this node
  childJobPost: JobPost

  # Returns all children nodes filtered by type JobPost
  childrenJobPost: [JobPost]
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

interface GreenhouseJobBoardJobQuestion {
  label: String!
  required: Boolean!
  description: String
  name: String!
}

type GreenhouseJobBoardJobQuestionForAttachment implements GreenhouseJobBoardJobQuestion {
  label: String!
  required: Boolean!
  description: String
  name: String!
}

type GreenhouseJobBoardJobQuestionForShortText implements GreenhouseJobBoardJobQuestion {
  label: String!
  required: Boolean!
  description: String
  name: String!
}

type GreenhouseJobBoardJobQuestionForLongText implements GreenhouseJobBoardJobQuestion {
  label: String!
  required: Boolean!
  description: String
  name: String!
}

type GreenhouseJobBoardJobQuestionForSingleSelect implements GreenhouseJobBoardJobQuestion {
  label: String!
  required: Boolean!
  description: String
  name: String!
  options: [GreenhouseJobBoardJobQuestionAnswerOption!]!
}

type GreenhouseJobBoardJobQuestionForMultiSelect implements GreenhouseJobBoardJobQuestion {
  label: String!
  required: Boolean!
  description: String
  name: String!
  options: [GreenhouseJobBoardJobQuestionAnswerOption!]!
}

type GreenhouseJobBoardJobQuestionForYesNo implements GreenhouseJobBoardJobQuestion {
  label: String!
  required: Boolean!
  description: String
  name: String!
  options: [GreenhouseJobBoardJobQuestionAnswerOption!]!
}

type GreenhouseJobBoardJobQuestionAnswerOption {
  # Label of the question answer value
  label: String!

  # Unique id of the question answer value
  value: String!
}

type GreenhouseJobBoardJobCustomFieldMetadata {
  id: String!
  name: String!
  type: GreenhouseJobBoardJobCustomFieldType!
  value: String
}

type GreenhouseJobBoardDepartment implements Node {
  ghId: String!
  name: String!
  jobs: [GreenhouseJobBoardJob!]!
  parentDepartment: GreenhouseJobBoardDepartment
  childDepartments: [GreenhouseJobBoardDepartment!]!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

enum JobCorporate {
  KARROT_MARKET
  KARROT_PAY
}

enum JobEmploymentType {
  FULL_TIME
  CONTRACTOR
  INTERN
  ASSISTANT
}

enum JobPriorExperience {
  YES
  NO
  WHATEVER
}

enum HeadingLevel {
  H1
  H2
  H3
  H4
  H5
  H6
}

type JobPostContentSection {
  title: String!
  level: HeadingLevel!
  bodyHtml: String!
}
