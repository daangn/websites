{"version":3,"sources":["webpack://us.karrotmarket.com/../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","webpack://us.karrotmarket.com/../_packages/@karrotmarket/gatsby-theme-global-website/src/components/Flex.tsx","webpack://us.karrotmarket.com/../_packages/@karrotmarket/gatsby-theme-global-website/src/pages/404.tsx","webpack://us.karrotmarket.com/../_packages/@karrotmarket/gatsby-theme-global-website/src/util.ts"],"names":["_objectDestructuringEmpty","obj","TypeError","SFlex","styled","display","Flex","props","css","useMemo","parseMediaProps","children","center","skip","parentKey","MediaTypeList","Object","keys","forEach","key","includes","prop","mediaType","length","reduce","newObj"],"mappings":"+HAAe,SAASA,EAA0BC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gC,+ICgCjCC,GAAQC,QAAO,MAAO,CAC1BC,QAAS,SAGEC,EAAwB,SAACC,GACpC,IAAMC,GAAMC,cAAQ,kBAAMC,OAAgBH,KAAQ,CAACA,IACnD,OAAO,SAACJ,EAAD,CAAOK,IAAKA,EAAZ,SAAkBD,EAAMI,a,qFC9BjC,UAJ0C,SAAC,GACzC,OADiD,WAC1C,SAAC,IAAD,CAAMC,QAAM,EAAZ,yB,0FCJIF,EAAkB,SAACH,EAA+BM,EAAqBC,GAArD,gBAAgCD,MAAiB,SAAjD,IAAqDC,MAA2B,MACzGb,EAcEc,aACI,SAACd,GAcG,OAbAe,OAAOC,KAAKV,GAAOW,SAAQ,SAACC,GACxB,IAAI,CAAC,YAAD,eAAgBN,IAAMO,SAASD,GAAnC,CACA,IAAME,EAAOd,EAAMY,GACdE,IACsB,iBAATA,EACdpB,EAAI,MAAMkB,GAAOE,EAEjBL,OAAOC,KAAKI,GAAMH,SAAQ,SAACI,GACvBrB,EAAIqB,GAAwBH,GAAOE,EAAKC,WAK7CrB,IAEXc,aAAqB,SAACd,EAAKqB,GAAN,OAAsBrB,EAAIqB,GAAa,GAAKrB,IAAM,KA9B3Ec,cAAsB,SAACO,GACwB,IAAvCN,OAAOC,KAAKhB,EAAIqB,IAAYC,eAAqBtB,EAAIqB,MAGzDR,EACOE,OAAOC,KAAPD,OAAA,UAAiBf,IAAOuB,QAAO,SAACC,EAAQH,GAAe,IAAD,EAEzD,OADAG,EAAOH,KAAP,MAAoCR,GAAYb,EAAIqB,GAApD,GACOG,IACR,IAEIxB,EAXd,IAACA","file":"component---packages-karrotmarket-gatsby-theme-global-website-src-pages-404-tsx-e5fd52bbf3a74ef4fea1.js","sourcesContent":["export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}","import { useMemo } from \"react\";\n\nimport { parseMediaProps } from \"../util\";\nimport { MediaTypeMap, styled } from \"../gatsby-theme-stitches/stitches.config\";\n\ntype AlignmentType =\n  | `space-${\"between\" | \"around\" | \"evenly\"}`\n  | `${\"\" | \"flex-\"}${\"start\" | \"end\"}`\n  | \"stretch\"\n  | \"center\";\ntype FlexDirectionType = `${\"row\" | \"column\"}${\"\" | \"-reverse\"}`;\ninterface TFlex {\n  row?: boolean | MediaTypeMap<boolean>;\n  column?: boolean | MediaTypeMap<boolean>;\n\n  flexDirection?: FlexDirectionType | MediaTypeMap<FlexDirectionType>;\n  flex?: number | MediaTypeMap<number>;\n\n  jc?: AlignmentType | MediaTypeMap<AlignmentType>;\n  ai?: AlignmentType | MediaTypeMap<AlignmentType>;\n  justifyContent?: AlignmentType | MediaTypeMap<AlignmentType>;\n  alignItems?: AlignmentType | MediaTypeMap<AlignmentType>;\n\n  center?: boolean | MediaTypeMap<boolean>;\n  rowCenterX?: boolean | MediaTypeMap<boolean>;\n  rowCenterY?: boolean | MediaTypeMap<boolean>;\n  colCenterX?: boolean | MediaTypeMap<boolean>;\n  colCenterY?: boolean | MediaTypeMap<boolean>;\n\n  p?: string | number | MediaTypeMap<string | number>;\n  m?: string | number | MediaTypeMap<string | number>;\n}\n\nconst SFlex = styled(\"div\", {\n  display: \"flex\",\n});\n\nexport const Flex: React.FC<TFlex> = (props) => {\n  const css = useMemo(() => parseMediaProps(props), [props]);\n  return <SFlex css={css}>{props.children}</SFlex>;\n};\n","import React from \"react\";\nimport type { PageProps } from \"gatsby\";\n\nimport { Flex } from \"../components/Flex\";\n\nconst NotFoundPage: React.FC<PageProps> = ({}) => {\n  return <Flex center>not found</Flex>;\n};\n\nexport default NotFoundPage;\n","import { MediaType, MediaTypeList, MediaTypeMap } from \"./gatsby-theme-stitches/stitches.config\";\n\nexport const parseMediaProps = (props: { [key: string]: any }, skip: string[] = [], parentKey: string | null = null) =>\n    ((obj) => {\n        MediaTypeList.forEach((mediaType) => {\n            if (Object.keys(obj[mediaType]).length === 0) delete obj[mediaType];\n        });\n\n        if (parentKey) {\n            return Object.keys({ ...obj }).reduce((newObj, mediaType) => {\n                newObj[mediaType as MediaType] = { [parentKey]: obj[mediaType as MediaType] };\n                return newObj;\n            }, {} as MediaTypeMap<any>);\n        } else {\n            return obj;\n        }\n    })(\n        MediaTypeList.reduce(\n            (obj) => {\n                Object.keys(props).forEach((key) => {\n                    if ([\"children\", ...skip].includes(key)) return;\n                    const prop = props[key];\n                    if (!prop) {\n                    } else if (typeof prop !== \"object\") {\n                        obj[\"@i\"][key] = prop;\n                    } else {\n                        Object.keys(prop).forEach((mediaType) => {\n                            obj[mediaType as MediaType][key] = prop[mediaType];\n                        });\n                    }\n                });\n\n                return obj;\n            },\n            MediaTypeList.reduce((obj, mediaType) => ((obj[mediaType] = {}), obj), {} as MediaTypeMap<any>)\n        )\n    );\n"],"sourceRoot":""}