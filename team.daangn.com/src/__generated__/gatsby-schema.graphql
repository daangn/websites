# Add date formatting options.
directive @dateformat(formatString: String, locale: String, fromNow: Boolean, difference: String) on FIELD_DEFINITION

# Link to node by foreign-key relation.
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

# Link to File node by relative path.
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

# Proxy resolver from another field.
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

# Infer field types from field values.
directive @infer on OBJECT

# Do not infer field types from field values.
directive @dontInfer on OBJECT

# Define the mime-types handled by this type.
directive @mimeTypes(
  # The mime-types handled by this type.
  types: [String!]! = []
) on OBJECT

# Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`.
directive @childOf(
  # A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  mimeTypes: [String!]! = []

  # A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  types: [String!]! = []
) on OBJECT

# DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".
#
# Adds root query fields for an interface. All implementing types must also implement the Node interface.
directive @nodeInterface on INTERFACE

type File implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  accessTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  changeTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  ctime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  url: String

  # Returns all children nodes filtered by type ImageSharp
  childrenImageSharp: [ImageSharp]

  # Returns the first child node of type ImageSharp or null if there are no children of given type on this node
  childImageSharp: ImageSharp
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

# Node Interface
interface Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Internal {
  content: String
  contentDigest: String!
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

# A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar Date

type Directory implements Node {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  accessTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  changeTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  ctime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type Site implements Node {
  buildTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  siteMetadata: SiteMetadata!
  port: Int
  host: String
  flags: SiteFlags
  polyfill: Boolean
  pathPrefix: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SiteFlags {
  FAST_DEV: Boolean
  QUERY_ON_DEMAND: Boolean
  LAZY_IMAGES: Boolean
  PARALLEL_SOURCING: Boolean
}

type SiteSiteMetadata {
  title: String
  description: String
}

type SiteFunction implements Node {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type SitePage implements Node {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  isCreatedByStatefulCreatePages: Boolean
  pluginCreator: SitePlugin
  pluginCreatorId: String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  context: SitePageContext
}

type SitePageContext {
  id: String
  parent__ghId: String
  _xparams: SitePageContext_xparams
}

type SitePageContext_xparams {
  parent__ghId: String
}

enum ImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum ImageFit {
  COVER
  CONTAIN
  FILL
  INSIDE
  OUTSIDE
}

enum ImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum ImageCropFocus {
  CENTER
  NORTH
  NORTHEAST
  EAST
  SOUTHEAST
  SOUTH
  SOUTHWEST
  WEST
  NORTHWEST
  ENTROPY
  ATTENTION
}

input DuotoneGradient {
  highlight: String!
  shadow: String!
  opacity: Int
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_WHITE
  TURNPOLICY_LEFT
  TURNPOLICY_RIGHT
  TURNPOLICY_MINORITY
  TURNPOLICY_MAJORITY
}

input Potrace {
  turnPolicy: PotraceTurnPolicy
  turdSize: Float
  alphaMax: Float
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  blackOnWhite: Boolean
  color: String
  background: String
}

type ImageSharp implements Node {
  fixed(width: Int, height: Int, base64Width: Int, jpegProgressive: Boolean = true, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, traceSVG: Potrace, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, toFormat: ImageFormat = AUTO, toFormatBase64: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpFixed
  fluid(
    maxWidth: Int
    maxHeight: Int
    base64Width: Int
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    pngCompressionSpeed: Int = 4
    duotone: DuotoneGradient
    traceSVG: Potrace
    quality: Int
    jpegQuality: Int
    pngQuality: Int
    webpQuality: Int
    toFormat: ImageFormat = AUTO
    toFormatBase64: ImageFormat = AUTO
    cropFocus: ImageCropFocus = ATTENTION
    fit: ImageFit = COVER
    background: String = "rgba(0,0,0,1)"
    rotate: Int = 0
    trim: Float = 0
    sizes: String = ""

    # A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    srcSetBreakpoints: [Int] = []
  ): ImageSharpFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: ImageLayout = CONSTRAINED

    # The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
    # Ignored if layout = FLUID.
    width: Int

    # The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
    # The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
    # matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # TRACED_SVG: a low-resolution traced SVG of the image.
    # NONE: no placeholder. Set "background" to use a fixed background color.
    placeholder: ImagePlaceholder

    # Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    blurredOptions: BlurredOptions

    # Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    tracedSVGOptions: Potrace

    # The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    # The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    # not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    # both PNG and JPG is not supported and will be ignored.
    formats: [ImageFormat]

    # A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
    # and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download.
    # You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    # does not actually span the full width of the screen, in which case you should pass the correct size here.
    sizes: String

    # The default quality. This is overridden by any format-specific options
    quality: Int

    # Options to pass to sharp when generating JPG images.
    jpgOptions: JPGOptions

    # Options to pass to sharp when generating PNG images.
    pngOptions: PNGOptions

    # Options to pass to sharp when generating WebP images.
    webpOptions: WebPOptions

    # Options to pass to sharp when generating AVIF images.
    avifOptions: AVIFOptions

    # Options to pass to sharp to control cropping and other image manipulations.
    transformOptions: TransformOptions

    # Background color applied to the wrapper. Also passed to sharp to use as a background when "letterboxing" an image to another aspect ratio.
    backgroundColor: String
  ): JSON!
  original: ImageSharpOriginal
  resize(width: Int, height: Int, quality: Int, jpegQuality: Int, pngQuality: Int, webpQuality: Int, jpegProgressive: Boolean = true, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, grayscale: Boolean = false, duotone: DuotoneGradient, base64: Boolean = false, traceSVG: Potrace, toFormat: ImageFormat = AUTO, cropFocus: ImageCropFocus = ATTENTION, fit: ImageFit = COVER, background: String = "rgba(0,0,0,1)", rotate: Int = 0, trim: Float = 0): ImageSharpResize
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ImageSharpFixed {
  base64: String
  tracedSVG: String
  aspectRatio: Float
  width: Float!
  height: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  originalName: String
}

type ImageSharpFluid {
  base64: String
  tracedSVG: String
  aspectRatio: Float!
  src: String!
  srcSet: String!
  srcWebp: String
  srcSetWebp: String
  sizes: String!
  originalImg: String
  originalName: String
  presentationWidth: Int!
  presentationHeight: Int!
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

enum ImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

input BlurredOptions {
  # Width of the generated low-res preview. Default is 20px
  width: Int

  # Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this
  toFormat: ImageFormat
}

input JPGOptions {
  quality: Int
  progressive: Boolean = true
}

input PNGOptions {
  quality: Int
  compressionSpeed: Int = 4
}

input WebPOptions {
  quality: Int
}

input AVIFOptions {
  quality: Int
  lossless: Boolean
  speed: Int
}

input TransformOptions {
  grayscale: Boolean = false
  duotone: DuotoneGradient
  rotate: Int = 0
  trim: Float = 0
  cropFocus: ImageCropFocus = ATTENTION
  fit: ImageFit = COVER
}

type ImageSharpOriginal {
  width: Float
  height: Float
  src: String
}

type ImageSharpResize {
  src: String
  tracedSVG: String
  width: Int
  height: Int
  aspectRatio: Float
  originalName: String
}

type PrismicAlternateLanguageType {
  id: ID
  uid: String
  lang: String
  type: String
  document: PrismicAllDocumentTypes
  raw: JSON
}

type PrismicEmbedType implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicGeoPointType {
  longitude: Float!
  latitude: Float!
}

type PrismicImageDimensionsType {
  width: Int!
  height: Int!
}

type PrismicImageThumbnailType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed. 
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

type PrismicLinkType {
  link_type: PrismicLinkTypeEnum
  isBroken: Boolean!
  url: String
  target: String
  size: Int
  id: ID
  type: String
  tags: [String]
  lang: String
  slug: String
  uid: String
  document: PrismicAllDocumentTypes
  localFile: File
  raw: JSON
}

enum PrismicLinkTypeEnum {
  Any
  Document
  Media
  Web
}

interface PrismicSliceType {
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicStructuredTextType {
  text: String!
  html: String!
  raw: JSON!
}

type PrismicTypePathType implements Node {
  path: [String!]!
  type: String!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type ImgixFixed {
  base64: String!
  src: String!
  srcSet: String!
  srcWebp: String!
  srcSetWebp: String!
  sizes: String!
  width: Int!
  height: Int!
}

type ImgixFluid {
  base64: String!
  src: String!
  srcSet: String!
  srcWebp: String!
  srcSetWebp: String!
  sizes: String!
  aspectRatio: Float!
}

enum ImgixPlaceholder {
  DOMINANT_COLOR
  BLURRED
  NONE
}

input ImgixParamsInput {
  # Specifies an aspect ratio to maintain when resizing and cropping the image. [See docs](https://docs.imgix.com/apis/url/size/ar).
  ar: String

  # Applies automatic enhancements to images. [See docs](https://docs.imgix.com/apis/url/auto).
  auto: String

  # Colors the background of padded and partially-transparent images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/bg).
  bg: String

  # Changes the blend alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/blending/blend-align).
  blendAlign: String

  # Alias for `blendAlign`.
  blendalign: String

  # Alias for `blendAlign`.
  ba: String

  # Changes the alpha of the blend image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/blending/blend-alpha).
  blendAlpha: Int

  # Alias for `blendAlpha`.
  blendalpha: Int

  # Alias for `blendAlpha`.
  balph: Int

  # Specifies a color to use when applying the blend. [See docs](https://docs.imgix.com/apis/url/blending/blend-color).
  blendColor: String

  # Alias for `blendColor`.
  blendcolor: String

  # Alias for `blendColor`.
  blendClr: String

  # Alias for `blendColor`.
  blendclr: String

  # Specifies the type of crop for blend images. [See docs](https://docs.imgix.com/apis/url/blending/blend-crop).
  blendCrop: String

  # Alias for `blendCrop`.
  blendcrop: String

  # Alias for `blendCrop`.
  bc: String

  # Specifies the fit mode for blend images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/blending/blend-fit).
  blendFit: String

  # Alias for `blendFit`.
  blendfit: String

  # Alias for `blendFit`.
  bf: String

  # Adjusts the height of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-h).
  blendH: Float

  # Alias for `blendH`.
  blendh: Float

  # Alias for `blendH`.
  bh: Float

  # Sets the blend mode for a blend image. Default: `overlay`. [See docs](https://docs.imgix.com/apis/url/blending/blend-mode).
  blendMode: String

  # Alias for `blendMode`.
  blendmode: String

  # Alias for `blendMode`.
  bm: String

  # Applies padding to the blend image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-pad).
  blendPad: Int

  # Alias for `blendPad`.
  blendpad: Int

  # Alias for `blendPad`.
  bp: Int

  # Adjusts the size of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-size).
  blendSize: String

  # Alias for `blendSize`.
  blendsize: String

  # Alias for `blendSize`.
  bs: String

  # Adjusts the width of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-w).
  blendW: Float

  # Alias for `blendW`.
  blendw: Float

  # Alias for `blendW`.
  bw: Float

  # Adjusts the x-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-x).
  blendX: Int

  # Alias for `blendX`.
  blendx: Int

  # Alias for `blendX`.
  bx: Int

  # Adjusts the y-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-y).
  blendY: Int

  # Alias for `blendY`.
  blendy: Int

  # Alias for `blendY`.
  by: Int

  # Specifies the location of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend).
  blend: String

  # Alias for `blend`.
  b: String

  # Applies a gaussian blur to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/blur).
  blur: Int

  # Sets bottom border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-bottom).
  borderBottom: Int

  # Sets left border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-left).
  borderLeft: Int

  # Sets the inner radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius-inner).
  borderRadiusInner: String

  # Sets the outer radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius).
  borderRadius: String

  # Sets right border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-right).
  borderRight: Int

  # Sets top border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-top).
  borderTop: Int

  # Applies a border to an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border).
  border: String

  # Adjusts the brightness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/bri).
  bri: Int

  # Sets one or more Client-Hints headers. [See docs](https://docs.imgix.com/apis/url/format/ch).
  ch: String

  # Specifies the output chroma subsampling rate. Default: `420`. [See docs](https://docs.imgix.com/apis/url/format/chromasub).
  chromasub: Int

  # Limits the number of unique colors in an image. [See docs](https://docs.imgix.com/apis/url/format/colorquant).
  colorquant: Int

  # Specifies how many colors to include in a palette-extraction response. Default: `6`. [See docs](https://docs.imgix.com/apis/url/color-palette/colors).
  colors: Int

  # Adjusts the contrast of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/con).
  con: Int

  # Specifies the radius value for a rounded corner mask. [See docs](https://docs.imgix.com/apis/url/mask/corner-radius).
  cornerRadius: String

  # Specifies how to crop an image. [See docs](https://docs.imgix.com/apis/url/size/crop).
  crop: String

  # Specifies the color space of the output image. [See docs](https://docs.imgix.com/apis/url/format/cs).
  cs: String

  # Forces a URL to use send-file in its response. [See docs](https://docs.imgix.com/apis/url/format/dl).
  dl: String

  # Sets the DPI value in the EXIF header. [See docs](https://docs.imgix.com/apis/url/format/dpi).
  dpi: Int

  # Adjusts the device-pixel ratio of the output image. Default: `1`. [See docs](https://docs.imgix.com/apis/url/dpr).
  dpr: Float

  # Changes the alpha of the duotone effect atop the source image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/stylize/duotone-alpha).
  duotoneAlpha: Int

  # Applies a duotone effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/duotone).
  duotone: String

  # Adjusts the exposure of the output image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/exp).
  exp: Int

  # A Unix timestamp specifying a UTC time. Requests made to this URL after that time will output a 404 status code. [See docs](https://docs.imgix.com/apis/url/expires).
  expires: String

  # Selects a face to crop to. [See docs](https://docs.imgix.com/apis/url/face-detection/faceindex).
  faceindex: Int

  # Adjusts padding around a selected face. Default: `1`. [See docs](https://docs.imgix.com/apis/url/face-detection/facepad).
  facepad: Float

  # Specifies that face data should be included in output when combined with `fm=json`. [See docs](https://docs.imgix.com/apis/url/face-detection/faces).
  faces: Int

  # Sets the fill color for images with additional space created by the fit setting. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/fill/fill-color).
  fillColor: String

  # Alias for `fillColor`.
  fillcolor: String

  # Determines how to fill in additional space created by the fit setting. [See docs](https://docs.imgix.com/apis/url/fill/fill).
  fill: String

  # Specifies how to map the source image to the output image dimensions. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/size/fit).
  fit: String

  # Alias for `fit`.
  f: String

  # Flips an image on a specified axis. [See docs](https://docs.imgix.com/apis/url/rotation/flip).
  flip: String

  # Changes the format of the output image. [See docs](https://docs.imgix.com/apis/url/format/fm).
  fm: String

  # Displays crosshairs identifying the location of the set focal point. Default: `false`. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-debug).
  fpDebug: Boolean

  # Sets the relative horizontal value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-x).
  fpX: Float

  # Sets the relative vertical value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-y).
  fpY: Float

  # Sets the relative zoom value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-z).
  fpZ: Float

  # Adjusts the gamma of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/gam).
  gam: Int

  # Sets grid colors for the transparency checkerboard grid.
  gridColors: String

  # Sets grid size for the transparency checkerboard grid.
  gridSize: Int

  # Adjusts the height of the output image. [See docs](https://docs.imgix.com/apis/url/size/h).
  h: Float

  # Alias for `h`.
  height: Float

  # Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/high).
  high: Int

  # Applies a half-tone effect to the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/htn).
  htn: Int

  # Adjusts the hue of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/hue).
  hue: Int

  # Inverts the colors on the source image. Default: `false`. [See docs](https://docs.imgix.com/apis/url/adjustment/invert).
  invert: Boolean

  # Alias for `invert`.
  inv: Boolean

  # Specifies that the output image should be a lossless variant. Default: `false`. [See docs](https://docs.imgix.com/apis/url/format/lossless).
  lossless: Boolean

  # Changes the watermark alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-align).
  markAlign: String

  # Alias for `markAlign`.
  ma: String

  # Alias for `markAlign`.
  markalign: String

  # Changes the alpha of the watermark image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-alpha).
  markAlpha: Int

  # Alias for `markAlpha`.
  markalpha: Int

  # Alias for `markAlpha`.
  malph: Int

  # Changes base URL of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-base).
  markBase: String

  # Alias for `markBase`.
  mb: String

  # Alias for `markBase`.
  markbase: String

  # Specifies the fit mode for watermark images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-fit).
  markFit: String

  # Alias for `markFit`.
  mf: String

  # Alias for `markFit`.
  markfit: String

  # Adjusts the height of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-h).
  markH: Float

  # Alias for `markH`.
  mh: Float

  # Alias for `markH`.
  markh: Float

  # Applies padding to the watermark image. Default: `5`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-pad).
  markPad: Int

  # Alias for `markPad`.
  mp: Int

  # Alias for `markPad`.
  markpad: Int

  # Rotates a watermark or tiled watermarks by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-rot).
  markRot: Float

  # Adjusts the scale of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-scale).
  markScale: Int

  # Alias for `markScale`.
  ms: Int

  # Alias for `markScale`.
  markscale: Int

  # Adds tiled watermark. [See docs](https://docs.imgix.com/apis/url/watermark/mark-tile).
  markTile: String

  # Alias for `markTile`.
  mtile: String

  # Alias for `markTile`.
  marktile: String

  # Adjusts the width of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-w).
  markW: Float

  # Alias for `markW`.
  mw: Float

  # Alias for `markW`.
  markw: Float

  # Adjusts the x-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-x).
  markX: Int

  # Alias for `markX`.
  mx: Int

  # Alias for `markX`.
  markx: Int

  # Adjusts the y-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-y).
  markY: Int

  # Alias for `markY`.
  my: Int

  # Alias for `markY`.
  marky: Int

  # Specifies the location of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark).
  mark: String

  # Alias for `mark`.
  m: String

  # Colors the background of the transparent mask area of images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/mask/mask-bg).
  maskBg: String

  # Alias for `maskBg`.
  maskbg: String

  # Defines the type of mask and specifies the URL if that type is selected. [See docs](https://docs.imgix.com/apis/url/mask).
  mask: String

  # Specifies the maximum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-height).
  maxH: Int

  # Alias for `maxH`.
  maxHeight: Int

  # Specifies the maximum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-width).
  maxW: Int

  # Alias for `maxW`.
  maxWidth: Int

  # Specifies the minimum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-height).
  minH: Int

  # Alias for `minH`.
  minHeight: Int

  # Specifies the minimum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-width).
  minW: Int

  # Alias for `minW`.
  minWidth: Int

  # Applies a monochrome effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/monochrome).
  monochrome: String

  # Alias for `monochrome`.
  mono: String

  # Reduces the noise in an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nr).
  nr: Int

  # Provides a threshold by which to sharpen an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nrs).
  nrs: Int

  # Changes the image orientation. [See docs](https://docs.imgix.com/apis/url/rotation/orient).
  orient: Int

  # Alias for `orient`.
  or: Int

  # Sets bottom padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-bottom).
  padBottom: Int

  # Sets left padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-left).
  padLeft: Int

  # Sets right padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-right).
  padRight: Int

  # Sets top padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-top).
  padTop: Int

  # Pads an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad).
  pad: Int

  # Selects a page from a PDF for display. Default: `1`. [See docs](https://docs.imgix.com/apis/url/pdf/page).
  page: Int

  # Specifies an output format for palette-extraction. [See docs](https://docs.imgix.com/apis/url/color-palette/palette).
  palette: String

  # Enables or disables PDF annotation. Default: `true`. [See docs](https://docs.imgix.com/apis/url/pdf/pdf-annotation).
  pdfAnnotation: Boolean

  # Alias for `pdfAnnotation`.
  annotation: Boolean

  # Specifies a CSS prefix for all classes in palette-extraction. Default: `image`. [See docs](https://docs.imgix.com/apis/url/color-palette/prefix).
  prefix: String

  # Applies a pixelation effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/px).
  px: Int

  # Adjusts the quality of an output image. Default: `75`. [See docs](https://docs.imgix.com/apis/url/format/q).
  q: Int

  # Crops an image to a specified rectangle. [See docs](https://docs.imgix.com/apis/url/size/rect).
  rect: String

  # Rotates an image by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/rotation/rot).
  rot: Float

  # Adjusts the saturation of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sat).
  sat: Int

  # Applies a sepia effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/sepia).
  sepia: Int

  # Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/shad).
  shad: Float

  # Adjusts the sharpness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sharp).
  sharp: Float

  # Adds checkerboard behind images which support transparency. [See docs](https://docs.imgix.com/apis/url/fill/transparency).
  transparency: String

  # Specifies a trim color on a trim operation. [See docs](https://docs.imgix.com/apis/url/trim/trim-color).
  trimColor: String

  # Alias for `trimColor`.
  trimcolor: String

  # Specifies the mean difference on a trim operation. Default: `11`. [See docs](https://docs.imgix.com/apis/url/trim/trim-md).
  trimMd: Float

  # Alias for `trimMd`.
  trimmd: Float

  # Pads the area of the source image before trimming. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-pad).
  trimPad: Int

  # Alias for `trimPad`.
  trimpad: Int

  # Specifies the standard deviation on a trim operation. Default: `10`. [See docs](https://docs.imgix.com/apis/url/trim/trim-sd).
  trimSd: Float

  # Alias for `trimSd`.
  trimsd: Float

  # Specifies the tolerance on a trim operation. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-tol).
  trimTol: Float

  # Alias for `trimTol`.
  trimtol: Float

  # Trims the source image. [See docs](https://docs.imgix.com/apis/url/trim/trim).
  trim: String

  # Sets the vertical and horizontal alignment of rendered text relative to the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-align).
  txtAlign: String

  # Alias for `txtAlign`.
  txtalign: String

  # Alias for `txtAlign`.
  ta: String

  # Sets the clipping properties of rendered text. Default: `end`. [See docs](https://docs.imgix.com/apis/url/text/txt-clip).
  txtClip: String

  # Alias for `txtClip`.
  txtclip: String

  # Alias for `txtClip`.
  tcl: String

  # Specifies the color of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-color).
  txtColor: String

  # Alias for `txtColor`.
  txtcolor: String

  # Alias for `txtColor`.
  txtClr: String

  # Alias for `txtColor`.
  txtclr: String

  # Alias for `txtColor`.
  tc: String

  # Specifies the fit approach for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-fit).
  txtFit: String

  # Alias for `txtFit`.
  txtfit: String

  # Selects a font for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-font).
  txtFont: String

  # Alias for `txtFont`.
  tf: String

  # Alias for `txtFont`.
  txtfont: String

  # Sets the leading (line spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-lead).
  txtLead: Int

  # Alias for `txtLead`.
  txtlead: Int

  # Controls the level of ligature substitution. [See docs](https://docs.imgix.com/apis/url/text/txt-lig).
  txtLig: Int

  # Alias for `txtLig`.
  txtlig: Int

  # Specifies a text outline color. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/text/txt-line-color).
  txtLineColor: String

  # Alias for `txtLineColor`.
  txtlinecolor: String

  # Alias for `txtLineColor`.
  txtLineClr: String

  # Alias for `txtLineColor`.
  txtlineclr: String

  # Outlines the rendered text with a specified color. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-line).
  txtLine: Int

  # Alias for `txtLine`.
  txtline: Int

  # Alias for `txtLine`.
  tl: Int

  # Specifies the padding (in device-independent pixels) between a textbox and the edges of the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-pad).
  txtPad: Int

  # Alias for `txtPad`.
  txtpad: Int

  # Alias for `txtPad`.
  tp: Int

  # Applies a shadow to rendered text. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-shad).
  txtShad: Float

  # Alias for `txtShad`.
  txtshad: Float

  # Alias for `txtShad`.
  tsh: Float

  # Sets the font size of rendered text. Default: `12`. [See docs](https://docs.imgix.com/apis/url/text/txt-size).
  txtSize: Int

  # Alias for `txtSize`.
  tsz: Int

  # Alias for `txtSize`.
  txtsize: Int

  # Sets the tracking (letter spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-track).
  txtTrack: Int

  # Alias for `txtTrack`.
  txttrack: Int

  # Alias for `txtTrack`.
  tt: Int

  # Sets the width of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-width).
  txtWidth: Int

  # Alias for `txtWidth`.
  txtwidth: Int

  # Sets the text string to render. [See docs](https://docs.imgix.com/apis/url/text/txt).
  txt: String

  # Alias for `txt`.
  t: String

  # Sharpens the source image using an unsharp mask. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/usm).
  usm: Int

  # Specifies the radius for an unsharp mask operation. Default: `2.5`. [See docs](https://docs.imgix.com/apis/url/adjustment/usmrad).
  usmrad: Float

  # Adjusts the vibrance of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/vib).
  vib: Int

  # Adjusts the width of the output image. [See docs](https://docs.imgix.com/apis/url/size/w).
  w: Float

  # Alias for `w`.
  width: Float
}

type PrismicAdsIntro implements Node {
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicFaqDataEntries {
  answer: PrismicStructuredTextType
  question: String
}

type PrismicFaqDataType {
  entries: [PrismicFaqDataEntries!]!
}

type PrismicFaq implements Node {
  uid: String!
  data: PrismicFaqDataType!
  dataRaw: JSON!
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicGlobalContents implements Node {
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicMbtiTestResult implements Node {
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicMbtiIntro implements Node {
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicMbtiTestQuestion implements Node {
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicMemberProfileDataImageImageThumbnailsType {
  small_banner: PrismicImageThumbnailType
  wide_banner: PrismicImageThumbnailType
}

type PrismicMemberProfileDataImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed. 
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
  thumbnails: PrismicMemberProfileDataImageImageThumbnailsType
}

type PrismicMemberProfileDataType {
  email: String
  image: PrismicMemberProfileDataImageImageType
  name: String
  nickname: String
  role: String
}

type PrismicMemberProfile implements Node {
  data: PrismicMemberProfileDataType!
  dataRaw: JSON!
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicSiteNavigationDataFooterEntries {
  display_text: String
  group: String
  link: PrismicLinkType
}

type PrismicSiteNavigationDataHeaderEntries {
  display_text: String
  group: String
  link: PrismicLinkType
}

type PrismicSiteNavigationDataSnsProfiles {
  link: PrismicLinkType
  service: String
}

type PrismicSiteNavigationDataType {
  address: String
  footer_entries: [PrismicSiteNavigationDataFooterEntries!]!
  header_entries: [PrismicSiteNavigationDataHeaderEntries!]!
  sns_profiles: [PrismicSiteNavigationDataSnsProfiles!]!
  tel: String
}

type PrismicSiteNavigation implements Node {
  uid: String!
  data: PrismicSiteNavigationDataType!
  dataRaw: JSON!
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicTeamContentsDataCultureBodyKeyVisualPrimaryKeyVisualImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed. 
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamContentsDataCultureBodyKeyVisualPrimary {
  description: PrismicStructuredTextType
  expanded: Boolean
  key_visual_image: PrismicTeamContentsDataCultureBodyKeyVisualPrimaryKeyVisualImageImageType
}

type PrismicTeamContentsDataCultureBodyKeyVisual implements PrismicSliceType {
  primary: PrismicTeamContentsDataCultureBodyKeyVisualPrimary
  id: ID!
  slice_type: String!
  slice_label: String
}

union PrismicTeamContentsDataCultureBodySlicesType = PrismicTeamContentsDataCultureBodyKeyVisual

type PrismicTeamContentsDataLifeBodyLifeContentItemsThumbnailImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed. 
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamContentsDataLifeBodyLifeContentItem {
  thumbnail_description: PrismicStructuredTextType
  thumbnail_image: PrismicTeamContentsDataLifeBodyLifeContentItemsThumbnailImageImageType
}

type PrismicTeamContentsDataLifeBodyLifeContentPrimary {
  body_text: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataLifeBodyLifeContent implements PrismicSliceType {
  items: [PrismicTeamContentsDataLifeBodyLifeContentItem!]!
  primary: PrismicTeamContentsDataLifeBodyLifeContentPrimary!
  id: ID!
  slice_type: String!
  slice_label: String
}

union PrismicTeamContentsDataLifeBodySlicesType = PrismicTeamContentsDataLifeBodyLifeContent

type PrismicTeamContentsDataMainBodyKeyVisualPrimaryKeyVisualImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed. 
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamContentsDataMainBodyKeyVisualPrimary {
  description: PrismicStructuredTextType
  expanded: Boolean
  key_visual_image: PrismicTeamContentsDataMainBodyKeyVisualPrimaryKeyVisualImageImageType
}

type PrismicTeamContentsDataMainBodyMemberQuoteCarouselItem {
  member: PrismicLinkType
  quote: String
}

type PrismicTeamContentsDataMainBodyTitleAndDescriptionPrimary {
  description: PrismicStructuredTextType
  key_text: String
  link: PrismicLinkType
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataMainBodyTitleAndIllustrationPrimaryIllustrationImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed. 
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamContentsDataMainBodyTitleAndIllustrationPrimary {
  illustration: PrismicTeamContentsDataMainBodyTitleAndIllustrationPrimaryIllustrationImageType
  key_text: String
  link: PrismicLinkType
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataMainBodyWideBannerPrimaryThumbnailImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image width to render, in px.
    width: Int = 8192

    # The fixed image height to render, in px.
    height: Int

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}
  ): ImgixFluid
  gatsbyImageData(
    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed. 
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192
  ): JSON
  localFile: File
}

type PrismicTeamContentsDataMainBodyWideBannerPrimary {
  background_colo: String
  link: PrismicLinkType
  link_text: String
  thumbnail: PrismicTeamContentsDataMainBodyWideBannerPrimaryThumbnailImageType
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataMainBodyKeyVisual implements PrismicSliceType {
  primary: PrismicTeamContentsDataMainBodyKeyVisualPrimary
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataMainBodyMemberQuoteCarousel implements PrismicSliceType {
  items: [PrismicTeamContentsDataMainBodyMemberQuoteCarouselItem!]!
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataMainBodyTitleAndDescription implements PrismicSliceType {
  primary: PrismicTeamContentsDataMainBodyTitleAndDescriptionPrimary
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataMainBodyTitleAndIllustration implements PrismicSliceType {
  primary: PrismicTeamContentsDataMainBodyTitleAndIllustrationPrimary
  id: ID!
  slice_type: String!
  slice_label: String
}

type PrismicTeamContentsDataMainBodyWideBanner implements PrismicSliceType {
  primary: PrismicTeamContentsDataMainBodyWideBannerPrimary
  id: ID!
  slice_type: String!
  slice_label: String
}

union PrismicTeamContentsDataMainBodySlicesType = PrismicTeamContentsDataMainBodyKeyVisual | PrismicTeamContentsDataMainBodyMemberQuoteCarousel | PrismicTeamContentsDataMainBodyTitleAndDescription | PrismicTeamContentsDataMainBodyTitleAndIllustration | PrismicTeamContentsDataMainBodyWideBanner

type PrismicTeamContentsDataType {
  culture_body: [PrismicTeamContentsDataCultureBodySlicesType!]!
  culture_page_title: PrismicStructuredTextType
  life_body: [PrismicTeamContentsDataLifeBodySlicesType!]!
  life_page_title: PrismicStructuredTextType
  main_body: [PrismicTeamContentsDataMainBodySlicesType!]!
  main_page_title: PrismicStructuredTextType
}

type PrismicTeamContents implements Node {
  data: PrismicTeamContentsDataType!
  dataRaw: JSON!
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type PrismicTermsAndConditionsDataType {
  content: PrismicStructuredTextType
  description: String
  revision_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
}

type PrismicTermsAndConditions implements Node {
  uid: String!
  data: PrismicTermsAndConditionsDataType
  dataRaw: JSON!
  prismicId: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  first_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  lang: String!
  last_publication_date(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  tags: [String!]!
  type: String!
  url: String
  _previewable: ID!
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

union PrismicAllDocumentTypes = PrismicAdsIntro | PrismicFaq | PrismicGlobalContents | PrismicMbtiTestResult | PrismicMbtiIntro | PrismicMbtiTestQuestion | PrismicMemberProfile | PrismicSiteNavigation | PrismicTeamContents | PrismicTermsAndConditions

type JobPost implements Node {
  ghId: String!
  title: String!
  boardUrl: String!
  content: [JobPostContentSection!]!
  rawContent: String!
  corporate: JobCorporate
  employmentType: JobEmploymentType!
  alternativeCivilianService: Boolean!
  priorExperience: JobPriorExperience!
  chapter: String!
  portfolioRequired: Boolean!
  keywords: [String!]!
  gatsbyPath(filePath: String): String
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

enum JobCorporate {
  KARROT_MARKET
  KARROT_PAY
}

enum JobEmploymentType {
  FULL_TIME
  CONTRACTOR
  INTERN
}

enum JobPriorExperience {
  YES
  NO
  WHATEVER
}

enum HeadingLevel {
  H1
  H2
  H3
  H4
  H5
  H6
}

type JobPostContentUnorderedListSection implements JobPostContentSection {
  title: String!
  level: HeadingLevel!
  rawContent: String!
  items: [String!]!
}

type JobPostContentOrderedListSection implements JobPostContentSection {
  title: String!
  level: HeadingLevel!
  rawContent: String!
  items: [String!]!
}

type JobPostContentParagraphSection implements JobPostContentSection {
  title: String!
  level: HeadingLevel!
  rawContent: String!
  paragraph: String!
}

interface JobPostContentSection {
  title: String!
  level: HeadingLevel!
  rawContent: String!
}

enum GreenhouseJobCustomFieldType {
  SHORT_TEXT
  LONG_TEXT
  SINGLE_SELECT
  MULTI_SELECT
  YES_NO
  CURRENCY
  DATE
  URL
  USER
  CURRENCY_RANGE
  NUMBER_RANGE
}

type GreenhouseJob implements Node {
  ghId: String!
  title: String!

  # URL to public Greenhouse job board UI
  boardUrl: String!
  content: String!
  updatedAt(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  metadata: [GreenhouseJobCustomFieldMetadata!]!

  # Returns all children nodes filtered by type JobPost
  childrenJobPost: [JobPost]

  # Returns the first child node of type JobPost or null if there are no children of given type on this node
  childJobPost: JobPost
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
}

type GreenhouseJobCustomFieldMetadata {
  id: String!
  name: String!
  type: GreenhouseJobCustomFieldType!
  value: String
}

type PrismicImageFixedType {
  base64: String
  width: Int
  height: Int
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
}

type PrismicImageFluidType {
  base64: String
  aspectRatio: Float
  src: String
  srcSet: String
  srcWebp: String
  srcSetWebp: String
  sizes: String
}

type Query {
  site(buildTime: DateQueryOperatorInput, siteMetadata: SiteMetadataFilterInput, port: IntQueryOperatorInput, host: StringQueryOperatorInput, flags: SiteFlagsFilterInput, polyfill: BooleanQueryOperatorInput, pathPrefix: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Site
  file(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, url: StringQueryOperatorInput, childrenImageSharp: ImageSharpFilterListInput, childImageSharp: ImageSharpFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): File
  allFile(filter: FileFilterInput, sort: FileSortInput, skip: Int, limit: Int): FileConnection!
  directory(sourceInstanceName: StringQueryOperatorInput, absolutePath: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, extension: StringQueryOperatorInput, size: IntQueryOperatorInput, prettySize: StringQueryOperatorInput, modifiedTime: DateQueryOperatorInput, accessTime: DateQueryOperatorInput, changeTime: DateQueryOperatorInput, birthTime: DateQueryOperatorInput, root: StringQueryOperatorInput, dir: StringQueryOperatorInput, base: StringQueryOperatorInput, ext: StringQueryOperatorInput, name: StringQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, dev: IntQueryOperatorInput, mode: IntQueryOperatorInput, nlink: IntQueryOperatorInput, uid: IntQueryOperatorInput, gid: IntQueryOperatorInput, rdev: IntQueryOperatorInput, ino: FloatQueryOperatorInput, atimeMs: FloatQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, atime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, ctime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): Directory
  allDirectory(filter: DirectoryFilterInput, sort: DirectorySortInput, skip: Int, limit: Int): DirectoryConnection!
  allSite(filter: SiteFilterInput, sort: SiteSortInput, skip: Int, limit: Int): SiteConnection!
  siteFunction(functionRoute: StringQueryOperatorInput, pluginName: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput, absoluteCompiledFilePath: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): SiteFunction
  allSiteFunction(filter: SiteFunctionFilterInput, sort: SiteFunctionSortInput, skip: Int, limit: Int): SiteFunctionConnection!
  sitePage(path: StringQueryOperatorInput, component: StringQueryOperatorInput, internalComponentName: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, isCreatedByStatefulCreatePages: BooleanQueryOperatorInput, pluginCreator: SitePluginFilterInput, pluginCreatorId: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, context: SitePageContextFilterInput): SitePage
  allSitePage(filter: SitePageFilterInput, sort: SitePageSortInput, skip: Int, limit: Int): SitePageConnection!
  imageSharp(fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: JSONQueryOperatorInput, original: ImageSharpOriginalFilterInput, resize: ImageSharpResizeFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): ImageSharp
  allImageSharp(filter: ImageSharpFilterInput, sort: ImageSharpSortInput, skip: Int, limit: Int): ImageSharpConnection!
  prismicEmbedType(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicEmbedType
  allPrismicEmbedType(filter: PrismicEmbedTypeFilterInput, sort: PrismicEmbedTypeSortInput, skip: Int, limit: Int): PrismicEmbedTypeConnection!
  prismicTypePathType(path: StringQueryOperatorInput, type: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicTypePathType
  allPrismicTypePathType(filter: PrismicTypePathTypeFilterInput, sort: PrismicTypePathTypeSortInput, skip: Int, limit: Int): PrismicTypePathTypeConnection!
  prismicAdsIntro(prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicAdsIntro
  allPrismicAdsIntro(filter: PrismicAdsIntroFilterInput, sort: PrismicAdsIntroSortInput, skip: Int, limit: Int): PrismicAdsIntroConnection!
  prismicFaq(uid: StringQueryOperatorInput, data: PrismicFaqDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicFaq
  allPrismicFaq(filter: PrismicFaqFilterInput, sort: PrismicFaqSortInput, skip: Int, limit: Int): PrismicFaqConnection!
  prismicGlobalContents(prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicGlobalContents
  allPrismicGlobalContents(filter: PrismicGlobalContentsFilterInput, sort: PrismicGlobalContentsSortInput, skip: Int, limit: Int): PrismicGlobalContentsConnection!
  prismicMbtiTestResult(prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicMbtiTestResult
  allPrismicMbtiTestResult(filter: PrismicMbtiTestResultFilterInput, sort: PrismicMbtiTestResultSortInput, skip: Int, limit: Int): PrismicMbtiTestResultConnection!
  prismicMbtiIntro(prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicMbtiIntro
  allPrismicMbtiIntro(filter: PrismicMbtiIntroFilterInput, sort: PrismicMbtiIntroSortInput, skip: Int, limit: Int): PrismicMbtiIntroConnection!
  prismicMbtiTestQuestion(prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicMbtiTestQuestion
  allPrismicMbtiTestQuestion(filter: PrismicMbtiTestQuestionFilterInput, sort: PrismicMbtiTestQuestionSortInput, skip: Int, limit: Int): PrismicMbtiTestQuestionConnection!
  prismicMemberProfile(data: PrismicMemberProfileDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicMemberProfile
  allPrismicMemberProfile(filter: PrismicMemberProfileFilterInput, sort: PrismicMemberProfileSortInput, skip: Int, limit: Int): PrismicMemberProfileConnection!
  prismicSiteNavigation(uid: StringQueryOperatorInput, data: PrismicSiteNavigationDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicSiteNavigation
  allPrismicSiteNavigation(filter: PrismicSiteNavigationFilterInput, sort: PrismicSiteNavigationSortInput, skip: Int, limit: Int): PrismicSiteNavigationConnection!
  prismicTeamContents(data: PrismicTeamContentsDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicTeamContents
  allPrismicTeamContents(filter: PrismicTeamContentsFilterInput, sort: PrismicTeamContentsSortInput, skip: Int, limit: Int): PrismicTeamContentsConnection!
  prismicTermsAndConditions(uid: StringQueryOperatorInput, data: PrismicTermsAndConditionsDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, prismicId: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput, _previewable: IDQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): PrismicTermsAndConditions
  allPrismicTermsAndConditions(filter: PrismicTermsAndConditionsFilterInput, sort: PrismicTermsAndConditionsSortInput, skip: Int, limit: Int): PrismicTermsAndConditionsConnection!
  jobPost(ghId: StringQueryOperatorInput, title: StringQueryOperatorInput, boardUrl: StringQueryOperatorInput, content: JobPostContentSectionFilterListInput, rawContent: StringQueryOperatorInput, corporate: JobCorporateQueryOperatorInput, employmentType: JobEmploymentTypeQueryOperatorInput, alternativeCivilianService: BooleanQueryOperatorInput, priorExperience: JobPriorExperienceQueryOperatorInput, chapter: StringQueryOperatorInput, portfolioRequired: BooleanQueryOperatorInput, keywords: StringQueryOperatorInput, gatsbyPath: StringQueryOperatorInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): JobPost
  allJobPost(filter: JobPostFilterInput, sort: JobPostSortInput, skip: Int, limit: Int): JobPostConnection!
  greenhouseJob(ghId: StringQueryOperatorInput, title: StringQueryOperatorInput, boardUrl: StringQueryOperatorInput, content: StringQueryOperatorInput, updatedAt: DateQueryOperatorInput, metadata: GreenhouseJobCustomFieldMetadataFilterListInput, childrenJobPost: JobPostFilterListInput, childJobPost: JobPostFilterInput, id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput): GreenhouseJob
  allGreenhouseJob(filter: GreenhouseJobFilterInput, sort: GreenhouseJobSortInput, skip: Int, limit: Int): GreenhouseJobConnection!
  siteBuildMetadata(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, buildTime: DateQueryOperatorInput): SiteBuildMetadata
  allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, sort: SiteBuildMetadataSortInput, skip: Int, limit: Int): SiteBuildMetadataConnection!
  sitePlugin(id: StringQueryOperatorInput, parent: NodeFilterInput, children: NodeFilterListInput, internal: InternalFilterInput, resolve: StringQueryOperatorInput, name: StringQueryOperatorInput, version: StringQueryOperatorInput, pluginOptions: SitePluginPluginOptionsFilterInput, nodeAPIs: StringQueryOperatorInput, browserAPIs: StringQueryOperatorInput, ssrAPIs: StringQueryOperatorInput, pluginFilepath: StringQueryOperatorInput, packageJson: SitePluginPackageJsonFilterInput): SitePlugin
  allSitePlugin(filter: SitePluginFilterInput, sort: SitePluginSortInput, skip: Int, limit: Int): SitePluginConnection!
}

input DateQueryOperatorInput {
  eq: Date
  ne: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  in: [Date]
  nin: [Date]
}

input SiteMetadataFilterInput {
  siteUrl: StringQueryOperatorInput
}

input StringQueryOperatorInput {
  eq: String
  ne: String
  in: [String]
  nin: [String]
  regex: String
  glob: String
}

input IntQueryOperatorInput {
  eq: Int
  ne: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  in: [Int]
  nin: [Int]
}

input SiteFlagsFilterInput {
  FAST_DEV: BooleanQueryOperatorInput
  QUERY_ON_DEMAND: BooleanQueryOperatorInput
  LAZY_IMAGES: BooleanQueryOperatorInput
  PARALLEL_SOURCING: BooleanQueryOperatorInput
}

input BooleanQueryOperatorInput {
  eq: Boolean
  ne: Boolean
  in: [Boolean]
  nin: [Boolean]
}

input NodeFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input FloatQueryOperatorInput {
  eq: Float
  ne: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  in: [Float]
  nin: [Float]
}

input ImageSharpFilterListInput {
  elemMatch: ImageSharpFilterInput
}

input ImageSharpFilterInput {
  fixed: ImageSharpFixedFilterInput
  fluid: ImageSharpFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  original: ImageSharpOriginalFilterInput
  resize: ImageSharpResizeFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input ImageSharpFixedFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
}

input ImageSharpFluidFilterInput {
  base64: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
}

input JSONQueryOperatorInput {
  eq: JSON
  ne: JSON
  in: [JSON]
  nin: [JSON]
  regex: JSON
  glob: JSON
}

input ImageSharpOriginalFilterInput {
  width: FloatQueryOperatorInput
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
}

input ImageSharpResizeFilterInput {
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
}

type FileConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  distinct(field: FileFieldsEnum!): [String!]!
  max(field: FileFieldsEnum!): Float
  min(field: FileFieldsEnum!): Float
  sum(field: FileFieldsEnum!): Float
  group(skip: Int, limit: Int, field: FileFieldsEnum!): [FileGroupConnection!]!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

type PageInfo {
  currentPage: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

enum FileFieldsEnum {
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  ino
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  birthtime
  birthtimeMs
  blksize
  blocks
  url
  childrenImageSharp
  childrenImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___original___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___original___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___original___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___original___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___original___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___original___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type FileGroupConnection {
  totalCount: Int!
  edges: [FileEdge!]!
  nodes: [File!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input FileFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  url: StringQueryOperatorInput
  childrenImageSharp: ImageSharpFilterListInput
  childImageSharp: ImageSharpFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input FileSortInput {
  fields: [FileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum SortOrderEnum {
  ASC
  DESC
}

type DirectoryConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  distinct(field: DirectoryFieldsEnum!): [String!]!
  max(field: DirectoryFieldsEnum!): Float
  min(field: DirectoryFieldsEnum!): Float
  sum(field: DirectoryFieldsEnum!): Float
  group(skip: Int, limit: Int, field: DirectoryFieldsEnum!): [DirectoryGroupConnection!]!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

enum DirectoryFieldsEnum {
  sourceInstanceName
  absolutePath
  relativePath
  extension
  size
  prettySize
  modifiedTime
  accessTime
  changeTime
  birthTime
  root
  dir
  base
  ext
  name
  relativeDirectory
  dev
  mode
  nlink
  uid
  gid
  rdev
  ino
  atimeMs
  mtimeMs
  ctimeMs
  atime
  mtime
  ctime
  birthtime
  birthtimeMs
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type DirectoryGroupConnection {
  totalCount: Int!
  edges: [DirectoryEdge!]!
  nodes: [Directory!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input DirectoryFilterInput {
  sourceInstanceName: StringQueryOperatorInput
  absolutePath: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  size: IntQueryOperatorInput
  prettySize: StringQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  accessTime: DateQueryOperatorInput
  changeTime: DateQueryOperatorInput
  birthTime: DateQueryOperatorInput
  root: StringQueryOperatorInput
  dir: StringQueryOperatorInput
  base: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  name: StringQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  dev: IntQueryOperatorInput
  mode: IntQueryOperatorInput
  nlink: IntQueryOperatorInput
  uid: IntQueryOperatorInput
  gid: IntQueryOperatorInput
  rdev: IntQueryOperatorInput
  ino: FloatQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  atime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  ctime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input DirectorySortInput {
  fields: [DirectoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  distinct(field: SiteFieldsEnum!): [String!]!
  max(field: SiteFieldsEnum!): Float
  min(field: SiteFieldsEnum!): Float
  sum(field: SiteFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteFieldsEnum!): [SiteGroupConnection!]!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

enum SiteFieldsEnum {
  buildTime
  siteMetadata___siteUrl
  port
  host
  flags___FAST_DEV
  flags___QUERY_ON_DEMAND
  flags___LAZY_IMAGES
  flags___PARALLEL_SOURCING
  polyfill
  pathPrefix
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SiteGroupConnection {
  totalCount: Int!
  edges: [SiteEdge!]!
  nodes: [Site!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  siteMetadata: SiteMetadataFilterInput
  port: IntQueryOperatorInput
  host: StringQueryOperatorInput
  flags: SiteFlagsFilterInput
  polyfill: BooleanQueryOperatorInput
  pathPrefix: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteSortInput {
  fields: [SiteFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteFunctionConnection {
  totalCount: Int!
  edges: [SiteFunctionEdge!]!
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  distinct(field: SiteFunctionFieldsEnum!): [String!]!
  max(field: SiteFunctionFieldsEnum!): Float
  min(field: SiteFunctionFieldsEnum!): Float
  sum(field: SiteFunctionFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteFunctionFieldsEnum!): [SiteFunctionGroupConnection!]!
}

type SiteFunctionEdge {
  next: SiteFunction
  node: SiteFunction!
  previous: SiteFunction
}

enum SiteFunctionFieldsEnum {
  functionRoute
  pluginName
  originalAbsoluteFilePath
  originalRelativeFilePath
  relativeCompiledFilePath
  absoluteCompiledFilePath
  matchPath
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type SiteFunctionGroupConnection {
  totalCount: Int!
  edges: [SiteFunctionEdge!]!
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SiteFunctionFilterInput {
  functionRoute: StringQueryOperatorInput
  pluginName: StringQueryOperatorInput
  originalAbsoluteFilePath: StringQueryOperatorInput
  originalRelativeFilePath: StringQueryOperatorInput
  relativeCompiledFilePath: StringQueryOperatorInput
  absoluteCompiledFilePath: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input SiteFunctionSortInput {
  fields: [SiteFunctionFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input SitePluginFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  resolve: StringQueryOperatorInput
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
  pluginOptions: SitePluginPluginOptionsFilterInput
  nodeAPIs: StringQueryOperatorInput
  browserAPIs: StringQueryOperatorInput
  ssrAPIs: StringQueryOperatorInput
  pluginFilepath: StringQueryOperatorInput
  packageJson: SitePluginPackageJsonFilterInput
}

input SitePluginPluginOptionsFilterInput {
  defaults: SitePluginPluginOptionsDefaultsFilterInput
  base64Width: IntQueryOperatorInput
  stripMetadata: BooleanQueryOperatorInput
  defaultQuality: IntQueryOperatorInput
  failOnError: BooleanQueryOperatorInput
  root: StringQueryOperatorInput
  aliases: SitePluginPluginOptionsAliasesFilterInput
  component: StringQueryOperatorInput
  outputPath: StringQueryOperatorInput
  emitSchema: SitePluginPluginOptionsEmitSchemaFilterInput
  emitPluginDocuments: SitePluginPluginOptionsEmitPluginDocumentsFilterInput
  repositoryName: StringQueryOperatorInput
  schemas: SitePluginPluginOptionsSchemasFilterInput
  apiEndpoint: StringQueryOperatorInput
  customTypesApiEndpoint: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  imageImgixParams: SitePluginPluginOptionsImageImgixParamsFilterInput
  imagePlaceholderImgixParams: SitePluginPluginOptionsImagePlaceholderImgixParamsFilterInput
  toolbar: StringQueryOperatorInput
  promptForAccessToken: BooleanQueryOperatorInput
  boardToken: StringQueryOperatorInput
  includeContent: BooleanQueryOperatorInput
  path: StringQueryOperatorInput
  pathCheck: BooleanQueryOperatorInput
  allExtensions: BooleanQueryOperatorInput
  isTSX: BooleanQueryOperatorInput
  jsxPragma: StringQueryOperatorInput
}

input SitePluginPluginOptionsDefaultsFilterInput {
  formats: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
  quality: IntQueryOperatorInput
  breakpoints: IntQueryOperatorInput
  backgroundColor: StringQueryOperatorInput
}

input SitePluginPluginOptionsAliasesFilterInput {
  _: StringQueryOperatorInput
}

input SitePluginPluginOptionsEmitSchemaFilterInput {
  src___generated___gatsby_schema_graphql: BooleanQueryOperatorInput
  src___generated___gatsby_introspection_json: BooleanQueryOperatorInput
}

input SitePluginPluginOptionsEmitPluginDocumentsFilterInput {
  src___generated___gatsby_plugin_documents_graphql: BooleanQueryOperatorInput
}

input SitePluginPluginOptionsSchemasFilterInput {
  faq: SitePluginPluginOptionsSchemasFaqFilterInput
  site_navigation: SitePluginPluginOptionsSchemasSite_navigationFilterInput
  terms_and_conditions: SitePluginPluginOptionsSchemasTerms_and_conditionsFilterInput
  member_profile: SitePluginPluginOptionsSchemasMember_profileFilterInput
  team_contents: SitePluginPluginOptionsSchemasTeam_contentsFilterInput
}

input SitePluginPluginOptionsSchemasFaqFilterInput {
  Main: SitePluginPluginOptionsSchemasFaqMainFilterInput
}

input SitePluginPluginOptionsSchemasFaqMainFilterInput {
  uid: SitePluginPluginOptionsSchemasFaqMainUidFilterInput
  entries: SitePluginPluginOptionsSchemasFaqMainEntriesFilterInput
}

input SitePluginPluginOptionsSchemasFaqMainUidFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasFaqMainUidConfigFilterInput
}

input SitePluginPluginOptionsSchemasFaqMainUidConfigFilterInput {
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasFaqMainEntriesFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasFaqMainEntriesConfigFilterInput
}

input SitePluginPluginOptionsSchemasFaqMainEntriesConfigFilterInput {
  fields: SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsFilterInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsFilterInput {
  question: SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsQuestionFilterInput
  answer: SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsAnswerFilterInput
}

input SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsQuestionFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsQuestionConfigFilterInput
}

input SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsQuestionConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsAnswerFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsAnswerConfigFilterInput
}

input SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsAnswerConfigFilterInput {
  multi: StringQueryOperatorInput
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSite_navigationFilterInput {
  Main: SitePluginPluginOptionsSchemasSite_navigationMainFilterInput
  Header: SitePluginPluginOptionsSchemasSite_navigationHeaderFilterInput
  Footer: SitePluginPluginOptionsSchemasSite_navigationFooterFilterInput
  SNS_Profile: SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationMainFilterInput {
  uid: SitePluginPluginOptionsSchemasSite_navigationMainUidFilterInput
  address: SitePluginPluginOptionsSchemasSite_navigationMainAddressFilterInput
  tel: SitePluginPluginOptionsSchemasSite_navigationMainTelFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationMainUidFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasSite_navigationMainUidConfigFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationMainUidConfigFilterInput {
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSite_navigationMainAddressFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasSite_navigationMainAddressConfigFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationMainAddressConfigFilterInput {
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSite_navigationMainTelFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasSite_navigationMainTelConfigFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationMainTelConfigFilterInput {
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSite_navigationHeaderFilterInput {
  header_entries: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFilterInput {
  fields: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsFilterInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsFilterInput {
  display_text: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsDisplay_textFilterInput
  link: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsLinkFilterInput
  group: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsGroupFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsDisplay_textFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsDisplay_textConfigFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsDisplay_textConfigFilterInput {
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsLinkFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsLinkConfigFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsLinkConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsGroupFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsGroupConfigFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsGroupConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSite_navigationFooterFilterInput {
  footer_entries: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFilterInput {
  fields: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsFilterInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsFilterInput {
  display_text: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsDisplay_textFilterInput
  link: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsLinkFilterInput
  group: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsGroupFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsDisplay_textFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsDisplay_textConfigFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsDisplay_textConfigFilterInput {
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsLinkFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsLinkConfigFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsLinkConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsGroupFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsGroupConfigFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsGroupConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileFilterInput {
  sns_profiles: SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFilterInput {
  fields: SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsFilterInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsFilterInput {
  service: SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsServiceFilterInput
  link: SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsLinkFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsServiceFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsServiceConfigFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsServiceConfigFilterInput {
  options: StringQueryOperatorInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsLinkFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsLinkConfigFilterInput
}

input SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsLinkConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTerms_and_conditionsFilterInput {
  Main: SitePluginPluginOptionsSchemasTerms_and_conditionsMainFilterInput
}

input SitePluginPluginOptionsSchemasTerms_and_conditionsMainFilterInput {
  uid: SitePluginPluginOptionsSchemasTerms_and_conditionsMainUidFilterInput
  description: SitePluginPluginOptionsSchemasTerms_and_conditionsMainDescriptionFilterInput
  revision_date: SitePluginPluginOptionsSchemasTerms_and_conditionsMainRevision_dateFilterInput
  content: SitePluginPluginOptionsSchemasTerms_and_conditionsMainContentFilterInput
}

input SitePluginPluginOptionsSchemasTerms_and_conditionsMainUidFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTerms_and_conditionsMainUidConfigFilterInput
}

input SitePluginPluginOptionsSchemasTerms_and_conditionsMainUidConfigFilterInput {
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTerms_and_conditionsMainDescriptionFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTerms_and_conditionsMainDescriptionConfigFilterInput
}

input SitePluginPluginOptionsSchemasTerms_and_conditionsMainDescriptionConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTerms_and_conditionsMainRevision_dateFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTerms_and_conditionsMainRevision_dateConfigFilterInput
}

input SitePluginPluginOptionsSchemasTerms_and_conditionsMainRevision_dateConfigFilterInput {
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTerms_and_conditionsMainContentFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTerms_and_conditionsMainContentConfigFilterInput
}

input SitePluginPluginOptionsSchemasTerms_and_conditionsMainContentConfigFilterInput {
  multi: StringQueryOperatorInput
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasMember_profileFilterInput {
  Main: SitePluginPluginOptionsSchemasMember_profileMainFilterInput
}

input SitePluginPluginOptionsSchemasMember_profileMainFilterInput {
  nickname: SitePluginPluginOptionsSchemasMember_profileMainNicknameFilterInput
  name: SitePluginPluginOptionsSchemasMember_profileMainNameFilterInput
  email: SitePluginPluginOptionsSchemasMember_profileMainEmailFilterInput
  role: SitePluginPluginOptionsSchemasMember_profileMainRoleFilterInput
  image: SitePluginPluginOptionsSchemasMember_profileMainImageFilterInput
}

input SitePluginPluginOptionsSchemasMember_profileMainNicknameFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasMember_profileMainNicknameConfigFilterInput
}

input SitePluginPluginOptionsSchemasMember_profileMainNicknameConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasMember_profileMainNameFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasMember_profileMainNameConfigFilterInput
}

input SitePluginPluginOptionsSchemasMember_profileMainNameConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasMember_profileMainEmailFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasMember_profileMainEmailConfigFilterInput
}

input SitePluginPluginOptionsSchemasMember_profileMainEmailConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasMember_profileMainRoleFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasMember_profileMainRoleConfigFilterInput
}

input SitePluginPluginOptionsSchemasMember_profileMainRoleConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasMember_profileMainImageFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasMember_profileMainImageConfigFilterInput
}

input SitePluginPluginOptionsSchemasMember_profileMainImageConfigFilterInput {
  constraint: SitePluginPluginOptionsSchemasMember_profileMainImageConfigConstraintFilterInput
  thumbnails: SitePluginPluginOptionsSchemasMember_profileMainImageConfigThumbnailsFilterListInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasMember_profileMainImageConfigConstraintFilterInput {
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
}

input SitePluginPluginOptionsSchemasMember_profileMainImageConfigThumbnailsFilterListInput {
  elemMatch: SitePluginPluginOptionsSchemasMember_profileMainImageConfigThumbnailsFilterInput
}

input SitePluginPluginOptionsSchemasMember_profileMainImageConfigThumbnailsFilterInput {
  name: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsFilterInput {
  Main: SitePluginPluginOptionsSchemasTeam_contentsMainFilterInput
  Culture: SitePluginPluginOptionsSchemasTeam_contentsCultureFilterInput
  Life: SitePluginPluginOptionsSchemasTeam_contentsLifeFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainFilterInput {
  main_page_title: SitePluginPluginOptionsSchemasTeam_contentsMainMain_page_titleFilterInput
  main_body: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_page_titleFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_page_titleConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_page_titleConfigFilterInput {
  single: StringQueryOperatorInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyFilterInput {
  type: StringQueryOperatorInput
  fieldset: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigFilterInput {
  choices: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesFilterInput {
  key_visual: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualFilterInput
  member_quote_carousel: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselFilterInput
  title_and_description: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionFilterInput
  title_and_illustration: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationFilterInput
  wide_banner: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualFilterInput {
  type: StringQueryOperatorInput
  fieldset: StringQueryOperatorInput
  description: StringQueryOperatorInput
  icon: StringQueryOperatorInput
  non_repeat: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatFilterInput {
  key_visual_image: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageFilterInput
  expanded: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatExpandedFilterInput
  description: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatDescriptionFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageConfigFilterInput {
  constraint: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageConfigConstraintFilterInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageConfigConstraintFilterInput {
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatExpandedFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatExpandedConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatExpandedConfigFilterInput {
  placeholder_false: StringQueryOperatorInput
  placeholder_true: StringQueryOperatorInput
  default_value: BooleanQueryOperatorInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatDescriptionFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatDescriptionConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatDescriptionConfigFilterInput {
  single: StringQueryOperatorInput
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselFilterInput {
  type: StringQueryOperatorInput
  fieldset: StringQueryOperatorInput
  description: StringQueryOperatorInput
  icon: StringQueryOperatorInput
  display: StringQueryOperatorInput
  repeat: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatFilterInput {
  member: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatMemberFilterInput
  quote: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatQuoteFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatMemberFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatMemberConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatMemberConfigFilterInput {
  select: StringQueryOperatorInput
  customtypes: StringQueryOperatorInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatQuoteFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatQuoteConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatQuoteConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionFilterInput {
  type: StringQueryOperatorInput
  fieldset: StringQueryOperatorInput
  description: StringQueryOperatorInput
  icon: StringQueryOperatorInput
  display: StringQueryOperatorInput
  non_repeat: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatFilterInput {
  key_text: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatKey_textFilterInput
  title: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatTitleFilterInput
  link: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatLinkFilterInput
  description: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatDescriptionFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatKey_textFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatKey_textConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatKey_textConfigFilterInput {
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatTitleFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatTitleConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatTitleConfigFilterInput {
  single: StringQueryOperatorInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatLinkFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatLinkConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatLinkConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatDescriptionFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatDescriptionConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatDescriptionConfigFilterInput {
  multi: StringQueryOperatorInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationFilterInput {
  type: StringQueryOperatorInput
  fieldset: StringQueryOperatorInput
  description: StringQueryOperatorInput
  icon: StringQueryOperatorInput
  display: StringQueryOperatorInput
  non_repeat: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatFilterInput {
  key_text: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatKey_textFilterInput
  title: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatTitleFilterInput
  link: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatLinkFilterInput
  illustration: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatIllustrationFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatKey_textFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatKey_textConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatKey_textConfigFilterInput {
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatTitleFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatTitleConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatTitleConfigFilterInput {
  single: StringQueryOperatorInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatLinkFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatLinkConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatLinkConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatIllustrationFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatIllustrationConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatIllustrationConfigFilterInput {
  constraint: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatIllustrationConfigConstraintFilterInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatIllustrationConfigConstraintFilterInput {
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerFilterInput {
  type: StringQueryOperatorInput
  fieldset: StringQueryOperatorInput
  description: StringQueryOperatorInput
  icon: StringQueryOperatorInput
  display: StringQueryOperatorInput
  non_repeat: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatFilterInput {
  thumbnail: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatThumbnailFilterInput
  title: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatTitleFilterInput
  link: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatLinkFilterInput
  link_text: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatLink_textFilterInput
  background_colo: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatBackground_coloFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatThumbnailFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatThumbnailConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatThumbnailConfigFilterInput {
  constraint: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatThumbnailConfigConstraintFilterInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatThumbnailConfigConstraintFilterInput {
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatTitleFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatTitleConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatTitleConfigFilterInput {
  single: StringQueryOperatorInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatLinkFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatLinkConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatLinkConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatLink_textFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatLink_textConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatLink_textConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatBackground_coloFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatBackground_coloConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatBackground_coloConfigFilterInput {
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsCultureFilterInput {
  culture_page_title: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_page_titleFilterInput
  culture_body: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_page_titleFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_page_titleConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_page_titleConfigFilterInput {
  single: StringQueryOperatorInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyFilterInput {
  type: StringQueryOperatorInput
  fieldset: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigFilterInput {
  choices: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesFilterInput {
  key_visual: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualFilterInput {
  type: StringQueryOperatorInput
  fieldset: StringQueryOperatorInput
  description: StringQueryOperatorInput
  icon: StringQueryOperatorInput
  non_repeat: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatFilterInput
  display: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatFilterInput {
  key_visual_image: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageFilterInput
  expanded: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatExpandedFilterInput
  description: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatDescriptionFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageConfigFilterInput {
  constraint: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageConfigConstraintFilterInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageConfigConstraintFilterInput {
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatExpandedFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatExpandedConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatExpandedConfigFilterInput {
  placeholder_false: StringQueryOperatorInput
  placeholder_true: StringQueryOperatorInput
  default_value: BooleanQueryOperatorInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatDescriptionFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatDescriptionConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatDescriptionConfigFilterInput {
  single: StringQueryOperatorInput
  label: StringQueryOperatorInput
  placeholder: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeFilterInput {
  life_page_title: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_page_titleFilterInput
  life_body: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_page_titleFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_page_titleConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_page_titleConfigFilterInput {
  single: StringQueryOperatorInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyFilterInput {
  type: StringQueryOperatorInput
  fieldset: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigFilterInput {
  choices: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesFilterInput {
  life_content: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentFilterInput {
  type: StringQueryOperatorInput
  fieldset: StringQueryOperatorInput
  description: StringQueryOperatorInput
  icon: StringQueryOperatorInput
  display: StringQueryOperatorInput
  non_repeat: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatFilterInput
  repeat: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatFilterInput {
  title: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatTitleFilterInput
  body_text: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatBody_textFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatTitleFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatTitleConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatTitleConfigFilterInput {
  single: StringQueryOperatorInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatBody_textFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatBody_textConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatBody_textConfigFilterInput {
  multi: StringQueryOperatorInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatFilterInput {
  thumbnail_image: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_imageFilterInput
  thumbnail_description: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_descriptionFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_imageFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_imageConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_imageConfigFilterInput {
  constraint: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_imageConfigConstraintFilterInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_imageConfigConstraintFilterInput {
  width: IntQueryOperatorInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_descriptionFilterInput {
  type: StringQueryOperatorInput
  config: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_descriptionConfigFilterInput
}

input SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_descriptionConfigFilterInput {
  single: StringQueryOperatorInput
  label: StringQueryOperatorInput
}

input SitePluginPluginOptionsImageImgixParamsFilterInput {
  auto: StringQueryOperatorInput
  fit: StringQueryOperatorInput
  q: IntQueryOperatorInput
}

input SitePluginPluginOptionsImagePlaceholderImgixParamsFilterInput {
  w: IntQueryOperatorInput
  blur: IntQueryOperatorInput
}

input SitePluginPackageJsonFilterInput {
  name: StringQueryOperatorInput
  description: StringQueryOperatorInput
  version: StringQueryOperatorInput
  main: StringQueryOperatorInput
  license: StringQueryOperatorInput
  dependencies: SitePluginPackageJsonDependenciesFilterListInput
  devDependencies: SitePluginPackageJsonDevDependenciesFilterListInput
  peerDependencies: SitePluginPackageJsonPeerDependenciesFilterListInput
  keywords: StringQueryOperatorInput
}

input SitePluginPackageJsonDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonDependenciesFilterInput
}

input SitePluginPackageJsonDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonDevDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonDevDependenciesFilterInput
}

input SitePluginPackageJsonDevDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePluginPackageJsonPeerDependenciesFilterListInput {
  elemMatch: SitePluginPackageJsonPeerDependenciesFilterInput
}

input SitePluginPackageJsonPeerDependenciesFilterInput {
  name: StringQueryOperatorInput
  version: StringQueryOperatorInput
}

input SitePageContextFilterInput {
  id: StringQueryOperatorInput
  parent__ghId: StringQueryOperatorInput
  _xparams: SitePageContext_xparamsFilterInput
}

input SitePageContext_xparamsFilterInput {
  parent__ghId: StringQueryOperatorInput
}

type SitePageConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  distinct(field: SitePageFieldsEnum!): [String!]!
  max(field: SitePageFieldsEnum!): Float
  min(field: SitePageFieldsEnum!): Float
  sum(field: SitePageFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SitePageFieldsEnum!): [SitePageGroupConnection!]!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

enum SitePageFieldsEnum {
  path
  component
  internalComponentName
  componentChunkName
  matchPath
  isCreatedByStatefulCreatePages
  pluginCreator___id
  pluginCreator___parent___id
  pluginCreator___parent___parent___id
  pluginCreator___parent___parent___children
  pluginCreator___parent___children
  pluginCreator___parent___children___id
  pluginCreator___parent___children___children
  pluginCreator___parent___internal___content
  pluginCreator___parent___internal___contentDigest
  pluginCreator___parent___internal___description
  pluginCreator___parent___internal___fieldOwners
  pluginCreator___parent___internal___ignoreType
  pluginCreator___parent___internal___mediaType
  pluginCreator___parent___internal___owner
  pluginCreator___parent___internal___type
  pluginCreator___children
  pluginCreator___children___id
  pluginCreator___children___parent___id
  pluginCreator___children___parent___children
  pluginCreator___children___children
  pluginCreator___children___children___id
  pluginCreator___children___children___children
  pluginCreator___children___internal___content
  pluginCreator___children___internal___contentDigest
  pluginCreator___children___internal___description
  pluginCreator___children___internal___fieldOwners
  pluginCreator___children___internal___ignoreType
  pluginCreator___children___internal___mediaType
  pluginCreator___children___internal___owner
  pluginCreator___children___internal___type
  pluginCreator___internal___content
  pluginCreator___internal___contentDigest
  pluginCreator___internal___description
  pluginCreator___internal___fieldOwners
  pluginCreator___internal___ignoreType
  pluginCreator___internal___mediaType
  pluginCreator___internal___owner
  pluginCreator___internal___type
  pluginCreator___resolve
  pluginCreator___name
  pluginCreator___version
  pluginCreator___pluginOptions___defaults___formats
  pluginCreator___pluginOptions___defaults___placeholder
  pluginCreator___pluginOptions___defaults___quality
  pluginCreator___pluginOptions___defaults___breakpoints
  pluginCreator___pluginOptions___defaults___backgroundColor
  pluginCreator___pluginOptions___base64Width
  pluginCreator___pluginOptions___stripMetadata
  pluginCreator___pluginOptions___defaultQuality
  pluginCreator___pluginOptions___failOnError
  pluginCreator___pluginOptions___root
  pluginCreator___pluginOptions___aliases____
  pluginCreator___pluginOptions___component
  pluginCreator___pluginOptions___outputPath
  pluginCreator___pluginOptions___emitSchema___src___generated___gatsby_schema_graphql
  pluginCreator___pluginOptions___emitSchema___src___generated___gatsby_introspection_json
  pluginCreator___pluginOptions___emitPluginDocuments___src___generated___gatsby_plugin_documents_graphql
  pluginCreator___pluginOptions___repositoryName
  pluginCreator___pluginOptions___apiEndpoint
  pluginCreator___pluginOptions___customTypesApiEndpoint
  pluginCreator___pluginOptions___lang
  pluginCreator___pluginOptions___imageImgixParams___auto
  pluginCreator___pluginOptions___imageImgixParams___fit
  pluginCreator___pluginOptions___imageImgixParams___q
  pluginCreator___pluginOptions___imagePlaceholderImgixParams___w
  pluginCreator___pluginOptions___imagePlaceholderImgixParams___blur
  pluginCreator___pluginOptions___toolbar
  pluginCreator___pluginOptions___promptForAccessToken
  pluginCreator___pluginOptions___boardToken
  pluginCreator___pluginOptions___includeContent
  pluginCreator___pluginOptions___path
  pluginCreator___pluginOptions___pathCheck
  pluginCreator___pluginOptions___allExtensions
  pluginCreator___pluginOptions___isTSX
  pluginCreator___pluginOptions___jsxPragma
  pluginCreator___nodeAPIs
  pluginCreator___browserAPIs
  pluginCreator___ssrAPIs
  pluginCreator___pluginFilepath
  pluginCreator___packageJson___name
  pluginCreator___packageJson___description
  pluginCreator___packageJson___version
  pluginCreator___packageJson___main
  pluginCreator___packageJson___license
  pluginCreator___packageJson___dependencies
  pluginCreator___packageJson___dependencies___name
  pluginCreator___packageJson___dependencies___version
  pluginCreator___packageJson___devDependencies
  pluginCreator___packageJson___devDependencies___name
  pluginCreator___packageJson___devDependencies___version
  pluginCreator___packageJson___peerDependencies
  pluginCreator___packageJson___peerDependencies___name
  pluginCreator___packageJson___peerDependencies___version
  pluginCreator___packageJson___keywords
  pluginCreatorId
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  context___id
  context___parent__ghId
  context____xparams___parent__ghId
}

type SitePageGroupConnection {
  totalCount: Int!
  edges: [SitePageEdge!]!
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SitePageFilterInput {
  path: StringQueryOperatorInput
  component: StringQueryOperatorInput
  internalComponentName: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  isCreatedByStatefulCreatePages: BooleanQueryOperatorInput
  pluginCreator: SitePluginFilterInput
  pluginCreatorId: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  context: SitePageContextFilterInput
}

input SitePageSortInput {
  fields: [SitePageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ImageSharpConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  max(field: ImageSharpFieldsEnum!): Float
  min(field: ImageSharpFieldsEnum!): Float
  sum(field: ImageSharpFieldsEnum!): Float
  group(skip: Int, limit: Int, field: ImageSharpFieldsEnum!): [ImageSharpGroupConnection!]!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

enum ImageSharpFieldsEnum {
  fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  original___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  original___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  original___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
}

type ImageSharpGroupConnection {
  totalCount: Int!
  edges: [ImageSharpEdge!]!
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input ImageSharpSortInput {
  fields: [ImageSharpFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicEmbedTypeConnection {
  totalCount: Int!
  edges: [PrismicEmbedTypeEdge!]!
  nodes: [PrismicEmbedType!]!
  pageInfo: PageInfo!
  distinct(field: PrismicEmbedTypeFieldsEnum!): [String!]!
  max(field: PrismicEmbedTypeFieldsEnum!): Float
  min(field: PrismicEmbedTypeFieldsEnum!): Float
  sum(field: PrismicEmbedTypeFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicEmbedTypeFieldsEnum!): [PrismicEmbedTypeGroupConnection!]!
}

type PrismicEmbedTypeEdge {
  next: PrismicEmbedType
  node: PrismicEmbedType!
  previous: PrismicEmbedType
}

enum PrismicEmbedTypeFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicEmbedTypeGroupConnection {
  totalCount: Int!
  edges: [PrismicEmbedTypeEdge!]!
  nodes: [PrismicEmbedType!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input PrismicEmbedTypeFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicEmbedTypeSortInput {
  fields: [PrismicEmbedTypeFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicTypePathTypeConnection {
  totalCount: Int!
  edges: [PrismicTypePathTypeEdge!]!
  nodes: [PrismicTypePathType!]!
  pageInfo: PageInfo!
  distinct(field: PrismicTypePathTypeFieldsEnum!): [String!]!
  max(field: PrismicTypePathTypeFieldsEnum!): Float
  min(field: PrismicTypePathTypeFieldsEnum!): Float
  sum(field: PrismicTypePathTypeFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicTypePathTypeFieldsEnum!): [PrismicTypePathTypeGroupConnection!]!
}

type PrismicTypePathTypeEdge {
  next: PrismicTypePathType
  node: PrismicTypePathType!
  previous: PrismicTypePathType
}

enum PrismicTypePathTypeFieldsEnum {
  path
  type
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicTypePathTypeGroupConnection {
  totalCount: Int!
  edges: [PrismicTypePathTypeEdge!]!
  nodes: [PrismicTypePathType!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input PrismicTypePathTypeFilterInput {
  path: StringQueryOperatorInput
  type: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicTypePathTypeSortInput {
  fields: [PrismicTypePathTypeFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input IDQueryOperatorInput {
  eq: ID
  ne: ID
  in: [ID]
  nin: [ID]
}

input PrismicAlternateLanguageTypeFilterListInput {
  elemMatch: PrismicAlternateLanguageTypeFilterInput
}

input PrismicAlternateLanguageTypeFilterInput {
  id: IDQueryOperatorInput
  uid: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  type: StringQueryOperatorInput
  raw: JSONQueryOperatorInput
}

type PrismicAdsIntroConnection {
  totalCount: Int!
  edges: [PrismicAdsIntroEdge!]!
  nodes: [PrismicAdsIntro!]!
  pageInfo: PageInfo!
  distinct(field: PrismicAdsIntroFieldsEnum!): [String!]!
  max(field: PrismicAdsIntroFieldsEnum!): Float
  min(field: PrismicAdsIntroFieldsEnum!): Float
  sum(field: PrismicAdsIntroFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicAdsIntroFieldsEnum!): [PrismicAdsIntroGroupConnection!]!
}

type PrismicAdsIntroEdge {
  next: PrismicAdsIntro
  node: PrismicAdsIntro!
  previous: PrismicAdsIntro
}

enum PrismicAdsIntroFieldsEnum {
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicAdsIntroGroupConnection {
  totalCount: Int!
  edges: [PrismicAdsIntroEdge!]!
  nodes: [PrismicAdsIntro!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input PrismicAdsIntroFilterInput {
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicAdsIntroSortInput {
  fields: [PrismicAdsIntroFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicFaqDataTypeFilterInput {
  entries: PrismicFaqDataEntriesFilterListInput
}

input PrismicFaqDataEntriesFilterListInput {
  elemMatch: PrismicFaqDataEntriesFilterInput
}

input PrismicFaqDataEntriesFilterInput {
  answer: PrismicStructuredTextTypeFilterInput
  question: StringQueryOperatorInput
}

input PrismicStructuredTextTypeFilterInput {
  text: StringQueryOperatorInput
  html: StringQueryOperatorInput
  raw: JSONQueryOperatorInput
}

type PrismicFaqConnection {
  totalCount: Int!
  edges: [PrismicFaqEdge!]!
  nodes: [PrismicFaq!]!
  pageInfo: PageInfo!
  distinct(field: PrismicFaqFieldsEnum!): [String!]!
  max(field: PrismicFaqFieldsEnum!): Float
  min(field: PrismicFaqFieldsEnum!): Float
  sum(field: PrismicFaqFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicFaqFieldsEnum!): [PrismicFaqGroupConnection!]!
}

type PrismicFaqEdge {
  next: PrismicFaq
  node: PrismicFaq!
  previous: PrismicFaq
}

enum PrismicFaqFieldsEnum {
  uid
  data___entries
  data___entries___answer___text
  data___entries___answer___html
  data___entries___answer___raw
  data___entries___question
  dataRaw
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicFaqGroupConnection {
  totalCount: Int!
  edges: [PrismicFaqEdge!]!
  nodes: [PrismicFaq!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input PrismicFaqFilterInput {
  uid: StringQueryOperatorInput
  data: PrismicFaqDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicFaqSortInput {
  fields: [PrismicFaqFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicGlobalContentsConnection {
  totalCount: Int!
  edges: [PrismicGlobalContentsEdge!]!
  nodes: [PrismicGlobalContents!]!
  pageInfo: PageInfo!
  distinct(field: PrismicGlobalContentsFieldsEnum!): [String!]!
  max(field: PrismicGlobalContentsFieldsEnum!): Float
  min(field: PrismicGlobalContentsFieldsEnum!): Float
  sum(field: PrismicGlobalContentsFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicGlobalContentsFieldsEnum!): [PrismicGlobalContentsGroupConnection!]!
}

type PrismicGlobalContentsEdge {
  next: PrismicGlobalContents
  node: PrismicGlobalContents!
  previous: PrismicGlobalContents
}

enum PrismicGlobalContentsFieldsEnum {
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicGlobalContentsGroupConnection {
  totalCount: Int!
  edges: [PrismicGlobalContentsEdge!]!
  nodes: [PrismicGlobalContents!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input PrismicGlobalContentsFilterInput {
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicGlobalContentsSortInput {
  fields: [PrismicGlobalContentsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicMbtiTestResultConnection {
  totalCount: Int!
  edges: [PrismicMbtiTestResultEdge!]!
  nodes: [PrismicMbtiTestResult!]!
  pageInfo: PageInfo!
  distinct(field: PrismicMbtiTestResultFieldsEnum!): [String!]!
  max(field: PrismicMbtiTestResultFieldsEnum!): Float
  min(field: PrismicMbtiTestResultFieldsEnum!): Float
  sum(field: PrismicMbtiTestResultFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicMbtiTestResultFieldsEnum!): [PrismicMbtiTestResultGroupConnection!]!
}

type PrismicMbtiTestResultEdge {
  next: PrismicMbtiTestResult
  node: PrismicMbtiTestResult!
  previous: PrismicMbtiTestResult
}

enum PrismicMbtiTestResultFieldsEnum {
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicMbtiTestResultGroupConnection {
  totalCount: Int!
  edges: [PrismicMbtiTestResultEdge!]!
  nodes: [PrismicMbtiTestResult!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input PrismicMbtiTestResultFilterInput {
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicMbtiTestResultSortInput {
  fields: [PrismicMbtiTestResultFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicMbtiIntroConnection {
  totalCount: Int!
  edges: [PrismicMbtiIntroEdge!]!
  nodes: [PrismicMbtiIntro!]!
  pageInfo: PageInfo!
  distinct(field: PrismicMbtiIntroFieldsEnum!): [String!]!
  max(field: PrismicMbtiIntroFieldsEnum!): Float
  min(field: PrismicMbtiIntroFieldsEnum!): Float
  sum(field: PrismicMbtiIntroFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicMbtiIntroFieldsEnum!): [PrismicMbtiIntroGroupConnection!]!
}

type PrismicMbtiIntroEdge {
  next: PrismicMbtiIntro
  node: PrismicMbtiIntro!
  previous: PrismicMbtiIntro
}

enum PrismicMbtiIntroFieldsEnum {
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicMbtiIntroGroupConnection {
  totalCount: Int!
  edges: [PrismicMbtiIntroEdge!]!
  nodes: [PrismicMbtiIntro!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input PrismicMbtiIntroFilterInput {
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicMbtiIntroSortInput {
  fields: [PrismicMbtiIntroFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicMbtiTestQuestionConnection {
  totalCount: Int!
  edges: [PrismicMbtiTestQuestionEdge!]!
  nodes: [PrismicMbtiTestQuestion!]!
  pageInfo: PageInfo!
  distinct(field: PrismicMbtiTestQuestionFieldsEnum!): [String!]!
  max(field: PrismicMbtiTestQuestionFieldsEnum!): Float
  min(field: PrismicMbtiTestQuestionFieldsEnum!): Float
  sum(field: PrismicMbtiTestQuestionFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicMbtiTestQuestionFieldsEnum!): [PrismicMbtiTestQuestionGroupConnection!]!
}

type PrismicMbtiTestQuestionEdge {
  next: PrismicMbtiTestQuestion
  node: PrismicMbtiTestQuestion!
  previous: PrismicMbtiTestQuestion
}

enum PrismicMbtiTestQuestionFieldsEnum {
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicMbtiTestQuestionGroupConnection {
  totalCount: Int!
  edges: [PrismicMbtiTestQuestionEdge!]!
  nodes: [PrismicMbtiTestQuestion!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input PrismicMbtiTestQuestionFilterInput {
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicMbtiTestQuestionSortInput {
  fields: [PrismicMbtiTestQuestionFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicMemberProfileDataTypeFilterInput {
  email: StringQueryOperatorInput
  image: PrismicMemberProfileDataImageImageTypeFilterInput
  name: StringQueryOperatorInput
  nickname: StringQueryOperatorInput
  role: StringQueryOperatorInput
}

input PrismicMemberProfileDataImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  url: StringQueryOperatorInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  thumbnails: PrismicMemberProfileDataImageImageThumbnailsTypeFilterInput
}

input PrismicImageDimensionsTypeFilterInput {
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
}

input ImgixFixedFilterInput {
  base64: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  width: IntQueryOperatorInput
  height: IntQueryOperatorInput
}

input ImgixFluidFilterInput {
  base64: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  aspectRatio: FloatQueryOperatorInput
}

input PrismicMemberProfileDataImageImageThumbnailsTypeFilterInput {
  small_banner: PrismicImageThumbnailTypeFilterInput
  wide_banner: PrismicImageThumbnailTypeFilterInput
}

input PrismicImageThumbnailTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  url: StringQueryOperatorInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
}

type PrismicMemberProfileConnection {
  totalCount: Int!
  edges: [PrismicMemberProfileEdge!]!
  nodes: [PrismicMemberProfile!]!
  pageInfo: PageInfo!
  distinct(field: PrismicMemberProfileFieldsEnum!): [String!]!
  max(field: PrismicMemberProfileFieldsEnum!): Float
  min(field: PrismicMemberProfileFieldsEnum!): Float
  sum(field: PrismicMemberProfileFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicMemberProfileFieldsEnum!): [PrismicMemberProfileGroupConnection!]!
}

type PrismicMemberProfileEdge {
  next: PrismicMemberProfile
  node: PrismicMemberProfile!
  previous: PrismicMemberProfile
}

enum PrismicMemberProfileFieldsEnum {
  data___email
  data___image___alt
  data___image___copyright
  data___image___dimensions___width
  data___image___dimensions___height
  data___image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___sourceInstanceName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___absolutePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___relativePath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___extension @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___size @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___prettySize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___modifiedTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___accessTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___changeTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___birthTime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___root @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___dir @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___base @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___ext @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___name @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___relativeDirectory @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___dev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___mode @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___nlink @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___uid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___gid @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___rdev @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___ino @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___atimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___mtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___ctimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___atime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___mtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___ctime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___birthtime @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___birthtimeMs @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___blksize @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___blocks @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___childrenImageSharp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___name
  data___nickname
  data___role
  dataRaw
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicMemberProfileGroupConnection {
  totalCount: Int!
  edges: [PrismicMemberProfileEdge!]!
  nodes: [PrismicMemberProfile!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input PrismicMemberProfileFilterInput {
  data: PrismicMemberProfileDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicMemberProfileSortInput {
  fields: [PrismicMemberProfileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicSiteNavigationDataTypeFilterInput {
  address: StringQueryOperatorInput
  footer_entries: PrismicSiteNavigationDataFooterEntriesFilterListInput
  header_entries: PrismicSiteNavigationDataHeaderEntriesFilterListInput
  sns_profiles: PrismicSiteNavigationDataSnsProfilesFilterListInput
  tel: StringQueryOperatorInput
}

input PrismicSiteNavigationDataFooterEntriesFilterListInput {
  elemMatch: PrismicSiteNavigationDataFooterEntriesFilterInput
}

input PrismicSiteNavigationDataFooterEntriesFilterInput {
  display_text: StringQueryOperatorInput
  group: StringQueryOperatorInput
  link: PrismicLinkTypeFilterInput
}

input PrismicLinkTypeFilterInput {
  link_type: PrismicLinkTypeEnumQueryOperatorInput
  isBroken: BooleanQueryOperatorInput
  url: StringQueryOperatorInput
  target: StringQueryOperatorInput
  size: IntQueryOperatorInput
  id: IDQueryOperatorInput
  type: StringQueryOperatorInput
  tags: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  slug: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  localFile: FileFilterInput
  raw: JSONQueryOperatorInput
}

input PrismicLinkTypeEnumQueryOperatorInput {
  eq: PrismicLinkTypeEnum
  ne: PrismicLinkTypeEnum
  in: [PrismicLinkTypeEnum]
  nin: [PrismicLinkTypeEnum]
}

input PrismicSiteNavigationDataHeaderEntriesFilterListInput {
  elemMatch: PrismicSiteNavigationDataHeaderEntriesFilterInput
}

input PrismicSiteNavigationDataHeaderEntriesFilterInput {
  display_text: StringQueryOperatorInput
  group: StringQueryOperatorInput
  link: PrismicLinkTypeFilterInput
}

input PrismicSiteNavigationDataSnsProfilesFilterListInput {
  elemMatch: PrismicSiteNavigationDataSnsProfilesFilterInput
}

input PrismicSiteNavigationDataSnsProfilesFilterInput {
  link: PrismicLinkTypeFilterInput
  service: StringQueryOperatorInput
}

type PrismicSiteNavigationConnection {
  totalCount: Int!
  edges: [PrismicSiteNavigationEdge!]!
  nodes: [PrismicSiteNavigation!]!
  pageInfo: PageInfo!
  distinct(field: PrismicSiteNavigationFieldsEnum!): [String!]!
  max(field: PrismicSiteNavigationFieldsEnum!): Float
  min(field: PrismicSiteNavigationFieldsEnum!): Float
  sum(field: PrismicSiteNavigationFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicSiteNavigationFieldsEnum!): [PrismicSiteNavigationGroupConnection!]!
}

type PrismicSiteNavigationEdge {
  next: PrismicSiteNavigation
  node: PrismicSiteNavigation!
  previous: PrismicSiteNavigation
}

enum PrismicSiteNavigationFieldsEnum {
  uid
  data___address
  data___footer_entries
  data___footer_entries___display_text
  data___footer_entries___group
  data___footer_entries___link___link_type
  data___footer_entries___link___isBroken
  data___footer_entries___link___url
  data___footer_entries___link___target
  data___footer_entries___link___size
  data___footer_entries___link___id
  data___footer_entries___link___type
  data___footer_entries___link___tags
  data___footer_entries___link___lang
  data___footer_entries___link___slug
  data___footer_entries___link___uid
  data___footer_entries___link___raw
  data___header_entries
  data___header_entries___display_text
  data___header_entries___group
  data___header_entries___link___link_type
  data___header_entries___link___isBroken
  data___header_entries___link___url
  data___header_entries___link___target
  data___header_entries___link___size
  data___header_entries___link___id
  data___header_entries___link___type
  data___header_entries___link___tags
  data___header_entries___link___lang
  data___header_entries___link___slug
  data___header_entries___link___uid
  data___header_entries___link___raw
  data___sns_profiles
  data___sns_profiles___link___link_type
  data___sns_profiles___link___isBroken
  data___sns_profiles___link___url
  data___sns_profiles___link___target
  data___sns_profiles___link___size
  data___sns_profiles___link___id
  data___sns_profiles___link___type
  data___sns_profiles___link___tags
  data___sns_profiles___link___lang
  data___sns_profiles___link___slug
  data___sns_profiles___link___uid
  data___sns_profiles___link___raw
  data___sns_profiles___service
  data___tel
  dataRaw
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicSiteNavigationGroupConnection {
  totalCount: Int!
  edges: [PrismicSiteNavigationEdge!]!
  nodes: [PrismicSiteNavigation!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input PrismicSiteNavigationFilterInput {
  uid: StringQueryOperatorInput
  data: PrismicSiteNavigationDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicSiteNavigationSortInput {
  fields: [PrismicSiteNavigationFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicTeamContentsDataTypeFilterInput {
  culture_page_title: PrismicStructuredTextTypeFilterInput
  life_page_title: PrismicStructuredTextTypeFilterInput
  main_page_title: PrismicStructuredTextTypeFilterInput
}

type PrismicTeamContentsConnection {
  totalCount: Int!
  edges: [PrismicTeamContentsEdge!]!
  nodes: [PrismicTeamContents!]!
  pageInfo: PageInfo!
  distinct(field: PrismicTeamContentsFieldsEnum!): [String!]!
  max(field: PrismicTeamContentsFieldsEnum!): Float
  min(field: PrismicTeamContentsFieldsEnum!): Float
  sum(field: PrismicTeamContentsFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicTeamContentsFieldsEnum!): [PrismicTeamContentsGroupConnection!]!
}

type PrismicTeamContentsEdge {
  next: PrismicTeamContents
  node: PrismicTeamContents!
  previous: PrismicTeamContents
}

enum PrismicTeamContentsFieldsEnum {
  data___culture_page_title___text
  data___culture_page_title___html
  data___culture_page_title___raw
  data___life_page_title___text
  data___life_page_title___html
  data___life_page_title___raw
  data___main_page_title___text
  data___main_page_title___html
  data___main_page_title___raw
  dataRaw
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicTeamContentsGroupConnection {
  totalCount: Int!
  edges: [PrismicTeamContentsEdge!]!
  nodes: [PrismicTeamContents!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input PrismicTeamContentsFilterInput {
  data: PrismicTeamContentsDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicTeamContentsSortInput {
  fields: [PrismicTeamContentsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input PrismicTermsAndConditionsDataTypeFilterInput {
  content: PrismicStructuredTextTypeFilterInput
  description: StringQueryOperatorInput
  revision_date: DateQueryOperatorInput
}

type PrismicTermsAndConditionsConnection {
  totalCount: Int!
  edges: [PrismicTermsAndConditionsEdge!]!
  nodes: [PrismicTermsAndConditions!]!
  pageInfo: PageInfo!
  distinct(field: PrismicTermsAndConditionsFieldsEnum!): [String!]!
  max(field: PrismicTermsAndConditionsFieldsEnum!): Float
  min(field: PrismicTermsAndConditionsFieldsEnum!): Float
  sum(field: PrismicTermsAndConditionsFieldsEnum!): Float
  group(skip: Int, limit: Int, field: PrismicTermsAndConditionsFieldsEnum!): [PrismicTermsAndConditionsGroupConnection!]!
}

type PrismicTermsAndConditionsEdge {
  next: PrismicTermsAndConditions
  node: PrismicTermsAndConditions!
  previous: PrismicTermsAndConditions
}

enum PrismicTermsAndConditionsFieldsEnum {
  uid
  data___content___text
  data___content___html
  data___content___raw
  data___description
  data___revision_date
  dataRaw
  prismicId
  alternate_languages
  alternate_languages___id
  alternate_languages___uid
  alternate_languages___lang
  alternate_languages___type
  alternate_languages___raw
  first_publication_date
  href
  lang
  last_publication_date
  tags
  type
  url
  _previewable
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type PrismicTermsAndConditionsGroupConnection {
  totalCount: Int!
  edges: [PrismicTermsAndConditionsEdge!]!
  nodes: [PrismicTermsAndConditions!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input PrismicTermsAndConditionsFilterInput {
  uid: StringQueryOperatorInput
  data: PrismicTermsAndConditionsDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  prismicId: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
  _previewable: IDQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input PrismicTermsAndConditionsSortInput {
  fields: [PrismicTermsAndConditionsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input JobPostContentSectionFilterListInput {
  elemMatch: JobPostContentSectionFilterInput
}

input JobPostContentSectionFilterInput {
  title: StringQueryOperatorInput
  level: HeadingLevelQueryOperatorInput
  rawContent: StringQueryOperatorInput
}

input HeadingLevelQueryOperatorInput {
  eq: HeadingLevel
  ne: HeadingLevel
  in: [HeadingLevel]
  nin: [HeadingLevel]
}

input JobCorporateQueryOperatorInput {
  eq: JobCorporate
  ne: JobCorporate
  in: [JobCorporate]
  nin: [JobCorporate]
}

input JobEmploymentTypeQueryOperatorInput {
  eq: JobEmploymentType
  ne: JobEmploymentType
  in: [JobEmploymentType]
  nin: [JobEmploymentType]
}

input JobPriorExperienceQueryOperatorInput {
  eq: JobPriorExperience
  ne: JobPriorExperience
  in: [JobPriorExperience]
  nin: [JobPriorExperience]
}

type JobPostConnection {
  totalCount: Int!
  edges: [JobPostEdge!]!
  nodes: [JobPost!]!
  pageInfo: PageInfo!
  distinct(field: JobPostFieldsEnum!): [String!]!
  max(field: JobPostFieldsEnum!): Float
  min(field: JobPostFieldsEnum!): Float
  sum(field: JobPostFieldsEnum!): Float
  group(skip: Int, limit: Int, field: JobPostFieldsEnum!): [JobPostGroupConnection!]!
}

type JobPostEdge {
  next: JobPost
  node: JobPost!
  previous: JobPost
}

enum JobPostFieldsEnum {
  ghId
  title
  boardUrl
  content
  content___title
  content___level
  content___rawContent
  rawContent
  corporate
  employmentType
  alternativeCivilianService
  priorExperience
  chapter
  portfolioRequired
  keywords
  gatsbyPath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
}

type JobPostGroupConnection {
  totalCount: Int!
  edges: [JobPostEdge!]!
  nodes: [JobPost!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input JobPostFilterInput {
  ghId: StringQueryOperatorInput
  title: StringQueryOperatorInput
  boardUrl: StringQueryOperatorInput
  content: JobPostContentSectionFilterListInput
  rawContent: StringQueryOperatorInput
  corporate: JobCorporateQueryOperatorInput
  employmentType: JobEmploymentTypeQueryOperatorInput
  alternativeCivilianService: BooleanQueryOperatorInput
  priorExperience: JobPriorExperienceQueryOperatorInput
  chapter: StringQueryOperatorInput
  portfolioRequired: BooleanQueryOperatorInput
  keywords: StringQueryOperatorInput
  gatsbyPath: StringQueryOperatorInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input JobPostSortInput {
  fields: [JobPostFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input GreenhouseJobCustomFieldMetadataFilterListInput {
  elemMatch: GreenhouseJobCustomFieldMetadataFilterInput
}

input GreenhouseJobCustomFieldMetadataFilterInput {
  id: StringQueryOperatorInput
  name: StringQueryOperatorInput
  type: GreenhouseJobCustomFieldTypeQueryOperatorInput
  value: StringQueryOperatorInput
}

input GreenhouseJobCustomFieldTypeQueryOperatorInput {
  eq: GreenhouseJobCustomFieldType
  ne: GreenhouseJobCustomFieldType
  in: [GreenhouseJobCustomFieldType]
  nin: [GreenhouseJobCustomFieldType]
}

input JobPostFilterListInput {
  elemMatch: JobPostFilterInput
}

type GreenhouseJobConnection {
  totalCount: Int!
  edges: [GreenhouseJobEdge!]!
  nodes: [GreenhouseJob!]!
  pageInfo: PageInfo!
  distinct(field: GreenhouseJobFieldsEnum!): [String!]!
  max(field: GreenhouseJobFieldsEnum!): Float
  min(field: GreenhouseJobFieldsEnum!): Float
  sum(field: GreenhouseJobFieldsEnum!): Float
  group(skip: Int, limit: Int, field: GreenhouseJobFieldsEnum!): [GreenhouseJobGroupConnection!]!
}

type GreenhouseJobEdge {
  next: GreenhouseJob
  node: GreenhouseJob!
  previous: GreenhouseJob
}

enum GreenhouseJobFieldsEnum {
  ghId
  title
  boardUrl
  content
  updatedAt
  metadata
  metadata___id
  metadata___name
  metadata___type
  metadata___value
  childrenJobPost
  childrenJobPost___ghId
  childrenJobPost___title
  childrenJobPost___boardUrl
  childrenJobPost___content
  childrenJobPost___content___title
  childrenJobPost___content___level
  childrenJobPost___content___rawContent
  childrenJobPost___rawContent
  childrenJobPost___corporate
  childrenJobPost___employmentType
  childrenJobPost___alternativeCivilianService
  childrenJobPost___priorExperience
  childrenJobPost___chapter
  childrenJobPost___portfolioRequired
  childrenJobPost___keywords
  childrenJobPost___gatsbyPath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenJobPost___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___ghId
  childJobPost___title
  childJobPost___boardUrl
  childJobPost___content
  childJobPost___content___title
  childJobPost___content___level
  childJobPost___content___rawContent
  childJobPost___rawContent
  childJobPost___corporate
  childJobPost___employmentType
  childJobPost___alternativeCivilianService
  childJobPost___priorExperience
  childJobPost___chapter
  childJobPost___portfolioRequired
  childJobPost___keywords
  childJobPost___gatsbyPath @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___parent___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___parent___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___parent___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___parent___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___parent___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___parent___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___parent___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___parent___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___parent___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___parent___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___parent___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___parent___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___children___parent___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___children___parent___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___children___children___id @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___children___children___children @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___children___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___children___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___children___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___children___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___children___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___children___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___children___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___children___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___internal___content @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___internal___contentDigest @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___internal___description @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___internal___fieldOwners @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___internal___ignoreType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___internal___mediaType @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___internal___owner @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childJobPost___internal___type @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
}

type GreenhouseJobGroupConnection {
  totalCount: Int!
  edges: [GreenhouseJobEdge!]!
  nodes: [GreenhouseJob!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input GreenhouseJobFilterInput {
  ghId: StringQueryOperatorInput
  title: StringQueryOperatorInput
  boardUrl: StringQueryOperatorInput
  content: StringQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  metadata: GreenhouseJobCustomFieldMetadataFilterListInput
  childrenJobPost: JobPostFilterListInput
  childJobPost: JobPostFilterInput
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
}

input GreenhouseJobSortInput {
  fields: [GreenhouseJobFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteBuildMetadataConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
  max(field: SiteBuildMetadataFieldsEnum!): Float
  min(field: SiteBuildMetadataFieldsEnum!): Float
  sum(field: SiteBuildMetadataFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SiteBuildMetadataFieldsEnum!): [SiteBuildMetadataGroupConnection!]!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

enum SiteBuildMetadataFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  buildTime
}

type SiteBuildMetadataGroupConnection {
  totalCount: Int!
  edges: [SiteBuildMetadataEdge!]!
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SiteBuildMetadataFilterInput {
  id: StringQueryOperatorInput
  parent: NodeFilterInput
  children: NodeFilterListInput
  internal: InternalFilterInput
  buildTime: DateQueryOperatorInput
}

input SiteBuildMetadataSortInput {
  fields: [SiteBuildMetadataFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SitePluginConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  distinct(field: SitePluginFieldsEnum!): [String!]!
  max(field: SitePluginFieldsEnum!): Float
  min(field: SitePluginFieldsEnum!): Float
  sum(field: SitePluginFieldsEnum!): Float
  group(skip: Int, limit: Int, field: SitePluginFieldsEnum!): [SitePluginGroupConnection!]!
}

type SitePluginEdge {
  next: SitePlugin
  node: SitePlugin!
  previous: SitePlugin
}

enum SitePluginFieldsEnum {
  id
  parent___id
  parent___parent___id
  parent___parent___parent___id
  parent___parent___parent___children
  parent___parent___children
  parent___parent___children___id
  parent___parent___children___children
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___children
  parent___children___id
  parent___children___parent___id
  parent___children___parent___children
  parent___children___children
  parent___children___children___id
  parent___children___children___children
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  children
  children___id
  children___parent___id
  children___parent___parent___id
  children___parent___parent___children
  children___parent___children
  children___parent___children___id
  children___parent___children___children
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___children
  children___children___id
  children___children___parent___id
  children___children___parent___children
  children___children___children
  children___children___children___id
  children___children___children___children
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  resolve
  name
  version
  pluginOptions___defaults___formats
  pluginOptions___defaults___placeholder
  pluginOptions___defaults___quality
  pluginOptions___defaults___breakpoints
  pluginOptions___defaults___backgroundColor
  pluginOptions___base64Width
  pluginOptions___stripMetadata
  pluginOptions___defaultQuality
  pluginOptions___failOnError
  pluginOptions___root
  pluginOptions___aliases____
  pluginOptions___component
  pluginOptions___outputPath
  pluginOptions___emitSchema___src___generated___gatsby_schema_graphql
  pluginOptions___emitSchema___src___generated___gatsby_introspection_json
  pluginOptions___emitPluginDocuments___src___generated___gatsby_plugin_documents_graphql
  pluginOptions___repositoryName
  pluginOptions___apiEndpoint
  pluginOptions___customTypesApiEndpoint
  pluginOptions___lang
  pluginOptions___imageImgixParams___auto
  pluginOptions___imageImgixParams___fit
  pluginOptions___imageImgixParams___q
  pluginOptions___imagePlaceholderImgixParams___w
  pluginOptions___imagePlaceholderImgixParams___blur
  pluginOptions___toolbar
  pluginOptions___promptForAccessToken
  pluginOptions___boardToken
  pluginOptions___includeContent
  pluginOptions___path
  pluginOptions___pathCheck
  pluginOptions___allExtensions
  pluginOptions___isTSX
  pluginOptions___jsxPragma
  nodeAPIs
  browserAPIs
  ssrAPIs
  pluginFilepath
  packageJson___name
  packageJson___description
  packageJson___version
  packageJson___main
  packageJson___license
  packageJson___dependencies
  packageJson___dependencies___name
  packageJson___dependencies___version
  packageJson___devDependencies
  packageJson___devDependencies___name
  packageJson___devDependencies___version
  packageJson___peerDependencies
  packageJson___peerDependencies___name
  packageJson___peerDependencies___version
  packageJson___keywords
}

type SitePluginGroupConnection {
  totalCount: Int!
  edges: [SitePluginEdge!]!
  nodes: [SitePlugin!]!
  pageInfo: PageInfo!
  field: String!
  fieldValue: String
}

input SitePluginSortInput {
  fields: [SitePluginFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteMetadata {
  siteUrl: String!
}

type SiteBuildMetadata implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  buildTime(
    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
}

type SitePlugin implements Node {
  id: ID!
  parent: Node
  children: [Node!]!
  internal: Internal!
  resolve: String
  name: String
  version: String
  pluginOptions: SitePluginPluginOptions
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  packageJson: SitePluginPackageJson
}

type SitePluginPluginOptions {
  defaults: SitePluginPluginOptionsDefaults
  base64Width: Int
  stripMetadata: Boolean
  defaultQuality: Int
  failOnError: Boolean
  root: String
  aliases: SitePluginPluginOptionsAliases
  component: String
  outputPath: String
  emitSchema: SitePluginPluginOptionsEmitSchema
  emitPluginDocuments: SitePluginPluginOptionsEmitPluginDocuments
  repositoryName: String
  schemas: SitePluginPluginOptionsSchemas
  apiEndpoint: String
  customTypesApiEndpoint: String
  lang: String
  imageImgixParams: SitePluginPluginOptionsImageImgixParams
  imagePlaceholderImgixParams: SitePluginPluginOptionsImagePlaceholderImgixParams
  toolbar: String
  promptForAccessToken: Boolean
  boardToken: String
  includeContent: Boolean
  path: String
  pathCheck: Boolean
  allExtensions: Boolean
  isTSX: Boolean
  jsxPragma: String
}

type SitePluginPluginOptionsDefaults {
  formats: [String]
  placeholder: String
  quality: Int
  breakpoints: [Int]
  backgroundColor: String
}

type SitePluginPluginOptionsAliases {
  _: String
}

type SitePluginPluginOptionsEmitSchema {
  src___generated___gatsby_schema_graphql: Boolean
  src___generated___gatsby_introspection_json: Boolean
}

type SitePluginPluginOptionsEmitPluginDocuments {
  src___generated___gatsby_plugin_documents_graphql: Boolean
}

type SitePluginPluginOptionsSchemas {
  faq: SitePluginPluginOptionsSchemasFaq
  site_navigation: SitePluginPluginOptionsSchemasSite_navigation
  terms_and_conditions: SitePluginPluginOptionsSchemasTerms_and_conditions
  member_profile: SitePluginPluginOptionsSchemasMember_profile
  team_contents: SitePluginPluginOptionsSchemasTeam_contents
}

type SitePluginPluginOptionsSchemasFaq {
  Main: SitePluginPluginOptionsSchemasFaqMain
}

type SitePluginPluginOptionsSchemasFaqMain {
  uid: SitePluginPluginOptionsSchemasFaqMainUid
  entries: SitePluginPluginOptionsSchemasFaqMainEntries
}

type SitePluginPluginOptionsSchemasFaqMainUid {
  type: String
  config: SitePluginPluginOptionsSchemasFaqMainUidConfig
}

type SitePluginPluginOptionsSchemasFaqMainUidConfig {
  label: String
}

type SitePluginPluginOptionsSchemasFaqMainEntries {
  type: String
  config: SitePluginPluginOptionsSchemasFaqMainEntriesConfig
}

type SitePluginPluginOptionsSchemasFaqMainEntriesConfig {
  fields: SitePluginPluginOptionsSchemasFaqMainEntriesConfigFields
  label: String
}

type SitePluginPluginOptionsSchemasFaqMainEntriesConfigFields {
  question: SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsQuestion
  answer: SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsAnswer
}

type SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsQuestion {
  type: String
  config: SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsQuestionConfig
}

type SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsQuestionConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsAnswer {
  type: String
  config: SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsAnswerConfig
}

type SitePluginPluginOptionsSchemasFaqMainEntriesConfigFieldsAnswerConfig {
  multi: String
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasSite_navigation {
  Main: SitePluginPluginOptionsSchemasSite_navigationMain
  Header: SitePluginPluginOptionsSchemasSite_navigationHeader
  Footer: SitePluginPluginOptionsSchemasSite_navigationFooter
  SNS_Profile: SitePluginPluginOptionsSchemasSite_navigationSNS_Profile
}

type SitePluginPluginOptionsSchemasSite_navigationMain {
  uid: SitePluginPluginOptionsSchemasSite_navigationMainUid
  address: SitePluginPluginOptionsSchemasSite_navigationMainAddress
  tel: SitePluginPluginOptionsSchemasSite_navigationMainTel
}

type SitePluginPluginOptionsSchemasSite_navigationMainUid {
  type: String
  config: SitePluginPluginOptionsSchemasSite_navigationMainUidConfig
}

type SitePluginPluginOptionsSchemasSite_navigationMainUidConfig {
  label: String
}

type SitePluginPluginOptionsSchemasSite_navigationMainAddress {
  type: String
  config: SitePluginPluginOptionsSchemasSite_navigationMainAddressConfig
}

type SitePluginPluginOptionsSchemasSite_navigationMainAddressConfig {
  label: String
}

type SitePluginPluginOptionsSchemasSite_navigationMainTel {
  type: String
  config: SitePluginPluginOptionsSchemasSite_navigationMainTelConfig
}

type SitePluginPluginOptionsSchemasSite_navigationMainTelConfig {
  label: String
}

type SitePluginPluginOptionsSchemasSite_navigationHeader {
  header_entries: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entries
}

type SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entries {
  type: String
  config: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfig
}

type SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfig {
  fields: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFields
  label: String
}

type SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFields {
  display_text: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsDisplay_text
  link: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsLink
  group: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsGroup
}

type SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsDisplay_text {
  type: String
  config: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsDisplay_textConfig
}

type SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsDisplay_textConfig {
  label: String
}

type SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsLink {
  type: String
  config: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsLinkConfig
}

type SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsLinkConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsGroup {
  type: String
  config: SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsGroupConfig
}

type SitePluginPluginOptionsSchemasSite_navigationHeaderHeader_entriesConfigFieldsGroupConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasSite_navigationFooter {
  footer_entries: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entries
}

type SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entries {
  type: String
  config: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfig
}

type SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfig {
  fields: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFields
  label: String
}

type SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFields {
  display_text: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsDisplay_text
  link: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsLink
  group: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsGroup
}

type SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsDisplay_text {
  type: String
  config: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsDisplay_textConfig
}

type SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsDisplay_textConfig {
  label: String
}

type SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsLink {
  type: String
  config: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsLinkConfig
}

type SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsLinkConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsGroup {
  type: String
  config: SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsGroupConfig
}

type SitePluginPluginOptionsSchemasSite_navigationFooterFooter_entriesConfigFieldsGroupConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasSite_navigationSNS_Profile {
  sns_profiles: SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profiles
}

type SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profiles {
  type: String
  config: SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfig
}

type SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfig {
  fields: SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFields
  label: String
}

type SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFields {
  service: SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsService
  link: SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsLink
}

type SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsService {
  type: String
  config: SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsServiceConfig
}

type SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsServiceConfig {
  options: [String]
  label: String
}

type SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsLink {
  type: String
  config: SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsLinkConfig
}

type SitePluginPluginOptionsSchemasSite_navigationSNS_ProfileSns_profilesConfigFieldsLinkConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasTerms_and_conditions {
  Main: SitePluginPluginOptionsSchemasTerms_and_conditionsMain
}

type SitePluginPluginOptionsSchemasTerms_and_conditionsMain {
  uid: SitePluginPluginOptionsSchemasTerms_and_conditionsMainUid
  description: SitePluginPluginOptionsSchemasTerms_and_conditionsMainDescription
  revision_date: SitePluginPluginOptionsSchemasTerms_and_conditionsMainRevision_date
  content: SitePluginPluginOptionsSchemasTerms_and_conditionsMainContent
}

type SitePluginPluginOptionsSchemasTerms_and_conditionsMainUid {
  type: String
  config: SitePluginPluginOptionsSchemasTerms_and_conditionsMainUidConfig
}

type SitePluginPluginOptionsSchemasTerms_and_conditionsMainUidConfig {
  label: String
}

type SitePluginPluginOptionsSchemasTerms_and_conditionsMainDescription {
  type: String
  config: SitePluginPluginOptionsSchemasTerms_and_conditionsMainDescriptionConfig
}

type SitePluginPluginOptionsSchemasTerms_and_conditionsMainDescriptionConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasTerms_and_conditionsMainRevision_date {
  type: String
  config: SitePluginPluginOptionsSchemasTerms_and_conditionsMainRevision_dateConfig
}

type SitePluginPluginOptionsSchemasTerms_and_conditionsMainRevision_dateConfig {
  label: String
}

type SitePluginPluginOptionsSchemasTerms_and_conditionsMainContent {
  type: String
  config: SitePluginPluginOptionsSchemasTerms_and_conditionsMainContentConfig
}

type SitePluginPluginOptionsSchemasTerms_and_conditionsMainContentConfig {
  multi: String
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasMember_profile {
  Main: SitePluginPluginOptionsSchemasMember_profileMain
}

type SitePluginPluginOptionsSchemasMember_profileMain {
  nickname: SitePluginPluginOptionsSchemasMember_profileMainNickname
  name: SitePluginPluginOptionsSchemasMember_profileMainName
  email: SitePluginPluginOptionsSchemasMember_profileMainEmail
  role: SitePluginPluginOptionsSchemasMember_profileMainRole
  image: SitePluginPluginOptionsSchemasMember_profileMainImage
}

type SitePluginPluginOptionsSchemasMember_profileMainNickname {
  type: String
  config: SitePluginPluginOptionsSchemasMember_profileMainNicknameConfig
}

type SitePluginPluginOptionsSchemasMember_profileMainNicknameConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasMember_profileMainName {
  type: String
  config: SitePluginPluginOptionsSchemasMember_profileMainNameConfig
}

type SitePluginPluginOptionsSchemasMember_profileMainNameConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasMember_profileMainEmail {
  type: String
  config: SitePluginPluginOptionsSchemasMember_profileMainEmailConfig
}

type SitePluginPluginOptionsSchemasMember_profileMainEmailConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasMember_profileMainRole {
  type: String
  config: SitePluginPluginOptionsSchemasMember_profileMainRoleConfig
}

type SitePluginPluginOptionsSchemasMember_profileMainRoleConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasMember_profileMainImage {
  type: String
  config: SitePluginPluginOptionsSchemasMember_profileMainImageConfig
}

type SitePluginPluginOptionsSchemasMember_profileMainImageConfig {
  constraint: SitePluginPluginOptionsSchemasMember_profileMainImageConfigConstraint
  thumbnails: [SitePluginPluginOptionsSchemasMember_profileMainImageConfigThumbnails]
  label: String
}

type SitePluginPluginOptionsSchemasMember_profileMainImageConfigConstraint {
  width: Int
  height: Int
}

type SitePluginPluginOptionsSchemasMember_profileMainImageConfigThumbnails {
  name: String
  width: Int
  height: Int
}

type SitePluginPluginOptionsSchemasTeam_contents {
  Main: SitePluginPluginOptionsSchemasTeam_contentsMain
  Culture: SitePluginPluginOptionsSchemasTeam_contentsCulture
  Life: SitePluginPluginOptionsSchemasTeam_contentsLife
}

type SitePluginPluginOptionsSchemasTeam_contentsMain {
  main_page_title: SitePluginPluginOptionsSchemasTeam_contentsMainMain_page_title
  main_body: SitePluginPluginOptionsSchemasTeam_contentsMainMain_body
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_page_title {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_page_titleConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_page_titleConfig {
  single: String
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_body {
  type: String
  fieldset: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfig {
  choices: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoices
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoices {
  key_visual: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visual
  member_quote_carousel: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carousel
  title_and_description: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_description
  title_and_illustration: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustration
  wide_banner: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_banner
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visual {
  type: String
  fieldset: String
  description: String
  icon: String
  non_repeat: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeat
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeat {
  key_visual_image: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatKey_visual_image
  expanded: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatExpanded
  description: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatDescription
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatKey_visual_image {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageConfig {
  constraint: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageConfigConstraint
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageConfigConstraint {
  width: Int
  height: Int
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatExpanded {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatExpandedConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatExpandedConfig {
  placeholder_false: String
  placeholder_true: String
  default_value: Boolean
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatDescription {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatDescriptionConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesKey_visualNon_repeatDescriptionConfig {
  single: String
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carousel {
  type: String
  fieldset: String
  description: String
  icon: String
  display: String
  repeat: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeat
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeat {
  member: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatMember
  quote: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatQuote
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatMember {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatMemberConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatMemberConfig {
  select: String
  customtypes: [String]
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatQuote {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatQuoteConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesMember_quote_carouselRepeatQuoteConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_description {
  type: String
  fieldset: String
  description: String
  icon: String
  display: String
  non_repeat: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeat
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeat {
  key_text: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatKey_text
  title: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatTitle
  link: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatLink
  description: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatDescription
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatKey_text {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatKey_textConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatKey_textConfig {
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatTitle {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatTitleConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatTitleConfig {
  single: String
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatLink {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatLinkConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatLinkConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatDescription {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatDescriptionConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_descriptionNon_repeatDescriptionConfig {
  multi: String
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustration {
  type: String
  fieldset: String
  description: String
  icon: String
  display: String
  non_repeat: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeat
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeat {
  key_text: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatKey_text
  title: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatTitle
  link: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatLink
  illustration: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatIllustration
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatKey_text {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatKey_textConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatKey_textConfig {
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatTitle {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatTitleConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatTitleConfig {
  single: String
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatLink {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatLinkConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatLinkConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatIllustration {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatIllustrationConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatIllustrationConfig {
  constraint: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatIllustrationConfigConstraint
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesTitle_and_illustrationNon_repeatIllustrationConfigConstraint {
  width: Int
  height: Int
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_banner {
  type: String
  fieldset: String
  description: String
  icon: String
  display: String
  non_repeat: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeat
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeat {
  thumbnail: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatThumbnail
  title: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatTitle
  link: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatLink
  link_text: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatLink_text
  background_colo: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatBackground_colo
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatThumbnail {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatThumbnailConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatThumbnailConfig {
  constraint: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatThumbnailConfigConstraint
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatThumbnailConfigConstraint {
  width: Int
  height: Int
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatTitle {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatTitleConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatTitleConfig {
  single: String
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatLink {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatLinkConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatLinkConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatLink_text {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatLink_textConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatLink_textConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatBackground_colo {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatBackground_coloConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsMainMain_bodyConfigChoicesWide_bannerNon_repeatBackground_coloConfig {
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasTeam_contentsCulture {
  culture_page_title: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_page_title
  culture_body: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_body
}

type SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_page_title {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_page_titleConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_page_titleConfig {
  single: String
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_body {
  type: String
  fieldset: String
  config: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfig {
  choices: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoices
}

type SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoices {
  key_visual: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visual
}

type SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visual {
  type: String
  fieldset: String
  description: String
  icon: String
  non_repeat: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeat
  display: String
}

type SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeat {
  key_visual_image: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatKey_visual_image
  expanded: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatExpanded
  description: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatDescription
}

type SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatKey_visual_image {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageConfig {
  constraint: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageConfigConstraint
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatKey_visual_imageConfigConstraint {
  width: Int
  height: Int
}

type SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatExpanded {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatExpandedConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatExpandedConfig {
  placeholder_false: String
  placeholder_true: String
  default_value: Boolean
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatDescription {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatDescriptionConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsCultureCulture_bodyConfigChoicesKey_visualNon_repeatDescriptionConfig {
  single: String
  label: String
  placeholder: String
}

type SitePluginPluginOptionsSchemasTeam_contentsLife {
  life_page_title: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_page_title
  life_body: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_body
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_page_title {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_page_titleConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_page_titleConfig {
  single: String
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_body {
  type: String
  fieldset: String
  config: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfig {
  choices: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoices
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoices {
  life_content: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_content
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_content {
  type: String
  fieldset: String
  description: String
  icon: String
  display: String
  non_repeat: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeat
  repeat: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeat
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeat {
  title: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatTitle
  body_text: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatBody_text
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatTitle {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatTitleConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatTitleConfig {
  single: String
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatBody_text {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatBody_textConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentNon_repeatBody_textConfig {
  multi: String
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeat {
  thumbnail_image: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_image
  thumbnail_description: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_description
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_image {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_imageConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_imageConfig {
  constraint: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_imageConfigConstraint
  label: String
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_imageConfigConstraint {
  width: Int
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_description {
  type: String
  config: SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_descriptionConfig
}

type SitePluginPluginOptionsSchemasTeam_contentsLifeLife_bodyConfigChoicesLife_contentRepeatThumbnail_descriptionConfig {
  single: String
  label: String
}

type SitePluginPluginOptionsImageImgixParams {
  auto: String
  fit: String
  q: Int
}

type SitePluginPluginOptionsImagePlaceholderImgixParams {
  w: Int
  blur: Int
}

type SitePluginPackageJson {
  name: String
  description: String
  version: String
  main: String
  license: String
  dependencies: [SitePluginPackageJsonDependencies]
  devDependencies: [SitePluginPackageJsonDevDependencies]
  peerDependencies: [SitePluginPackageJsonPeerDependencies]
  keywords: [String]
}

type SitePluginPackageJsonDependencies {
  name: String
  version: String
}

type SitePluginPackageJsonDevDependencies {
  name: String
  version: String
}

type SitePluginPackageJsonPeerDependencies {
  name: String
  version: String
}
