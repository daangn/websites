# Define parent-child relations between types. This is used to add `child*` and `children*` convenience fields like `childImageSharp`.
directive @childOf(
  # A list of mime-types this type is a child of. Usually these are the mime-types handled by a transformer plugin.
  mimeTypes: [String!]! = []

  # A list of types this type is a child of. Usually these are the types handled by a transformer plugin.
  types: [String!]! = []
) on OBJECT

# Add date formatting options.
directive @dateformat(difference: String, formatString: String, fromNow: Boolean, locale: String) on FIELD_DEFINITION

# Do not infer field types from field values.
directive @dontInfer on OBJECT

# Link to File node by relative path.
directive @fileByRelativePath(from: String) on FIELD_DEFINITION

# Infer field types from field values.
directive @infer on OBJECT

# Link to node by foreign-key relation.
directive @link(by: String! = "id", from: String, on: String) on FIELD_DEFINITION

# Define the mime-types handled by this type.
directive @mimeTypes(
  # The mime-types handled by this type.
  types: [String!]! = []
) on OBJECT

# DEPRECATED: Use interface inheritance instead, i.e. "interface Foo implements Node".
#
# Adds root query fields for an interface. All implementing types must also implement the Node interface.
directive @nodeInterface on INTERFACE

# Proxy resolver from another field.
directive @proxy(from: String!, fromNode: Boolean! = false) on FIELD_DEFINITION

input AVIFOptions {
  lossless: Boolean
  quality: Int
  speed: Int
}

input BlurredOptions {
  # Force the output format for the low-res preview. Default is to use the same format as the input. You should rarely need to change this
  toFormat: ImageFormat

  # Width of the generated low-res preview. Default is 20px
  width: Int
}

input BooleanQueryOperatorInput {
  eq: Boolean
  in: [Boolean]
  ne: Boolean
  nin: [Boolean]
}

# A date string, such as 2007-12-03, compliant with the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar Date

input DateQueryOperatorInput {
  eq: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  nin: [Date]
}

type Directory implements Node {
  absolutePath: String!
  accessTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  atime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  atimeMs: Float!
  base: String!
  birthTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  changeTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  children: [Node!]!
  ctime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  ctimeMs: Float!
  dev: Int!
  dir: String!
  ext: String!
  extension: String!
  gid: Int!
  id: ID!
  ino: Float!
  internal: Internal!
  mode: Int!
  modifiedTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtimeMs: Float!
  name: String!
  nlink: Int!
  parent: Node
  prettySize: String!
  rdev: Int!
  relativeDirectory: String!
  relativePath: String!
  root: String!
  size: Int!
  sourceInstanceName: String!
  uid: Int!
}

type DirectoryConnection {
  distinct(field: DirectoryFieldsEnum!): [String!]!
  edges: [DirectoryEdge!]!
  group(field: DirectoryFieldsEnum!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
  max(field: DirectoryFieldsEnum!): Float
  min(field: DirectoryFieldsEnum!): Float
  nodes: [Directory!]!
  pageInfo: PageInfo!
  sum(field: DirectoryFieldsEnum!): Float
  totalCount: Int!
}

type DirectoryEdge {
  next: Directory
  node: Directory!
  previous: Directory
}

enum DirectoryFieldsEnum {
  absolutePath
  accessTime
  atime
  atimeMs
  base
  birthTime
  birthtime
  birthtimeMs
  changeTime
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  ctime
  ctimeMs
  dev
  dir
  ext
  extension
  gid
  id
  ino
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  mode
  modifiedTime
  mtime
  mtimeMs
  name
  nlink
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prettySize
  rdev
  relativeDirectory
  relativePath
  root
  size
  sourceInstanceName
  uid
}

input DirectoryFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  changeTime: DateQueryOperatorInput
  children: NodeFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: IntQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  gid: IntQueryOperatorInput
  id: StringQueryOperatorInput
  ino: FloatQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
}

type DirectoryGroupConnection {
  distinct(field: DirectoryFieldsEnum!): [String!]!
  edges: [DirectoryEdge!]!
  field: String!
  fieldValue: String
  group(field: DirectoryFieldsEnum!, limit: Int, skip: Int): [DirectoryGroupConnection!]!
  max(field: DirectoryFieldsEnum!): Float
  min(field: DirectoryFieldsEnum!): Float
  nodes: [Directory!]!
  pageInfo: PageInfo!
  sum(field: DirectoryFieldsEnum!): Float
  totalCount: Int!
}

input DirectorySortInput {
  fields: [DirectoryFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input DuotoneGradient {
  highlight: String!
  opacity: Int
  shadow: String!
}

type File implements Node {
  absolutePath: String!
  accessTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  atime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  atimeMs: Float!
  base: String!
  birthTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
  changeTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!

  # Returns the first child node of type ImageSharp or null if there are no children of given type on this node
  childImageSharp: ImageSharp

  # Returns the first child node of type LokaliseTranslation or null if there are no children of given type on this node
  childLokaliseTranslation: LokaliseTranslation
  children: [Node!]!

  # Returns all children nodes filtered by type ImageSharp
  childrenImageSharp: [ImageSharp]

  # Returns all children nodes filtered by type LokaliseTranslation
  childrenLokaliseTranslation: [LokaliseTranslation]
  ctime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  ctimeMs: Float!
  dev: Int!
  dir: String!
  ext: String!
  extension: String!
  gid: Int!
  id: ID!
  ino: Float!
  internal: Internal!
  mode: Int!
  modifiedTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  mtimeMs: Float!
  name: String!
  nlink: Int!
  parent: Node
  prettySize: String!

  # Copy file to static directory and return public url to it
  publicURL: String
  rdev: Int!
  relativeDirectory: String!
  relativePath: String!
  root: String!
  size: Int!
  sourceInstanceName: String!
  uid: Int!
  url: String
}

type FileConnection {
  distinct(field: FileFieldsEnum!): [String!]!
  edges: [FileEdge!]!
  group(field: FileFieldsEnum!, limit: Int, skip: Int): [FileGroupConnection!]!
  max(field: FileFieldsEnum!): Float
  min(field: FileFieldsEnum!): Float
  nodes: [File!]!
  pageInfo: PageInfo!
  sum(field: FileFieldsEnum!): Float
  totalCount: Int!
}

type FileEdge {
  next: File
  node: File!
  previous: File
}

enum FileFieldsEnum {
  absolutePath
  accessTime
  atime
  atimeMs
  base
  birthTime
  birthtime
  birthtimeMs
  blksize
  blocks
  changeTime
  childImageSharp___children
  childImageSharp___children___children
  childImageSharp___children___children___children
  childImageSharp___children___children___id
  childImageSharp___children___id
  childImageSharp___children___internal___content
  childImageSharp___children___internal___contentDigest
  childImageSharp___children___internal___description
  childImageSharp___children___internal___fieldOwners
  childImageSharp___children___internal___ignoreType
  childImageSharp___children___internal___mediaType
  childImageSharp___children___internal___owner
  childImageSharp___children___internal___type
  childImageSharp___children___parent___children
  childImageSharp___children___parent___id
  childImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___id
  childImageSharp___internal___content
  childImageSharp___internal___contentDigest
  childImageSharp___internal___description
  childImageSharp___internal___fieldOwners
  childImageSharp___internal___ignoreType
  childImageSharp___internal___mediaType
  childImageSharp___internal___owner
  childImageSharp___internal___type
  childImageSharp___original___height
  childImageSharp___original___src
  childImageSharp___original___width
  childImageSharp___parent___children
  childImageSharp___parent___children___children
  childImageSharp___parent___children___id
  childImageSharp___parent___id
  childImageSharp___parent___internal___content
  childImageSharp___parent___internal___contentDigest
  childImageSharp___parent___internal___description
  childImageSharp___parent___internal___fieldOwners
  childImageSharp___parent___internal___ignoreType
  childImageSharp___parent___internal___mediaType
  childImageSharp___parent___internal___owner
  childImageSharp___parent___internal___type
  childImageSharp___parent___parent___children
  childImageSharp___parent___parent___id
  childImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childLokaliseTranslation___children
  childLokaliseTranslation___children___children
  childLokaliseTranslation___children___children___children
  childLokaliseTranslation___children___children___id
  childLokaliseTranslation___children___id
  childLokaliseTranslation___children___internal___content
  childLokaliseTranslation___children___internal___contentDigest
  childLokaliseTranslation___children___internal___description
  childLokaliseTranslation___children___internal___fieldOwners
  childLokaliseTranslation___children___internal___ignoreType
  childLokaliseTranslation___children___internal___mediaType
  childLokaliseTranslation___children___internal___owner
  childLokaliseTranslation___children___internal___type
  childLokaliseTranslation___children___parent___children
  childLokaliseTranslation___children___parent___id
  childLokaliseTranslation___id
  childLokaliseTranslation___internal___content
  childLokaliseTranslation___internal___contentDigest
  childLokaliseTranslation___internal___description
  childLokaliseTranslation___internal___fieldOwners
  childLokaliseTranslation___internal___ignoreType
  childLokaliseTranslation___internal___mediaType
  childLokaliseTranslation___internal___owner
  childLokaliseTranslation___internal___type
  childLokaliseTranslation___messages____placeholder
  childLokaliseTranslation___messages___detail_link__default_label
  childLokaliseTranslation___messages___faq_page__search
  childLokaliseTranslation___messages___form_field__empty_placeholder
  childLokaliseTranslation___messages___form_field__no_placeholder
  childLokaliseTranslation___messages___form_field__organization_name
  childLokaliseTranslation___messages___form_field__placeholder
  childLokaliseTranslation___messages___form_field__yes_placeholder
  childLokaliseTranslation___messages___job_application_page__alert_completed
  childLokaliseTranslation___messages___job_application_page__alert_failed
  childLokaliseTranslation___messages___job_application_page__button_submit
  childLokaliseTranslation___messages___job_application_page__confirm_apply
  childLokaliseTranslation___messages___job_application_page__field_email_label
  childLokaliseTranslation___messages___job_application_page__field_email_placeholder
  childLokaliseTranslation___messages___job_application_page__field_file_placeholder
  childLokaliseTranslation___messages___job_application_page__field_name_label
  childLokaliseTranslation___messages___job_application_page__field_name_placeholder
  childLokaliseTranslation___messages___job_application_page__field_phone_label
  childLokaliseTranslation___messages___job_application_page__field_phone_placeholder
  childLokaliseTranslation___messages___job_application_page__field_portpolio_description
  childLokaliseTranslation___messages___job_application_page__field_portpolio_label
  childLokaliseTranslation___messages___job_application_page__field_portpolio_placeholder
  childLokaliseTranslation___messages___job_application_page__field_resume_description
  childLokaliseTranslation___messages___job_application_page__field_resume_label
  childLokaliseTranslation___messages___job_application_page__field_resume_placeholder
  childLokaliseTranslation___messages___job_application_page__terms_privacy_info
  childLokaliseTranslation___messages___job_application_page__terms_sensitive_info
  childLokaliseTranslation___messages___job_post_layout__prior_experience_no
  childLokaliseTranslation___messages___job_post_layout__prior_experience_whatever
  childLokaliseTranslation___messages___job_post_layout__prior_experience_yes
  childLokaliseTranslation___messages___job_post_layout__property_karrot_market
  childLokaliseTranslation___messages___job_post_layout__property_karrot_pay
  childLokaliseTranslation___messages___job_post_layout__tab_apply
  childLokaliseTranslation___messages___job_post_layout__tab_view
  childLokaliseTranslation___messages___job_post_list__empty_placeholder__back_to_list
  childLokaliseTranslation___messages___job_post_list__empty_placeholder__no_results
  childLokaliseTranslation___messages___job_post_page__back_to_list
  childLokaliseTranslation___messages___job_post_page__external_post_link
  childLokaliseTranslation___messages___job_post_page__external_post_notice
  childLokaliseTranslation___messages___job_post_page__faq
  childLokaliseTranslation___messages___jobs_page__chapter_all
  childLokaliseTranslation___messages___jobs_page__default_meta_title
  childLokaliseTranslation___messages___jobs_page__employment_type_all
  childLokaliseTranslation___messages___jobs_page__employment_type_assistant
  childLokaliseTranslation___messages___jobs_page__employment_type_contractor
  childLokaliseTranslation___messages___jobs_page__employment_type_fulltime
  childLokaliseTranslation___messages___jobs_page__employment_type_intern
  childLokaliseTranslation___messages___jobs_page__search
  childLokaliseTranslation___parent___children
  childLokaliseTranslation___parent___children___children
  childLokaliseTranslation___parent___children___id
  childLokaliseTranslation___parent___id
  childLokaliseTranslation___parent___internal___content
  childLokaliseTranslation___parent___internal___contentDigest
  childLokaliseTranslation___parent___internal___description
  childLokaliseTranslation___parent___internal___fieldOwners
  childLokaliseTranslation___parent___internal___ignoreType
  childLokaliseTranslation___parent___internal___mediaType
  childLokaliseTranslation___parent___internal___owner
  childLokaliseTranslation___parent___internal___type
  childLokaliseTranslation___parent___parent___children
  childLokaliseTranslation___parent___parent___id
  children
  childrenImageSharp
  childrenImageSharp___children
  childrenImageSharp___children___children
  childrenImageSharp___children___children___children
  childrenImageSharp___children___children___id
  childrenImageSharp___children___id
  childrenImageSharp___children___internal___content
  childrenImageSharp___children___internal___contentDigest
  childrenImageSharp___children___internal___description
  childrenImageSharp___children___internal___fieldOwners
  childrenImageSharp___children___internal___ignoreType
  childrenImageSharp___children___internal___mediaType
  childrenImageSharp___children___internal___owner
  childrenImageSharp___children___internal___type
  childrenImageSharp___children___parent___children
  childrenImageSharp___children___parent___id
  childrenImageSharp___fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___id
  childrenImageSharp___internal___content
  childrenImageSharp___internal___contentDigest
  childrenImageSharp___internal___description
  childrenImageSharp___internal___fieldOwners
  childrenImageSharp___internal___ignoreType
  childrenImageSharp___internal___mediaType
  childrenImageSharp___internal___owner
  childrenImageSharp___internal___type
  childrenImageSharp___original___height
  childrenImageSharp___original___src
  childrenImageSharp___original___width
  childrenImageSharp___parent___children
  childrenImageSharp___parent___children___children
  childrenImageSharp___parent___children___id
  childrenImageSharp___parent___id
  childrenImageSharp___parent___internal___content
  childrenImageSharp___parent___internal___contentDigest
  childrenImageSharp___parent___internal___description
  childrenImageSharp___parent___internal___fieldOwners
  childrenImageSharp___parent___internal___ignoreType
  childrenImageSharp___parent___internal___mediaType
  childrenImageSharp___parent___internal___owner
  childrenImageSharp___parent___internal___type
  childrenImageSharp___parent___parent___children
  childrenImageSharp___parent___parent___id
  childrenImageSharp___resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenImageSharp___resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  childrenLokaliseTranslation
  childrenLokaliseTranslation___children
  childrenLokaliseTranslation___children___children
  childrenLokaliseTranslation___children___children___children
  childrenLokaliseTranslation___children___children___id
  childrenLokaliseTranslation___children___id
  childrenLokaliseTranslation___children___internal___content
  childrenLokaliseTranslation___children___internal___contentDigest
  childrenLokaliseTranslation___children___internal___description
  childrenLokaliseTranslation___children___internal___fieldOwners
  childrenLokaliseTranslation___children___internal___ignoreType
  childrenLokaliseTranslation___children___internal___mediaType
  childrenLokaliseTranslation___children___internal___owner
  childrenLokaliseTranslation___children___internal___type
  childrenLokaliseTranslation___children___parent___children
  childrenLokaliseTranslation___children___parent___id
  childrenLokaliseTranslation___id
  childrenLokaliseTranslation___internal___content
  childrenLokaliseTranslation___internal___contentDigest
  childrenLokaliseTranslation___internal___description
  childrenLokaliseTranslation___internal___fieldOwners
  childrenLokaliseTranslation___internal___ignoreType
  childrenLokaliseTranslation___internal___mediaType
  childrenLokaliseTranslation___internal___owner
  childrenLokaliseTranslation___internal___type
  childrenLokaliseTranslation___messages____placeholder
  childrenLokaliseTranslation___messages___detail_link__default_label
  childrenLokaliseTranslation___messages___faq_page__search
  childrenLokaliseTranslation___messages___form_field__empty_placeholder
  childrenLokaliseTranslation___messages___form_field__no_placeholder
  childrenLokaliseTranslation___messages___form_field__organization_name
  childrenLokaliseTranslation___messages___form_field__placeholder
  childrenLokaliseTranslation___messages___form_field__yes_placeholder
  childrenLokaliseTranslation___messages___job_application_page__alert_completed
  childrenLokaliseTranslation___messages___job_application_page__alert_failed
  childrenLokaliseTranslation___messages___job_application_page__button_submit
  childrenLokaliseTranslation___messages___job_application_page__confirm_apply
  childrenLokaliseTranslation___messages___job_application_page__field_email_label
  childrenLokaliseTranslation___messages___job_application_page__field_email_placeholder
  childrenLokaliseTranslation___messages___job_application_page__field_file_placeholder
  childrenLokaliseTranslation___messages___job_application_page__field_name_label
  childrenLokaliseTranslation___messages___job_application_page__field_name_placeholder
  childrenLokaliseTranslation___messages___job_application_page__field_phone_label
  childrenLokaliseTranslation___messages___job_application_page__field_phone_placeholder
  childrenLokaliseTranslation___messages___job_application_page__field_portpolio_description
  childrenLokaliseTranslation___messages___job_application_page__field_portpolio_label
  childrenLokaliseTranslation___messages___job_application_page__field_portpolio_placeholder
  childrenLokaliseTranslation___messages___job_application_page__field_resume_description
  childrenLokaliseTranslation___messages___job_application_page__field_resume_label
  childrenLokaliseTranslation___messages___job_application_page__field_resume_placeholder
  childrenLokaliseTranslation___messages___job_application_page__terms_privacy_info
  childrenLokaliseTranslation___messages___job_application_page__terms_sensitive_info
  childrenLokaliseTranslation___messages___job_post_layout__prior_experience_no
  childrenLokaliseTranslation___messages___job_post_layout__prior_experience_whatever
  childrenLokaliseTranslation___messages___job_post_layout__prior_experience_yes
  childrenLokaliseTranslation___messages___job_post_layout__property_karrot_market
  childrenLokaliseTranslation___messages___job_post_layout__property_karrot_pay
  childrenLokaliseTranslation___messages___job_post_layout__tab_apply
  childrenLokaliseTranslation___messages___job_post_layout__tab_view
  childrenLokaliseTranslation___messages___job_post_list__empty_placeholder__back_to_list
  childrenLokaliseTranslation___messages___job_post_list__empty_placeholder__no_results
  childrenLokaliseTranslation___messages___job_post_page__back_to_list
  childrenLokaliseTranslation___messages___job_post_page__external_post_link
  childrenLokaliseTranslation___messages___job_post_page__external_post_notice
  childrenLokaliseTranslation___messages___job_post_page__faq
  childrenLokaliseTranslation___messages___jobs_page__chapter_all
  childrenLokaliseTranslation___messages___jobs_page__default_meta_title
  childrenLokaliseTranslation___messages___jobs_page__employment_type_all
  childrenLokaliseTranslation___messages___jobs_page__employment_type_assistant
  childrenLokaliseTranslation___messages___jobs_page__employment_type_contractor
  childrenLokaliseTranslation___messages___jobs_page__employment_type_fulltime
  childrenLokaliseTranslation___messages___jobs_page__employment_type_intern
  childrenLokaliseTranslation___messages___jobs_page__search
  childrenLokaliseTranslation___parent___children
  childrenLokaliseTranslation___parent___children___children
  childrenLokaliseTranslation___parent___children___id
  childrenLokaliseTranslation___parent___id
  childrenLokaliseTranslation___parent___internal___content
  childrenLokaliseTranslation___parent___internal___contentDigest
  childrenLokaliseTranslation___parent___internal___description
  childrenLokaliseTranslation___parent___internal___fieldOwners
  childrenLokaliseTranslation___parent___internal___ignoreType
  childrenLokaliseTranslation___parent___internal___mediaType
  childrenLokaliseTranslation___parent___internal___owner
  childrenLokaliseTranslation___parent___internal___type
  childrenLokaliseTranslation___parent___parent___children
  childrenLokaliseTranslation___parent___parent___id
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  ctime
  ctimeMs
  dev
  dir
  ext
  extension
  gid
  id
  ino
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  mode
  modifiedTime
  mtime
  mtimeMs
  name
  nlink
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prettySize
  publicURL
  rdev
  relativeDirectory
  relativePath
  root
  size
  sourceInstanceName
  uid
  url
}

input FileFilterInput {
  absolutePath: StringQueryOperatorInput
  accessTime: DateQueryOperatorInput
  atime: DateQueryOperatorInput
  atimeMs: FloatQueryOperatorInput
  base: StringQueryOperatorInput
  birthTime: DateQueryOperatorInput
  birthtime: DateQueryOperatorInput
  birthtimeMs: FloatQueryOperatorInput
  blksize: IntQueryOperatorInput
  blocks: IntQueryOperatorInput
  changeTime: DateQueryOperatorInput
  childImageSharp: ImageSharpFilterInput
  childLokaliseTranslation: LokaliseTranslationFilterInput
  children: NodeFilterListInput
  childrenImageSharp: ImageSharpFilterListInput
  childrenLokaliseTranslation: LokaliseTranslationFilterListInput
  ctime: DateQueryOperatorInput
  ctimeMs: FloatQueryOperatorInput
  dev: IntQueryOperatorInput
  dir: StringQueryOperatorInput
  ext: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  gid: IntQueryOperatorInput
  id: StringQueryOperatorInput
  ino: FloatQueryOperatorInput
  internal: InternalFilterInput
  mode: IntQueryOperatorInput
  modifiedTime: DateQueryOperatorInput
  mtime: DateQueryOperatorInput
  mtimeMs: FloatQueryOperatorInput
  name: StringQueryOperatorInput
  nlink: IntQueryOperatorInput
  parent: NodeFilterInput
  prettySize: StringQueryOperatorInput
  publicURL: StringQueryOperatorInput
  rdev: IntQueryOperatorInput
  relativeDirectory: StringQueryOperatorInput
  relativePath: StringQueryOperatorInput
  root: StringQueryOperatorInput
  size: IntQueryOperatorInput
  sourceInstanceName: StringQueryOperatorInput
  uid: IntQueryOperatorInput
  url: StringQueryOperatorInput
}

type FileGroupConnection {
  distinct(field: FileFieldsEnum!): [String!]!
  edges: [FileEdge!]!
  field: String!
  fieldValue: String
  group(field: FileFieldsEnum!, limit: Int, skip: Int): [FileGroupConnection!]!
  max(field: FileFieldsEnum!): Float
  min(field: FileFieldsEnum!): Float
  nodes: [File!]!
  pageInfo: PageInfo!
  sum(field: FileFieldsEnum!): Float
  totalCount: Int!
}

input FileSortInput {
  fields: [FileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

input FloatQueryOperatorInput {
  eq: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  nin: [Float]
}

enum GatsbyImageFormat {
  AUTO
  AVIF
  JPG
  NO_CHANGE
  PNG
  WEBP
}

enum GatsbyImageLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum GatsbyImagePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

type GreenhouseJobBoardDepartment implements Node {
  childDepartments: [GreenhouseJobBoardDepartment!]!
  children: [Node!]!
  ghId: String!
  id: ID!
  internal: Internal!
  jobs: [GreenhouseJobBoardJob!]!
  name: String!
  parent: Node
  parentDepartment: GreenhouseJobBoardDepartment
}

type GreenhouseJobBoardDepartmentConnection {
  distinct(field: GreenhouseJobBoardDepartmentFieldsEnum!): [String!]!
  edges: [GreenhouseJobBoardDepartmentEdge!]!
  group(field: GreenhouseJobBoardDepartmentFieldsEnum!, limit: Int, skip: Int): [GreenhouseJobBoardDepartmentGroupConnection!]!
  max(field: GreenhouseJobBoardDepartmentFieldsEnum!): Float
  min(field: GreenhouseJobBoardDepartmentFieldsEnum!): Float
  nodes: [GreenhouseJobBoardDepartment!]!
  pageInfo: PageInfo!
  sum(field: GreenhouseJobBoardDepartmentFieldsEnum!): Float
  totalCount: Int!
}

type GreenhouseJobBoardDepartmentEdge {
  next: GreenhouseJobBoardDepartment
  node: GreenhouseJobBoardDepartment!
  previous: GreenhouseJobBoardDepartment
}

enum GreenhouseJobBoardDepartmentFieldsEnum {
  childDepartments
  childDepartments___childDepartments
  childDepartments___childDepartments___childDepartments
  childDepartments___childDepartments___childDepartments___childDepartments
  childDepartments___childDepartments___childDepartments___children
  childDepartments___childDepartments___childDepartments___ghId
  childDepartments___childDepartments___childDepartments___id
  childDepartments___childDepartments___childDepartments___jobs
  childDepartments___childDepartments___childDepartments___name
  childDepartments___childDepartments___children
  childDepartments___childDepartments___children___children
  childDepartments___childDepartments___children___id
  childDepartments___childDepartments___ghId
  childDepartments___childDepartments___id
  childDepartments___childDepartments___internal___content
  childDepartments___childDepartments___internal___contentDigest
  childDepartments___childDepartments___internal___description
  childDepartments___childDepartments___internal___fieldOwners
  childDepartments___childDepartments___internal___ignoreType
  childDepartments___childDepartments___internal___mediaType
  childDepartments___childDepartments___internal___owner
  childDepartments___childDepartments___internal___type
  childDepartments___childDepartments___jobs
  childDepartments___childDepartments___jobs___boardToken
  childDepartments___childDepartments___jobs___boardUrl
  childDepartments___childDepartments___jobs___children
  childDepartments___childDepartments___jobs___childrenJobDepartment
  childDepartments___childDepartments___jobs___childrenJobPost
  childDepartments___childDepartments___jobs___content
  childDepartments___childDepartments___jobs___departments
  childDepartments___childDepartments___jobs___ghId
  childDepartments___childDepartments___jobs___id
  childDepartments___childDepartments___jobs___locationQuestions
  childDepartments___childDepartments___jobs___metadata
  childDepartments___childDepartments___jobs___questions
  childDepartments___childDepartments___jobs___title
  childDepartments___childDepartments___jobs___updatedAt
  childDepartments___childDepartments___name
  childDepartments___childDepartments___parentDepartment___childDepartments
  childDepartments___childDepartments___parentDepartment___children
  childDepartments___childDepartments___parentDepartment___ghId
  childDepartments___childDepartments___parentDepartment___id
  childDepartments___childDepartments___parentDepartment___jobs
  childDepartments___childDepartments___parentDepartment___name
  childDepartments___childDepartments___parent___children
  childDepartments___childDepartments___parent___id
  childDepartments___children
  childDepartments___children___children
  childDepartments___children___children___children
  childDepartments___children___children___id
  childDepartments___children___id
  childDepartments___children___internal___content
  childDepartments___children___internal___contentDigest
  childDepartments___children___internal___description
  childDepartments___children___internal___fieldOwners
  childDepartments___children___internal___ignoreType
  childDepartments___children___internal___mediaType
  childDepartments___children___internal___owner
  childDepartments___children___internal___type
  childDepartments___children___parent___children
  childDepartments___children___parent___id
  childDepartments___ghId
  childDepartments___id
  childDepartments___internal___content
  childDepartments___internal___contentDigest
  childDepartments___internal___description
  childDepartments___internal___fieldOwners
  childDepartments___internal___ignoreType
  childDepartments___internal___mediaType
  childDepartments___internal___owner
  childDepartments___internal___type
  childDepartments___jobs
  childDepartments___jobs___boardToken
  childDepartments___jobs___boardUrl
  childDepartments___jobs___childJobDepartment___children
  childDepartments___jobs___childJobDepartment___ghId
  childDepartments___jobs___childJobDepartment___id
  childDepartments___jobs___childJobDepartment___jobPosts
  childDepartments___jobs___childJobDepartment___name
  childDepartments___jobs___childJobDepartment___slug
  childDepartments___jobs___childJobPost___absoluteUrl
  childDepartments___jobs___childJobPost___alternativeCivilianService
  childDepartments___jobs___childJobPost___boardToken
  childDepartments___jobs___childJobPost___boardUrl
  childDepartments___jobs___childJobPost___chapter
  childDepartments___jobs___childJobPost___children
  childDepartments___jobs___childJobPost___content
  childDepartments___jobs___childJobPost___corporate
  childDepartments___jobs___childJobPost___departments
  childDepartments___jobs___childJobPost___employmentType
  childDepartments___jobs___childJobPost___externalUrl
  childDepartments___jobs___childJobPost___ghId
  childDepartments___jobs___childJobPost___id
  childDepartments___jobs___childJobPost___keywords
  childDepartments___jobs___childJobPost___order
  childDepartments___jobs___childJobPost___priorExperience
  childDepartments___jobs___childJobPost___rawContent
  childDepartments___jobs___childJobPost___tags
  childDepartments___jobs___childJobPost___title
  childDepartments___jobs___childJobPost___updatedAt
  childDepartments___jobs___childJobPost___validThrough
  childDepartments___jobs___children
  childDepartments___jobs___childrenJobDepartment
  childDepartments___jobs___childrenJobDepartment___children
  childDepartments___jobs___childrenJobDepartment___ghId
  childDepartments___jobs___childrenJobDepartment___id
  childDepartments___jobs___childrenJobDepartment___jobPosts
  childDepartments___jobs___childrenJobDepartment___name
  childDepartments___jobs___childrenJobDepartment___slug
  childDepartments___jobs___childrenJobPost
  childDepartments___jobs___childrenJobPost___absoluteUrl
  childDepartments___jobs___childrenJobPost___alternativeCivilianService
  childDepartments___jobs___childrenJobPost___boardToken
  childDepartments___jobs___childrenJobPost___boardUrl
  childDepartments___jobs___childrenJobPost___chapter
  childDepartments___jobs___childrenJobPost___children
  childDepartments___jobs___childrenJobPost___content
  childDepartments___jobs___childrenJobPost___corporate
  childDepartments___jobs___childrenJobPost___departments
  childDepartments___jobs___childrenJobPost___employmentType
  childDepartments___jobs___childrenJobPost___externalUrl
  childDepartments___jobs___childrenJobPost___ghId
  childDepartments___jobs___childrenJobPost___id
  childDepartments___jobs___childrenJobPost___keywords
  childDepartments___jobs___childrenJobPost___order
  childDepartments___jobs___childrenJobPost___priorExperience
  childDepartments___jobs___childrenJobPost___rawContent
  childDepartments___jobs___childrenJobPost___tags
  childDepartments___jobs___childrenJobPost___title
  childDepartments___jobs___childrenJobPost___updatedAt
  childDepartments___jobs___childrenJobPost___validThrough
  childDepartments___jobs___children___children
  childDepartments___jobs___children___id
  childDepartments___jobs___content
  childDepartments___jobs___departments
  childDepartments___jobs___departments___childDepartments
  childDepartments___jobs___departments___children
  childDepartments___jobs___departments___ghId
  childDepartments___jobs___departments___id
  childDepartments___jobs___departments___jobs
  childDepartments___jobs___departments___name
  childDepartments___jobs___ghId
  childDepartments___jobs___id
  childDepartments___jobs___internal___content
  childDepartments___jobs___internal___contentDigest
  childDepartments___jobs___internal___description
  childDepartments___jobs___internal___fieldOwners
  childDepartments___jobs___internal___ignoreType
  childDepartments___jobs___internal___mediaType
  childDepartments___jobs___internal___owner
  childDepartments___jobs___internal___type
  childDepartments___jobs___locationQuestions
  childDepartments___jobs___locationQuestions___description
  childDepartments___jobs___locationQuestions___descriptionText
  childDepartments___jobs___locationQuestions___label
  childDepartments___jobs___locationQuestions___name
  childDepartments___jobs___locationQuestions___required
  childDepartments___jobs___metadata
  childDepartments___jobs___metadata___id
  childDepartments___jobs___metadata___name
  childDepartments___jobs___metadata___type
  childDepartments___jobs___metadata___value
  childDepartments___jobs___parent___children
  childDepartments___jobs___parent___id
  childDepartments___jobs___questions
  childDepartments___jobs___questions___description
  childDepartments___jobs___questions___descriptionText
  childDepartments___jobs___questions___label
  childDepartments___jobs___questions___name
  childDepartments___jobs___questions___required
  childDepartments___jobs___title
  childDepartments___jobs___updatedAt
  childDepartments___name
  childDepartments___parentDepartment___childDepartments
  childDepartments___parentDepartment___childDepartments___childDepartments
  childDepartments___parentDepartment___childDepartments___children
  childDepartments___parentDepartment___childDepartments___ghId
  childDepartments___parentDepartment___childDepartments___id
  childDepartments___parentDepartment___childDepartments___jobs
  childDepartments___parentDepartment___childDepartments___name
  childDepartments___parentDepartment___children
  childDepartments___parentDepartment___children___children
  childDepartments___parentDepartment___children___id
  childDepartments___parentDepartment___ghId
  childDepartments___parentDepartment___id
  childDepartments___parentDepartment___internal___content
  childDepartments___parentDepartment___internal___contentDigest
  childDepartments___parentDepartment___internal___description
  childDepartments___parentDepartment___internal___fieldOwners
  childDepartments___parentDepartment___internal___ignoreType
  childDepartments___parentDepartment___internal___mediaType
  childDepartments___parentDepartment___internal___owner
  childDepartments___parentDepartment___internal___type
  childDepartments___parentDepartment___jobs
  childDepartments___parentDepartment___jobs___boardToken
  childDepartments___parentDepartment___jobs___boardUrl
  childDepartments___parentDepartment___jobs___children
  childDepartments___parentDepartment___jobs___childrenJobDepartment
  childDepartments___parentDepartment___jobs___childrenJobPost
  childDepartments___parentDepartment___jobs___content
  childDepartments___parentDepartment___jobs___departments
  childDepartments___parentDepartment___jobs___ghId
  childDepartments___parentDepartment___jobs___id
  childDepartments___parentDepartment___jobs___locationQuestions
  childDepartments___parentDepartment___jobs___metadata
  childDepartments___parentDepartment___jobs___questions
  childDepartments___parentDepartment___jobs___title
  childDepartments___parentDepartment___jobs___updatedAt
  childDepartments___parentDepartment___name
  childDepartments___parentDepartment___parentDepartment___childDepartments
  childDepartments___parentDepartment___parentDepartment___children
  childDepartments___parentDepartment___parentDepartment___ghId
  childDepartments___parentDepartment___parentDepartment___id
  childDepartments___parentDepartment___parentDepartment___jobs
  childDepartments___parentDepartment___parentDepartment___name
  childDepartments___parentDepartment___parent___children
  childDepartments___parentDepartment___parent___id
  childDepartments___parent___children
  childDepartments___parent___children___children
  childDepartments___parent___children___id
  childDepartments___parent___id
  childDepartments___parent___internal___content
  childDepartments___parent___internal___contentDigest
  childDepartments___parent___internal___description
  childDepartments___parent___internal___fieldOwners
  childDepartments___parent___internal___ignoreType
  childDepartments___parent___internal___mediaType
  childDepartments___parent___internal___owner
  childDepartments___parent___internal___type
  childDepartments___parent___parent___children
  childDepartments___parent___parent___id
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  ghId
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  jobs
  jobs___boardToken
  jobs___boardUrl
  jobs___childJobDepartment___children
  jobs___childJobDepartment___children___children
  jobs___childJobDepartment___children___id
  jobs___childJobDepartment___ghId
  jobs___childJobDepartment___id
  jobs___childJobDepartment___internal___content
  jobs___childJobDepartment___internal___contentDigest
  jobs___childJobDepartment___internal___description
  jobs___childJobDepartment___internal___fieldOwners
  jobs___childJobDepartment___internal___ignoreType
  jobs___childJobDepartment___internal___mediaType
  jobs___childJobDepartment___internal___owner
  jobs___childJobDepartment___internal___type
  jobs___childJobDepartment___jobPosts
  jobs___childJobDepartment___jobPosts___absoluteUrl
  jobs___childJobDepartment___jobPosts___alternativeCivilianService
  jobs___childJobDepartment___jobPosts___boardToken
  jobs___childJobDepartment___jobPosts___boardUrl
  jobs___childJobDepartment___jobPosts___chapter
  jobs___childJobDepartment___jobPosts___children
  jobs___childJobDepartment___jobPosts___content
  jobs___childJobDepartment___jobPosts___corporate
  jobs___childJobDepartment___jobPosts___departments
  jobs___childJobDepartment___jobPosts___employmentType
  jobs___childJobDepartment___jobPosts___externalUrl
  jobs___childJobDepartment___jobPosts___ghId
  jobs___childJobDepartment___jobPosts___id
  jobs___childJobDepartment___jobPosts___keywords
  jobs___childJobDepartment___jobPosts___order
  jobs___childJobDepartment___jobPosts___priorExperience
  jobs___childJobDepartment___jobPosts___rawContent
  jobs___childJobDepartment___jobPosts___tags
  jobs___childJobDepartment___jobPosts___title
  jobs___childJobDepartment___jobPosts___updatedAt
  jobs___childJobDepartment___jobPosts___validThrough
  jobs___childJobDepartment___name
  jobs___childJobDepartment___parent___children
  jobs___childJobDepartment___parent___id
  jobs___childJobDepartment___slug
  jobs___childJobPost___absoluteUrl
  jobs___childJobPost___alternativeCivilianService
  jobs___childJobPost___boardToken
  jobs___childJobPost___boardUrl
  jobs___childJobPost___chapter
  jobs___childJobPost___children
  jobs___childJobPost___children___children
  jobs___childJobPost___children___id
  jobs___childJobPost___content
  jobs___childJobPost___content___bodyHtml
  jobs___childJobPost___content___level
  jobs___childJobPost___content___title
  jobs___childJobPost___corporate
  jobs___childJobPost___departments
  jobs___childJobPost___departments___children
  jobs___childJobPost___departments___ghId
  jobs___childJobPost___departments___id
  jobs___childJobPost___departments___jobPosts
  jobs___childJobPost___departments___name
  jobs___childJobPost___departments___slug
  jobs___childJobPost___employmentType
  jobs___childJobPost___externalUrl
  jobs___childJobPost___ghId
  jobs___childJobPost___id
  jobs___childJobPost___internal___content
  jobs___childJobPost___internal___contentDigest
  jobs___childJobPost___internal___description
  jobs___childJobPost___internal___fieldOwners
  jobs___childJobPost___internal___ignoreType
  jobs___childJobPost___internal___mediaType
  jobs___childJobPost___internal___owner
  jobs___childJobPost___internal___type
  jobs___childJobPost___keywords
  jobs___childJobPost___order
  jobs___childJobPost___parentJob___boardToken
  jobs___childJobPost___parentJob___boardUrl
  jobs___childJobPost___parentJob___children
  jobs___childJobPost___parentJob___childrenJobDepartment
  jobs___childJobPost___parentJob___childrenJobPost
  jobs___childJobPost___parentJob___content
  jobs___childJobPost___parentJob___departments
  jobs___childJobPost___parentJob___ghId
  jobs___childJobPost___parentJob___id
  jobs___childJobPost___parentJob___locationQuestions
  jobs___childJobPost___parentJob___metadata
  jobs___childJobPost___parentJob___questions
  jobs___childJobPost___parentJob___title
  jobs___childJobPost___parentJob___updatedAt
  jobs___childJobPost___parent___children
  jobs___childJobPost___parent___id
  jobs___childJobPost___priorExperience
  jobs___childJobPost___rawContent
  jobs___childJobPost___tags
  jobs___childJobPost___title
  jobs___childJobPost___updatedAt
  jobs___childJobPost___validThrough
  jobs___children
  jobs___childrenJobDepartment
  jobs___childrenJobDepartment___children
  jobs___childrenJobDepartment___children___children
  jobs___childrenJobDepartment___children___id
  jobs___childrenJobDepartment___ghId
  jobs___childrenJobDepartment___id
  jobs___childrenJobDepartment___internal___content
  jobs___childrenJobDepartment___internal___contentDigest
  jobs___childrenJobDepartment___internal___description
  jobs___childrenJobDepartment___internal___fieldOwners
  jobs___childrenJobDepartment___internal___ignoreType
  jobs___childrenJobDepartment___internal___mediaType
  jobs___childrenJobDepartment___internal___owner
  jobs___childrenJobDepartment___internal___type
  jobs___childrenJobDepartment___jobPosts
  jobs___childrenJobDepartment___jobPosts___absoluteUrl
  jobs___childrenJobDepartment___jobPosts___alternativeCivilianService
  jobs___childrenJobDepartment___jobPosts___boardToken
  jobs___childrenJobDepartment___jobPosts___boardUrl
  jobs___childrenJobDepartment___jobPosts___chapter
  jobs___childrenJobDepartment___jobPosts___children
  jobs___childrenJobDepartment___jobPosts___content
  jobs___childrenJobDepartment___jobPosts___corporate
  jobs___childrenJobDepartment___jobPosts___departments
  jobs___childrenJobDepartment___jobPosts___employmentType
  jobs___childrenJobDepartment___jobPosts___externalUrl
  jobs___childrenJobDepartment___jobPosts___ghId
  jobs___childrenJobDepartment___jobPosts___id
  jobs___childrenJobDepartment___jobPosts___keywords
  jobs___childrenJobDepartment___jobPosts___order
  jobs___childrenJobDepartment___jobPosts___priorExperience
  jobs___childrenJobDepartment___jobPosts___rawContent
  jobs___childrenJobDepartment___jobPosts___tags
  jobs___childrenJobDepartment___jobPosts___title
  jobs___childrenJobDepartment___jobPosts___updatedAt
  jobs___childrenJobDepartment___jobPosts___validThrough
  jobs___childrenJobDepartment___name
  jobs___childrenJobDepartment___parent___children
  jobs___childrenJobDepartment___parent___id
  jobs___childrenJobDepartment___slug
  jobs___childrenJobPost
  jobs___childrenJobPost___absoluteUrl
  jobs___childrenJobPost___alternativeCivilianService
  jobs___childrenJobPost___boardToken
  jobs___childrenJobPost___boardUrl
  jobs___childrenJobPost___chapter
  jobs___childrenJobPost___children
  jobs___childrenJobPost___children___children
  jobs___childrenJobPost___children___id
  jobs___childrenJobPost___content
  jobs___childrenJobPost___content___bodyHtml
  jobs___childrenJobPost___content___level
  jobs___childrenJobPost___content___title
  jobs___childrenJobPost___corporate
  jobs___childrenJobPost___departments
  jobs___childrenJobPost___departments___children
  jobs___childrenJobPost___departments___ghId
  jobs___childrenJobPost___departments___id
  jobs___childrenJobPost___departments___jobPosts
  jobs___childrenJobPost___departments___name
  jobs___childrenJobPost___departments___slug
  jobs___childrenJobPost___employmentType
  jobs___childrenJobPost___externalUrl
  jobs___childrenJobPost___ghId
  jobs___childrenJobPost___id
  jobs___childrenJobPost___internal___content
  jobs___childrenJobPost___internal___contentDigest
  jobs___childrenJobPost___internal___description
  jobs___childrenJobPost___internal___fieldOwners
  jobs___childrenJobPost___internal___ignoreType
  jobs___childrenJobPost___internal___mediaType
  jobs___childrenJobPost___internal___owner
  jobs___childrenJobPost___internal___type
  jobs___childrenJobPost___keywords
  jobs___childrenJobPost___order
  jobs___childrenJobPost___parentJob___boardToken
  jobs___childrenJobPost___parentJob___boardUrl
  jobs___childrenJobPost___parentJob___children
  jobs___childrenJobPost___parentJob___childrenJobDepartment
  jobs___childrenJobPost___parentJob___childrenJobPost
  jobs___childrenJobPost___parentJob___content
  jobs___childrenJobPost___parentJob___departments
  jobs___childrenJobPost___parentJob___ghId
  jobs___childrenJobPost___parentJob___id
  jobs___childrenJobPost___parentJob___locationQuestions
  jobs___childrenJobPost___parentJob___metadata
  jobs___childrenJobPost___parentJob___questions
  jobs___childrenJobPost___parentJob___title
  jobs___childrenJobPost___parentJob___updatedAt
  jobs___childrenJobPost___parent___children
  jobs___childrenJobPost___parent___id
  jobs___childrenJobPost___priorExperience
  jobs___childrenJobPost___rawContent
  jobs___childrenJobPost___tags
  jobs___childrenJobPost___title
  jobs___childrenJobPost___updatedAt
  jobs___childrenJobPost___validThrough
  jobs___children___children
  jobs___children___children___children
  jobs___children___children___id
  jobs___children___id
  jobs___children___internal___content
  jobs___children___internal___contentDigest
  jobs___children___internal___description
  jobs___children___internal___fieldOwners
  jobs___children___internal___ignoreType
  jobs___children___internal___mediaType
  jobs___children___internal___owner
  jobs___children___internal___type
  jobs___children___parent___children
  jobs___children___parent___id
  jobs___content
  jobs___departments
  jobs___departments___childDepartments
  jobs___departments___childDepartments___childDepartments
  jobs___departments___childDepartments___children
  jobs___departments___childDepartments___ghId
  jobs___departments___childDepartments___id
  jobs___departments___childDepartments___jobs
  jobs___departments___childDepartments___name
  jobs___departments___children
  jobs___departments___children___children
  jobs___departments___children___id
  jobs___departments___ghId
  jobs___departments___id
  jobs___departments___internal___content
  jobs___departments___internal___contentDigest
  jobs___departments___internal___description
  jobs___departments___internal___fieldOwners
  jobs___departments___internal___ignoreType
  jobs___departments___internal___mediaType
  jobs___departments___internal___owner
  jobs___departments___internal___type
  jobs___departments___jobs
  jobs___departments___jobs___boardToken
  jobs___departments___jobs___boardUrl
  jobs___departments___jobs___children
  jobs___departments___jobs___childrenJobDepartment
  jobs___departments___jobs___childrenJobPost
  jobs___departments___jobs___content
  jobs___departments___jobs___departments
  jobs___departments___jobs___ghId
  jobs___departments___jobs___id
  jobs___departments___jobs___locationQuestions
  jobs___departments___jobs___metadata
  jobs___departments___jobs___questions
  jobs___departments___jobs___title
  jobs___departments___jobs___updatedAt
  jobs___departments___name
  jobs___departments___parentDepartment___childDepartments
  jobs___departments___parentDepartment___children
  jobs___departments___parentDepartment___ghId
  jobs___departments___parentDepartment___id
  jobs___departments___parentDepartment___jobs
  jobs___departments___parentDepartment___name
  jobs___departments___parent___children
  jobs___departments___parent___id
  jobs___ghId
  jobs___id
  jobs___internal___content
  jobs___internal___contentDigest
  jobs___internal___description
  jobs___internal___fieldOwners
  jobs___internal___ignoreType
  jobs___internal___mediaType
  jobs___internal___owner
  jobs___internal___type
  jobs___locationQuestions
  jobs___locationQuestions___description
  jobs___locationQuestions___descriptionText
  jobs___locationQuestions___label
  jobs___locationQuestions___name
  jobs___locationQuestions___required
  jobs___metadata
  jobs___metadata___id
  jobs___metadata___name
  jobs___metadata___type
  jobs___metadata___value
  jobs___parent___children
  jobs___parent___children___children
  jobs___parent___children___id
  jobs___parent___id
  jobs___parent___internal___content
  jobs___parent___internal___contentDigest
  jobs___parent___internal___description
  jobs___parent___internal___fieldOwners
  jobs___parent___internal___ignoreType
  jobs___parent___internal___mediaType
  jobs___parent___internal___owner
  jobs___parent___internal___type
  jobs___parent___parent___children
  jobs___parent___parent___id
  jobs___questions
  jobs___questions___description
  jobs___questions___descriptionText
  jobs___questions___label
  jobs___questions___name
  jobs___questions___required
  jobs___title
  jobs___updatedAt
  name
  parentDepartment___childDepartments
  parentDepartment___childDepartments___childDepartments
  parentDepartment___childDepartments___childDepartments___childDepartments
  parentDepartment___childDepartments___childDepartments___children
  parentDepartment___childDepartments___childDepartments___ghId
  parentDepartment___childDepartments___childDepartments___id
  parentDepartment___childDepartments___childDepartments___jobs
  parentDepartment___childDepartments___childDepartments___name
  parentDepartment___childDepartments___children
  parentDepartment___childDepartments___children___children
  parentDepartment___childDepartments___children___id
  parentDepartment___childDepartments___ghId
  parentDepartment___childDepartments___id
  parentDepartment___childDepartments___internal___content
  parentDepartment___childDepartments___internal___contentDigest
  parentDepartment___childDepartments___internal___description
  parentDepartment___childDepartments___internal___fieldOwners
  parentDepartment___childDepartments___internal___ignoreType
  parentDepartment___childDepartments___internal___mediaType
  parentDepartment___childDepartments___internal___owner
  parentDepartment___childDepartments___internal___type
  parentDepartment___childDepartments___jobs
  parentDepartment___childDepartments___jobs___boardToken
  parentDepartment___childDepartments___jobs___boardUrl
  parentDepartment___childDepartments___jobs___children
  parentDepartment___childDepartments___jobs___childrenJobDepartment
  parentDepartment___childDepartments___jobs___childrenJobPost
  parentDepartment___childDepartments___jobs___content
  parentDepartment___childDepartments___jobs___departments
  parentDepartment___childDepartments___jobs___ghId
  parentDepartment___childDepartments___jobs___id
  parentDepartment___childDepartments___jobs___locationQuestions
  parentDepartment___childDepartments___jobs___metadata
  parentDepartment___childDepartments___jobs___questions
  parentDepartment___childDepartments___jobs___title
  parentDepartment___childDepartments___jobs___updatedAt
  parentDepartment___childDepartments___name
  parentDepartment___childDepartments___parentDepartment___childDepartments
  parentDepartment___childDepartments___parentDepartment___children
  parentDepartment___childDepartments___parentDepartment___ghId
  parentDepartment___childDepartments___parentDepartment___id
  parentDepartment___childDepartments___parentDepartment___jobs
  parentDepartment___childDepartments___parentDepartment___name
  parentDepartment___childDepartments___parent___children
  parentDepartment___childDepartments___parent___id
  parentDepartment___children
  parentDepartment___children___children
  parentDepartment___children___children___children
  parentDepartment___children___children___id
  parentDepartment___children___id
  parentDepartment___children___internal___content
  parentDepartment___children___internal___contentDigest
  parentDepartment___children___internal___description
  parentDepartment___children___internal___fieldOwners
  parentDepartment___children___internal___ignoreType
  parentDepartment___children___internal___mediaType
  parentDepartment___children___internal___owner
  parentDepartment___children___internal___type
  parentDepartment___children___parent___children
  parentDepartment___children___parent___id
  parentDepartment___ghId
  parentDepartment___id
  parentDepartment___internal___content
  parentDepartment___internal___contentDigest
  parentDepartment___internal___description
  parentDepartment___internal___fieldOwners
  parentDepartment___internal___ignoreType
  parentDepartment___internal___mediaType
  parentDepartment___internal___owner
  parentDepartment___internal___type
  parentDepartment___jobs
  parentDepartment___jobs___boardToken
  parentDepartment___jobs___boardUrl
  parentDepartment___jobs___childJobDepartment___children
  parentDepartment___jobs___childJobDepartment___ghId
  parentDepartment___jobs___childJobDepartment___id
  parentDepartment___jobs___childJobDepartment___jobPosts
  parentDepartment___jobs___childJobDepartment___name
  parentDepartment___jobs___childJobDepartment___slug
  parentDepartment___jobs___childJobPost___absoluteUrl
  parentDepartment___jobs___childJobPost___alternativeCivilianService
  parentDepartment___jobs___childJobPost___boardToken
  parentDepartment___jobs___childJobPost___boardUrl
  parentDepartment___jobs___childJobPost___chapter
  parentDepartment___jobs___childJobPost___children
  parentDepartment___jobs___childJobPost___content
  parentDepartment___jobs___childJobPost___corporate
  parentDepartment___jobs___childJobPost___departments
  parentDepartment___jobs___childJobPost___employmentType
  parentDepartment___jobs___childJobPost___externalUrl
  parentDepartment___jobs___childJobPost___ghId
  parentDepartment___jobs___childJobPost___id
  parentDepartment___jobs___childJobPost___keywords
  parentDepartment___jobs___childJobPost___order
  parentDepartment___jobs___childJobPost___priorExperience
  parentDepartment___jobs___childJobPost___rawContent
  parentDepartment___jobs___childJobPost___tags
  parentDepartment___jobs___childJobPost___title
  parentDepartment___jobs___childJobPost___updatedAt
  parentDepartment___jobs___childJobPost___validThrough
  parentDepartment___jobs___children
  parentDepartment___jobs___childrenJobDepartment
  parentDepartment___jobs___childrenJobDepartment___children
  parentDepartment___jobs___childrenJobDepartment___ghId
  parentDepartment___jobs___childrenJobDepartment___id
  parentDepartment___jobs___childrenJobDepartment___jobPosts
  parentDepartment___jobs___childrenJobDepartment___name
  parentDepartment___jobs___childrenJobDepartment___slug
  parentDepartment___jobs___childrenJobPost
  parentDepartment___jobs___childrenJobPost___absoluteUrl
  parentDepartment___jobs___childrenJobPost___alternativeCivilianService
  parentDepartment___jobs___childrenJobPost___boardToken
  parentDepartment___jobs___childrenJobPost___boardUrl
  parentDepartment___jobs___childrenJobPost___chapter
  parentDepartment___jobs___childrenJobPost___children
  parentDepartment___jobs___childrenJobPost___content
  parentDepartment___jobs___childrenJobPost___corporate
  parentDepartment___jobs___childrenJobPost___departments
  parentDepartment___jobs___childrenJobPost___employmentType
  parentDepartment___jobs___childrenJobPost___externalUrl
  parentDepartment___jobs___childrenJobPost___ghId
  parentDepartment___jobs___childrenJobPost___id
  parentDepartment___jobs___childrenJobPost___keywords
  parentDepartment___jobs___childrenJobPost___order
  parentDepartment___jobs___childrenJobPost___priorExperience
  parentDepartment___jobs___childrenJobPost___rawContent
  parentDepartment___jobs___childrenJobPost___tags
  parentDepartment___jobs___childrenJobPost___title
  parentDepartment___jobs___childrenJobPost___updatedAt
  parentDepartment___jobs___childrenJobPost___validThrough
  parentDepartment___jobs___children___children
  parentDepartment___jobs___children___id
  parentDepartment___jobs___content
  parentDepartment___jobs___departments
  parentDepartment___jobs___departments___childDepartments
  parentDepartment___jobs___departments___children
  parentDepartment___jobs___departments___ghId
  parentDepartment___jobs___departments___id
  parentDepartment___jobs___departments___jobs
  parentDepartment___jobs___departments___name
  parentDepartment___jobs___ghId
  parentDepartment___jobs___id
  parentDepartment___jobs___internal___content
  parentDepartment___jobs___internal___contentDigest
  parentDepartment___jobs___internal___description
  parentDepartment___jobs___internal___fieldOwners
  parentDepartment___jobs___internal___ignoreType
  parentDepartment___jobs___internal___mediaType
  parentDepartment___jobs___internal___owner
  parentDepartment___jobs___internal___type
  parentDepartment___jobs___locationQuestions
  parentDepartment___jobs___locationQuestions___description
  parentDepartment___jobs___locationQuestions___descriptionText
  parentDepartment___jobs___locationQuestions___label
  parentDepartment___jobs___locationQuestions___name
  parentDepartment___jobs___locationQuestions___required
  parentDepartment___jobs___metadata
  parentDepartment___jobs___metadata___id
  parentDepartment___jobs___metadata___name
  parentDepartment___jobs___metadata___type
  parentDepartment___jobs___metadata___value
  parentDepartment___jobs___parent___children
  parentDepartment___jobs___parent___id
  parentDepartment___jobs___questions
  parentDepartment___jobs___questions___description
  parentDepartment___jobs___questions___descriptionText
  parentDepartment___jobs___questions___label
  parentDepartment___jobs___questions___name
  parentDepartment___jobs___questions___required
  parentDepartment___jobs___title
  parentDepartment___jobs___updatedAt
  parentDepartment___name
  parentDepartment___parentDepartment___childDepartments
  parentDepartment___parentDepartment___childDepartments___childDepartments
  parentDepartment___parentDepartment___childDepartments___children
  parentDepartment___parentDepartment___childDepartments___ghId
  parentDepartment___parentDepartment___childDepartments___id
  parentDepartment___parentDepartment___childDepartments___jobs
  parentDepartment___parentDepartment___childDepartments___name
  parentDepartment___parentDepartment___children
  parentDepartment___parentDepartment___children___children
  parentDepartment___parentDepartment___children___id
  parentDepartment___parentDepartment___ghId
  parentDepartment___parentDepartment___id
  parentDepartment___parentDepartment___internal___content
  parentDepartment___parentDepartment___internal___contentDigest
  parentDepartment___parentDepartment___internal___description
  parentDepartment___parentDepartment___internal___fieldOwners
  parentDepartment___parentDepartment___internal___ignoreType
  parentDepartment___parentDepartment___internal___mediaType
  parentDepartment___parentDepartment___internal___owner
  parentDepartment___parentDepartment___internal___type
  parentDepartment___parentDepartment___jobs
  parentDepartment___parentDepartment___jobs___boardToken
  parentDepartment___parentDepartment___jobs___boardUrl
  parentDepartment___parentDepartment___jobs___children
  parentDepartment___parentDepartment___jobs___childrenJobDepartment
  parentDepartment___parentDepartment___jobs___childrenJobPost
  parentDepartment___parentDepartment___jobs___content
  parentDepartment___parentDepartment___jobs___departments
  parentDepartment___parentDepartment___jobs___ghId
  parentDepartment___parentDepartment___jobs___id
  parentDepartment___parentDepartment___jobs___locationQuestions
  parentDepartment___parentDepartment___jobs___metadata
  parentDepartment___parentDepartment___jobs___questions
  parentDepartment___parentDepartment___jobs___title
  parentDepartment___parentDepartment___jobs___updatedAt
  parentDepartment___parentDepartment___name
  parentDepartment___parentDepartment___parentDepartment___childDepartments
  parentDepartment___parentDepartment___parentDepartment___children
  parentDepartment___parentDepartment___parentDepartment___ghId
  parentDepartment___parentDepartment___parentDepartment___id
  parentDepartment___parentDepartment___parentDepartment___jobs
  parentDepartment___parentDepartment___parentDepartment___name
  parentDepartment___parentDepartment___parent___children
  parentDepartment___parentDepartment___parent___id
  parentDepartment___parent___children
  parentDepartment___parent___children___children
  parentDepartment___parent___children___id
  parentDepartment___parent___id
  parentDepartment___parent___internal___content
  parentDepartment___parent___internal___contentDigest
  parentDepartment___parent___internal___description
  parentDepartment___parent___internal___fieldOwners
  parentDepartment___parent___internal___ignoreType
  parentDepartment___parent___internal___mediaType
  parentDepartment___parent___internal___owner
  parentDepartment___parent___internal___type
  parentDepartment___parent___parent___children
  parentDepartment___parent___parent___id
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
}

input GreenhouseJobBoardDepartmentFilterInput {
  childDepartments: GreenhouseJobBoardDepartmentFilterListInput
  children: NodeFilterListInput
  ghId: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  jobs: GreenhouseJobBoardJobFilterListInput
  name: StringQueryOperatorInput
  parent: NodeFilterInput
  parentDepartment: GreenhouseJobBoardDepartmentFilterInput
}

input GreenhouseJobBoardDepartmentFilterListInput {
  elemMatch: GreenhouseJobBoardDepartmentFilterInput
}

type GreenhouseJobBoardDepartmentGroupConnection {
  distinct(field: GreenhouseJobBoardDepartmentFieldsEnum!): [String!]!
  edges: [GreenhouseJobBoardDepartmentEdge!]!
  field: String!
  fieldValue: String
  group(field: GreenhouseJobBoardDepartmentFieldsEnum!, limit: Int, skip: Int): [GreenhouseJobBoardDepartmentGroupConnection!]!
  max(field: GreenhouseJobBoardDepartmentFieldsEnum!): Float
  min(field: GreenhouseJobBoardDepartmentFieldsEnum!): Float
  nodes: [GreenhouseJobBoardDepartment!]!
  pageInfo: PageInfo!
  sum(field: GreenhouseJobBoardDepartmentFieldsEnum!): Float
  totalCount: Int!
}

input GreenhouseJobBoardDepartmentSortInput {
  fields: [GreenhouseJobBoardDepartmentFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type GreenhouseJobBoardJob implements Node {
  boardToken: String!

  # URL to public Greenhouse job board UI
  boardUrl: String!

  # Returns the first child node of type JobDepartment or null if there are no children of given type on this node
  childJobDepartment: JobDepartment

  # Returns the first child node of type JobPost or null if there are no children of given type on this node
  childJobPost: JobPost
  children: [Node!]!

  # Returns all children nodes filtered by type JobDepartment
  childrenJobDepartment: [JobDepartment]

  # Returns all children nodes filtered by type JobPost
  childrenJobPost: [JobPost]
  content: String!
  departments: [GreenhouseJobBoardDepartment!]!
  ghId: String!
  id: ID!
  internal: Internal!
  locationQuestions: [GreenhouseJobBoardJobQuestion!]!
  metadata: [GreenhouseJobBoardJobCustomFieldMetadata!]!
  parent: Node
  questions: [GreenhouseJobBoardJobQuestion!]!
  title: String!
  updatedAt(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
}

type GreenhouseJobBoardJobConnection {
  distinct(field: GreenhouseJobBoardJobFieldsEnum!): [String!]!
  edges: [GreenhouseJobBoardJobEdge!]!
  group(field: GreenhouseJobBoardJobFieldsEnum!, limit: Int, skip: Int): [GreenhouseJobBoardJobGroupConnection!]!
  max(field: GreenhouseJobBoardJobFieldsEnum!): Float
  min(field: GreenhouseJobBoardJobFieldsEnum!): Float
  nodes: [GreenhouseJobBoardJob!]!
  pageInfo: PageInfo!
  sum(field: GreenhouseJobBoardJobFieldsEnum!): Float
  totalCount: Int!
}

type GreenhouseJobBoardJobCustomFieldMetadata {
  id: String!
  name: String!
  type: GreenhouseJobBoardJobCustomFieldType!
  value: String
}

input GreenhouseJobBoardJobCustomFieldMetadataFilterInput {
  id: StringQueryOperatorInput
  name: StringQueryOperatorInput
  type: GreenhouseJobBoardJobCustomFieldTypeQueryOperatorInput
  value: StringQueryOperatorInput
}

input GreenhouseJobBoardJobCustomFieldMetadataFilterListInput {
  elemMatch: GreenhouseJobBoardJobCustomFieldMetadataFilterInput
}

enum GreenhouseJobBoardJobCustomFieldType {
  CURRENCY
  CURRENCY_RANGE
  DATE
  LONG_TEXT
  MULTI_SELECT
  NUMBER_RANGE
  SHORT_TEXT
  SINGLE_SELECT
  URL
  USER
  YES_NO
}

input GreenhouseJobBoardJobCustomFieldTypeQueryOperatorInput {
  eq: GreenhouseJobBoardJobCustomFieldType
  in: [GreenhouseJobBoardJobCustomFieldType]
  ne: GreenhouseJobBoardJobCustomFieldType
  nin: [GreenhouseJobBoardJobCustomFieldType]
}

type GreenhouseJobBoardJobEdge {
  next: GreenhouseJobBoardJob
  node: GreenhouseJobBoardJob!
  previous: GreenhouseJobBoardJob
}

enum GreenhouseJobBoardJobFieldsEnum {
  boardToken
  boardUrl
  childJobDepartment___children
  childJobDepartment___children___children
  childJobDepartment___children___children___children
  childJobDepartment___children___children___id
  childJobDepartment___children___id
  childJobDepartment___children___internal___content
  childJobDepartment___children___internal___contentDigest
  childJobDepartment___children___internal___description
  childJobDepartment___children___internal___fieldOwners
  childJobDepartment___children___internal___ignoreType
  childJobDepartment___children___internal___mediaType
  childJobDepartment___children___internal___owner
  childJobDepartment___children___internal___type
  childJobDepartment___children___parent___children
  childJobDepartment___children___parent___id
  childJobDepartment___ghId
  childJobDepartment___id
  childJobDepartment___internal___content
  childJobDepartment___internal___contentDigest
  childJobDepartment___internal___description
  childJobDepartment___internal___fieldOwners
  childJobDepartment___internal___ignoreType
  childJobDepartment___internal___mediaType
  childJobDepartment___internal___owner
  childJobDepartment___internal___type
  childJobDepartment___jobPosts
  childJobDepartment___jobPosts___absoluteUrl
  childJobDepartment___jobPosts___alternativeCivilianService
  childJobDepartment___jobPosts___boardToken
  childJobDepartment___jobPosts___boardUrl
  childJobDepartment___jobPosts___chapter
  childJobDepartment___jobPosts___children
  childJobDepartment___jobPosts___children___children
  childJobDepartment___jobPosts___children___id
  childJobDepartment___jobPosts___content
  childJobDepartment___jobPosts___content___bodyHtml
  childJobDepartment___jobPosts___content___level
  childJobDepartment___jobPosts___content___title
  childJobDepartment___jobPosts___corporate
  childJobDepartment___jobPosts___departments
  childJobDepartment___jobPosts___departments___children
  childJobDepartment___jobPosts___departments___ghId
  childJobDepartment___jobPosts___departments___id
  childJobDepartment___jobPosts___departments___jobPosts
  childJobDepartment___jobPosts___departments___name
  childJobDepartment___jobPosts___departments___slug
  childJobDepartment___jobPosts___employmentType
  childJobDepartment___jobPosts___externalUrl
  childJobDepartment___jobPosts___ghId
  childJobDepartment___jobPosts___id
  childJobDepartment___jobPosts___internal___content
  childJobDepartment___jobPosts___internal___contentDigest
  childJobDepartment___jobPosts___internal___description
  childJobDepartment___jobPosts___internal___fieldOwners
  childJobDepartment___jobPosts___internal___ignoreType
  childJobDepartment___jobPosts___internal___mediaType
  childJobDepartment___jobPosts___internal___owner
  childJobDepartment___jobPosts___internal___type
  childJobDepartment___jobPosts___keywords
  childJobDepartment___jobPosts___order
  childJobDepartment___jobPosts___parentJob___boardToken
  childJobDepartment___jobPosts___parentJob___boardUrl
  childJobDepartment___jobPosts___parentJob___children
  childJobDepartment___jobPosts___parentJob___childrenJobDepartment
  childJobDepartment___jobPosts___parentJob___childrenJobPost
  childJobDepartment___jobPosts___parentJob___content
  childJobDepartment___jobPosts___parentJob___departments
  childJobDepartment___jobPosts___parentJob___ghId
  childJobDepartment___jobPosts___parentJob___id
  childJobDepartment___jobPosts___parentJob___locationQuestions
  childJobDepartment___jobPosts___parentJob___metadata
  childJobDepartment___jobPosts___parentJob___questions
  childJobDepartment___jobPosts___parentJob___title
  childJobDepartment___jobPosts___parentJob___updatedAt
  childJobDepartment___jobPosts___parent___children
  childJobDepartment___jobPosts___parent___id
  childJobDepartment___jobPosts___priorExperience
  childJobDepartment___jobPosts___rawContent
  childJobDepartment___jobPosts___tags
  childJobDepartment___jobPosts___title
  childJobDepartment___jobPosts___updatedAt
  childJobDepartment___jobPosts___validThrough
  childJobDepartment___name
  childJobDepartment___parent___children
  childJobDepartment___parent___children___children
  childJobDepartment___parent___children___id
  childJobDepartment___parent___id
  childJobDepartment___parent___internal___content
  childJobDepartment___parent___internal___contentDigest
  childJobDepartment___parent___internal___description
  childJobDepartment___parent___internal___fieldOwners
  childJobDepartment___parent___internal___ignoreType
  childJobDepartment___parent___internal___mediaType
  childJobDepartment___parent___internal___owner
  childJobDepartment___parent___internal___type
  childJobDepartment___parent___parent___children
  childJobDepartment___parent___parent___id
  childJobDepartment___slug
  childJobPost___absoluteUrl
  childJobPost___alternativeCivilianService
  childJobPost___boardToken
  childJobPost___boardUrl
  childJobPost___chapter
  childJobPost___children
  childJobPost___children___children
  childJobPost___children___children___children
  childJobPost___children___children___id
  childJobPost___children___id
  childJobPost___children___internal___content
  childJobPost___children___internal___contentDigest
  childJobPost___children___internal___description
  childJobPost___children___internal___fieldOwners
  childJobPost___children___internal___ignoreType
  childJobPost___children___internal___mediaType
  childJobPost___children___internal___owner
  childJobPost___children___internal___type
  childJobPost___children___parent___children
  childJobPost___children___parent___id
  childJobPost___content
  childJobPost___content___bodyHtml
  childJobPost___content___level
  childJobPost___content___title
  childJobPost___corporate
  childJobPost___departments
  childJobPost___departments___children
  childJobPost___departments___children___children
  childJobPost___departments___children___id
  childJobPost___departments___ghId
  childJobPost___departments___id
  childJobPost___departments___internal___content
  childJobPost___departments___internal___contentDigest
  childJobPost___departments___internal___description
  childJobPost___departments___internal___fieldOwners
  childJobPost___departments___internal___ignoreType
  childJobPost___departments___internal___mediaType
  childJobPost___departments___internal___owner
  childJobPost___departments___internal___type
  childJobPost___departments___jobPosts
  childJobPost___departments___jobPosts___absoluteUrl
  childJobPost___departments___jobPosts___alternativeCivilianService
  childJobPost___departments___jobPosts___boardToken
  childJobPost___departments___jobPosts___boardUrl
  childJobPost___departments___jobPosts___chapter
  childJobPost___departments___jobPosts___children
  childJobPost___departments___jobPosts___content
  childJobPost___departments___jobPosts___corporate
  childJobPost___departments___jobPosts___departments
  childJobPost___departments___jobPosts___employmentType
  childJobPost___departments___jobPosts___externalUrl
  childJobPost___departments___jobPosts___ghId
  childJobPost___departments___jobPosts___id
  childJobPost___departments___jobPosts___keywords
  childJobPost___departments___jobPosts___order
  childJobPost___departments___jobPosts___priorExperience
  childJobPost___departments___jobPosts___rawContent
  childJobPost___departments___jobPosts___tags
  childJobPost___departments___jobPosts___title
  childJobPost___departments___jobPosts___updatedAt
  childJobPost___departments___jobPosts___validThrough
  childJobPost___departments___name
  childJobPost___departments___parent___children
  childJobPost___departments___parent___id
  childJobPost___departments___slug
  childJobPost___employmentType
  childJobPost___externalUrl
  childJobPost___ghId
  childJobPost___id
  childJobPost___internal___content
  childJobPost___internal___contentDigest
  childJobPost___internal___description
  childJobPost___internal___fieldOwners
  childJobPost___internal___ignoreType
  childJobPost___internal___mediaType
  childJobPost___internal___owner
  childJobPost___internal___type
  childJobPost___keywords
  childJobPost___order
  childJobPost___parentJob___boardToken
  childJobPost___parentJob___boardUrl
  childJobPost___parentJob___childJobDepartment___children
  childJobPost___parentJob___childJobDepartment___ghId
  childJobPost___parentJob___childJobDepartment___id
  childJobPost___parentJob___childJobDepartment___jobPosts
  childJobPost___parentJob___childJobDepartment___name
  childJobPost___parentJob___childJobDepartment___slug
  childJobPost___parentJob___childJobPost___absoluteUrl
  childJobPost___parentJob___childJobPost___alternativeCivilianService
  childJobPost___parentJob___childJobPost___boardToken
  childJobPost___parentJob___childJobPost___boardUrl
  childJobPost___parentJob___childJobPost___chapter
  childJobPost___parentJob___childJobPost___children
  childJobPost___parentJob___childJobPost___content
  childJobPost___parentJob___childJobPost___corporate
  childJobPost___parentJob___childJobPost___departments
  childJobPost___parentJob___childJobPost___employmentType
  childJobPost___parentJob___childJobPost___externalUrl
  childJobPost___parentJob___childJobPost___ghId
  childJobPost___parentJob___childJobPost___id
  childJobPost___parentJob___childJobPost___keywords
  childJobPost___parentJob___childJobPost___order
  childJobPost___parentJob___childJobPost___priorExperience
  childJobPost___parentJob___childJobPost___rawContent
  childJobPost___parentJob___childJobPost___tags
  childJobPost___parentJob___childJobPost___title
  childJobPost___parentJob___childJobPost___updatedAt
  childJobPost___parentJob___childJobPost___validThrough
  childJobPost___parentJob___children
  childJobPost___parentJob___childrenJobDepartment
  childJobPost___parentJob___childrenJobDepartment___children
  childJobPost___parentJob___childrenJobDepartment___ghId
  childJobPost___parentJob___childrenJobDepartment___id
  childJobPost___parentJob___childrenJobDepartment___jobPosts
  childJobPost___parentJob___childrenJobDepartment___name
  childJobPost___parentJob___childrenJobDepartment___slug
  childJobPost___parentJob___childrenJobPost
  childJobPost___parentJob___childrenJobPost___absoluteUrl
  childJobPost___parentJob___childrenJobPost___alternativeCivilianService
  childJobPost___parentJob___childrenJobPost___boardToken
  childJobPost___parentJob___childrenJobPost___boardUrl
  childJobPost___parentJob___childrenJobPost___chapter
  childJobPost___parentJob___childrenJobPost___children
  childJobPost___parentJob___childrenJobPost___content
  childJobPost___parentJob___childrenJobPost___corporate
  childJobPost___parentJob___childrenJobPost___departments
  childJobPost___parentJob___childrenJobPost___employmentType
  childJobPost___parentJob___childrenJobPost___externalUrl
  childJobPost___parentJob___childrenJobPost___ghId
  childJobPost___parentJob___childrenJobPost___id
  childJobPost___parentJob___childrenJobPost___keywords
  childJobPost___parentJob___childrenJobPost___order
  childJobPost___parentJob___childrenJobPost___priorExperience
  childJobPost___parentJob___childrenJobPost___rawContent
  childJobPost___parentJob___childrenJobPost___tags
  childJobPost___parentJob___childrenJobPost___title
  childJobPost___parentJob___childrenJobPost___updatedAt
  childJobPost___parentJob___childrenJobPost___validThrough
  childJobPost___parentJob___children___children
  childJobPost___parentJob___children___id
  childJobPost___parentJob___content
  childJobPost___parentJob___departments
  childJobPost___parentJob___departments___childDepartments
  childJobPost___parentJob___departments___children
  childJobPost___parentJob___departments___ghId
  childJobPost___parentJob___departments___id
  childJobPost___parentJob___departments___jobs
  childJobPost___parentJob___departments___name
  childJobPost___parentJob___ghId
  childJobPost___parentJob___id
  childJobPost___parentJob___internal___content
  childJobPost___parentJob___internal___contentDigest
  childJobPost___parentJob___internal___description
  childJobPost___parentJob___internal___fieldOwners
  childJobPost___parentJob___internal___ignoreType
  childJobPost___parentJob___internal___mediaType
  childJobPost___parentJob___internal___owner
  childJobPost___parentJob___internal___type
  childJobPost___parentJob___locationQuestions
  childJobPost___parentJob___locationQuestions___description
  childJobPost___parentJob___locationQuestions___descriptionText
  childJobPost___parentJob___locationQuestions___label
  childJobPost___parentJob___locationQuestions___name
  childJobPost___parentJob___locationQuestions___required
  childJobPost___parentJob___metadata
  childJobPost___parentJob___metadata___id
  childJobPost___parentJob___metadata___name
  childJobPost___parentJob___metadata___type
  childJobPost___parentJob___metadata___value
  childJobPost___parentJob___parent___children
  childJobPost___parentJob___parent___id
  childJobPost___parentJob___questions
  childJobPost___parentJob___questions___description
  childJobPost___parentJob___questions___descriptionText
  childJobPost___parentJob___questions___label
  childJobPost___parentJob___questions___name
  childJobPost___parentJob___questions___required
  childJobPost___parentJob___title
  childJobPost___parentJob___updatedAt
  childJobPost___parent___children
  childJobPost___parent___children___children
  childJobPost___parent___children___id
  childJobPost___parent___id
  childJobPost___parent___internal___content
  childJobPost___parent___internal___contentDigest
  childJobPost___parent___internal___description
  childJobPost___parent___internal___fieldOwners
  childJobPost___parent___internal___ignoreType
  childJobPost___parent___internal___mediaType
  childJobPost___parent___internal___owner
  childJobPost___parent___internal___type
  childJobPost___parent___parent___children
  childJobPost___parent___parent___id
  childJobPost___priorExperience
  childJobPost___rawContent
  childJobPost___tags
  childJobPost___title
  childJobPost___updatedAt
  childJobPost___validThrough
  children
  childrenJobDepartment
  childrenJobDepartment___children
  childrenJobDepartment___children___children
  childrenJobDepartment___children___children___children
  childrenJobDepartment___children___children___id
  childrenJobDepartment___children___id
  childrenJobDepartment___children___internal___content
  childrenJobDepartment___children___internal___contentDigest
  childrenJobDepartment___children___internal___description
  childrenJobDepartment___children___internal___fieldOwners
  childrenJobDepartment___children___internal___ignoreType
  childrenJobDepartment___children___internal___mediaType
  childrenJobDepartment___children___internal___owner
  childrenJobDepartment___children___internal___type
  childrenJobDepartment___children___parent___children
  childrenJobDepartment___children___parent___id
  childrenJobDepartment___ghId
  childrenJobDepartment___id
  childrenJobDepartment___internal___content
  childrenJobDepartment___internal___contentDigest
  childrenJobDepartment___internal___description
  childrenJobDepartment___internal___fieldOwners
  childrenJobDepartment___internal___ignoreType
  childrenJobDepartment___internal___mediaType
  childrenJobDepartment___internal___owner
  childrenJobDepartment___internal___type
  childrenJobDepartment___jobPosts
  childrenJobDepartment___jobPosts___absoluteUrl
  childrenJobDepartment___jobPosts___alternativeCivilianService
  childrenJobDepartment___jobPosts___boardToken
  childrenJobDepartment___jobPosts___boardUrl
  childrenJobDepartment___jobPosts___chapter
  childrenJobDepartment___jobPosts___children
  childrenJobDepartment___jobPosts___children___children
  childrenJobDepartment___jobPosts___children___id
  childrenJobDepartment___jobPosts___content
  childrenJobDepartment___jobPosts___content___bodyHtml
  childrenJobDepartment___jobPosts___content___level
  childrenJobDepartment___jobPosts___content___title
  childrenJobDepartment___jobPosts___corporate
  childrenJobDepartment___jobPosts___departments
  childrenJobDepartment___jobPosts___departments___children
  childrenJobDepartment___jobPosts___departments___ghId
  childrenJobDepartment___jobPosts___departments___id
  childrenJobDepartment___jobPosts___departments___jobPosts
  childrenJobDepartment___jobPosts___departments___name
  childrenJobDepartment___jobPosts___departments___slug
  childrenJobDepartment___jobPosts___employmentType
  childrenJobDepartment___jobPosts___externalUrl
  childrenJobDepartment___jobPosts___ghId
  childrenJobDepartment___jobPosts___id
  childrenJobDepartment___jobPosts___internal___content
  childrenJobDepartment___jobPosts___internal___contentDigest
  childrenJobDepartment___jobPosts___internal___description
  childrenJobDepartment___jobPosts___internal___fieldOwners
  childrenJobDepartment___jobPosts___internal___ignoreType
  childrenJobDepartment___jobPosts___internal___mediaType
  childrenJobDepartment___jobPosts___internal___owner
  childrenJobDepartment___jobPosts___internal___type
  childrenJobDepartment___jobPosts___keywords
  childrenJobDepartment___jobPosts___order
  childrenJobDepartment___jobPosts___parentJob___boardToken
  childrenJobDepartment___jobPosts___parentJob___boardUrl
  childrenJobDepartment___jobPosts___parentJob___children
  childrenJobDepartment___jobPosts___parentJob___childrenJobDepartment
  childrenJobDepartment___jobPosts___parentJob___childrenJobPost
  childrenJobDepartment___jobPosts___parentJob___content
  childrenJobDepartment___jobPosts___parentJob___departments
  childrenJobDepartment___jobPosts___parentJob___ghId
  childrenJobDepartment___jobPosts___parentJob___id
  childrenJobDepartment___jobPosts___parentJob___locationQuestions
  childrenJobDepartment___jobPosts___parentJob___metadata
  childrenJobDepartment___jobPosts___parentJob___questions
  childrenJobDepartment___jobPosts___parentJob___title
  childrenJobDepartment___jobPosts___parentJob___updatedAt
  childrenJobDepartment___jobPosts___parent___children
  childrenJobDepartment___jobPosts___parent___id
  childrenJobDepartment___jobPosts___priorExperience
  childrenJobDepartment___jobPosts___rawContent
  childrenJobDepartment___jobPosts___tags
  childrenJobDepartment___jobPosts___title
  childrenJobDepartment___jobPosts___updatedAt
  childrenJobDepartment___jobPosts___validThrough
  childrenJobDepartment___name
  childrenJobDepartment___parent___children
  childrenJobDepartment___parent___children___children
  childrenJobDepartment___parent___children___id
  childrenJobDepartment___parent___id
  childrenJobDepartment___parent___internal___content
  childrenJobDepartment___parent___internal___contentDigest
  childrenJobDepartment___parent___internal___description
  childrenJobDepartment___parent___internal___fieldOwners
  childrenJobDepartment___parent___internal___ignoreType
  childrenJobDepartment___parent___internal___mediaType
  childrenJobDepartment___parent___internal___owner
  childrenJobDepartment___parent___internal___type
  childrenJobDepartment___parent___parent___children
  childrenJobDepartment___parent___parent___id
  childrenJobDepartment___slug
  childrenJobPost
  childrenJobPost___absoluteUrl
  childrenJobPost___alternativeCivilianService
  childrenJobPost___boardToken
  childrenJobPost___boardUrl
  childrenJobPost___chapter
  childrenJobPost___children
  childrenJobPost___children___children
  childrenJobPost___children___children___children
  childrenJobPost___children___children___id
  childrenJobPost___children___id
  childrenJobPost___children___internal___content
  childrenJobPost___children___internal___contentDigest
  childrenJobPost___children___internal___description
  childrenJobPost___children___internal___fieldOwners
  childrenJobPost___children___internal___ignoreType
  childrenJobPost___children___internal___mediaType
  childrenJobPost___children___internal___owner
  childrenJobPost___children___internal___type
  childrenJobPost___children___parent___children
  childrenJobPost___children___parent___id
  childrenJobPost___content
  childrenJobPost___content___bodyHtml
  childrenJobPost___content___level
  childrenJobPost___content___title
  childrenJobPost___corporate
  childrenJobPost___departments
  childrenJobPost___departments___children
  childrenJobPost___departments___children___children
  childrenJobPost___departments___children___id
  childrenJobPost___departments___ghId
  childrenJobPost___departments___id
  childrenJobPost___departments___internal___content
  childrenJobPost___departments___internal___contentDigest
  childrenJobPost___departments___internal___description
  childrenJobPost___departments___internal___fieldOwners
  childrenJobPost___departments___internal___ignoreType
  childrenJobPost___departments___internal___mediaType
  childrenJobPost___departments___internal___owner
  childrenJobPost___departments___internal___type
  childrenJobPost___departments___jobPosts
  childrenJobPost___departments___jobPosts___absoluteUrl
  childrenJobPost___departments___jobPosts___alternativeCivilianService
  childrenJobPost___departments___jobPosts___boardToken
  childrenJobPost___departments___jobPosts___boardUrl
  childrenJobPost___departments___jobPosts___chapter
  childrenJobPost___departments___jobPosts___children
  childrenJobPost___departments___jobPosts___content
  childrenJobPost___departments___jobPosts___corporate
  childrenJobPost___departments___jobPosts___departments
  childrenJobPost___departments___jobPosts___employmentType
  childrenJobPost___departments___jobPosts___externalUrl
  childrenJobPost___departments___jobPosts___ghId
  childrenJobPost___departments___jobPosts___id
  childrenJobPost___departments___jobPosts___keywords
  childrenJobPost___departments___jobPosts___order
  childrenJobPost___departments___jobPosts___priorExperience
  childrenJobPost___departments___jobPosts___rawContent
  childrenJobPost___departments___jobPosts___tags
  childrenJobPost___departments___jobPosts___title
  childrenJobPost___departments___jobPosts___updatedAt
  childrenJobPost___departments___jobPosts___validThrough
  childrenJobPost___departments___name
  childrenJobPost___departments___parent___children
  childrenJobPost___departments___parent___id
  childrenJobPost___departments___slug
  childrenJobPost___employmentType
  childrenJobPost___externalUrl
  childrenJobPost___ghId
  childrenJobPost___id
  childrenJobPost___internal___content
  childrenJobPost___internal___contentDigest
  childrenJobPost___internal___description
  childrenJobPost___internal___fieldOwners
  childrenJobPost___internal___ignoreType
  childrenJobPost___internal___mediaType
  childrenJobPost___internal___owner
  childrenJobPost___internal___type
  childrenJobPost___keywords
  childrenJobPost___order
  childrenJobPost___parentJob___boardToken
  childrenJobPost___parentJob___boardUrl
  childrenJobPost___parentJob___childJobDepartment___children
  childrenJobPost___parentJob___childJobDepartment___ghId
  childrenJobPost___parentJob___childJobDepartment___id
  childrenJobPost___parentJob___childJobDepartment___jobPosts
  childrenJobPost___parentJob___childJobDepartment___name
  childrenJobPost___parentJob___childJobDepartment___slug
  childrenJobPost___parentJob___childJobPost___absoluteUrl
  childrenJobPost___parentJob___childJobPost___alternativeCivilianService
  childrenJobPost___parentJob___childJobPost___boardToken
  childrenJobPost___parentJob___childJobPost___boardUrl
  childrenJobPost___parentJob___childJobPost___chapter
  childrenJobPost___parentJob___childJobPost___children
  childrenJobPost___parentJob___childJobPost___content
  childrenJobPost___parentJob___childJobPost___corporate
  childrenJobPost___parentJob___childJobPost___departments
  childrenJobPost___parentJob___childJobPost___employmentType
  childrenJobPost___parentJob___childJobPost___externalUrl
  childrenJobPost___parentJob___childJobPost___ghId
  childrenJobPost___parentJob___childJobPost___id
  childrenJobPost___parentJob___childJobPost___keywords
  childrenJobPost___parentJob___childJobPost___order
  childrenJobPost___parentJob___childJobPost___priorExperience
  childrenJobPost___parentJob___childJobPost___rawContent
  childrenJobPost___parentJob___childJobPost___tags
  childrenJobPost___parentJob___childJobPost___title
  childrenJobPost___parentJob___childJobPost___updatedAt
  childrenJobPost___parentJob___childJobPost___validThrough
  childrenJobPost___parentJob___children
  childrenJobPost___parentJob___childrenJobDepartment
  childrenJobPost___parentJob___childrenJobDepartment___children
  childrenJobPost___parentJob___childrenJobDepartment___ghId
  childrenJobPost___parentJob___childrenJobDepartment___id
  childrenJobPost___parentJob___childrenJobDepartment___jobPosts
  childrenJobPost___parentJob___childrenJobDepartment___name
  childrenJobPost___parentJob___childrenJobDepartment___slug
  childrenJobPost___parentJob___childrenJobPost
  childrenJobPost___parentJob___childrenJobPost___absoluteUrl
  childrenJobPost___parentJob___childrenJobPost___alternativeCivilianService
  childrenJobPost___parentJob___childrenJobPost___boardToken
  childrenJobPost___parentJob___childrenJobPost___boardUrl
  childrenJobPost___parentJob___childrenJobPost___chapter
  childrenJobPost___parentJob___childrenJobPost___children
  childrenJobPost___parentJob___childrenJobPost___content
  childrenJobPost___parentJob___childrenJobPost___corporate
  childrenJobPost___parentJob___childrenJobPost___departments
  childrenJobPost___parentJob___childrenJobPost___employmentType
  childrenJobPost___parentJob___childrenJobPost___externalUrl
  childrenJobPost___parentJob___childrenJobPost___ghId
  childrenJobPost___parentJob___childrenJobPost___id
  childrenJobPost___parentJob___childrenJobPost___keywords
  childrenJobPost___parentJob___childrenJobPost___order
  childrenJobPost___parentJob___childrenJobPost___priorExperience
  childrenJobPost___parentJob___childrenJobPost___rawContent
  childrenJobPost___parentJob___childrenJobPost___tags
  childrenJobPost___parentJob___childrenJobPost___title
  childrenJobPost___parentJob___childrenJobPost___updatedAt
  childrenJobPost___parentJob___childrenJobPost___validThrough
  childrenJobPost___parentJob___children___children
  childrenJobPost___parentJob___children___id
  childrenJobPost___parentJob___content
  childrenJobPost___parentJob___departments
  childrenJobPost___parentJob___departments___childDepartments
  childrenJobPost___parentJob___departments___children
  childrenJobPost___parentJob___departments___ghId
  childrenJobPost___parentJob___departments___id
  childrenJobPost___parentJob___departments___jobs
  childrenJobPost___parentJob___departments___name
  childrenJobPost___parentJob___ghId
  childrenJobPost___parentJob___id
  childrenJobPost___parentJob___internal___content
  childrenJobPost___parentJob___internal___contentDigest
  childrenJobPost___parentJob___internal___description
  childrenJobPost___parentJob___internal___fieldOwners
  childrenJobPost___parentJob___internal___ignoreType
  childrenJobPost___parentJob___internal___mediaType
  childrenJobPost___parentJob___internal___owner
  childrenJobPost___parentJob___internal___type
  childrenJobPost___parentJob___locationQuestions
  childrenJobPost___parentJob___locationQuestions___description
  childrenJobPost___parentJob___locationQuestions___descriptionText
  childrenJobPost___parentJob___locationQuestions___label
  childrenJobPost___parentJob___locationQuestions___name
  childrenJobPost___parentJob___locationQuestions___required
  childrenJobPost___parentJob___metadata
  childrenJobPost___parentJob___metadata___id
  childrenJobPost___parentJob___metadata___name
  childrenJobPost___parentJob___metadata___type
  childrenJobPost___parentJob___metadata___value
  childrenJobPost___parentJob___parent___children
  childrenJobPost___parentJob___parent___id
  childrenJobPost___parentJob___questions
  childrenJobPost___parentJob___questions___description
  childrenJobPost___parentJob___questions___descriptionText
  childrenJobPost___parentJob___questions___label
  childrenJobPost___parentJob___questions___name
  childrenJobPost___parentJob___questions___required
  childrenJobPost___parentJob___title
  childrenJobPost___parentJob___updatedAt
  childrenJobPost___parent___children
  childrenJobPost___parent___children___children
  childrenJobPost___parent___children___id
  childrenJobPost___parent___id
  childrenJobPost___parent___internal___content
  childrenJobPost___parent___internal___contentDigest
  childrenJobPost___parent___internal___description
  childrenJobPost___parent___internal___fieldOwners
  childrenJobPost___parent___internal___ignoreType
  childrenJobPost___parent___internal___mediaType
  childrenJobPost___parent___internal___owner
  childrenJobPost___parent___internal___type
  childrenJobPost___parent___parent___children
  childrenJobPost___parent___parent___id
  childrenJobPost___priorExperience
  childrenJobPost___rawContent
  childrenJobPost___tags
  childrenJobPost___title
  childrenJobPost___updatedAt
  childrenJobPost___validThrough
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  content
  departments
  departments___childDepartments
  departments___childDepartments___childDepartments
  departments___childDepartments___childDepartments___childDepartments
  departments___childDepartments___childDepartments___children
  departments___childDepartments___childDepartments___ghId
  departments___childDepartments___childDepartments___id
  departments___childDepartments___childDepartments___jobs
  departments___childDepartments___childDepartments___name
  departments___childDepartments___children
  departments___childDepartments___children___children
  departments___childDepartments___children___id
  departments___childDepartments___ghId
  departments___childDepartments___id
  departments___childDepartments___internal___content
  departments___childDepartments___internal___contentDigest
  departments___childDepartments___internal___description
  departments___childDepartments___internal___fieldOwners
  departments___childDepartments___internal___ignoreType
  departments___childDepartments___internal___mediaType
  departments___childDepartments___internal___owner
  departments___childDepartments___internal___type
  departments___childDepartments___jobs
  departments___childDepartments___jobs___boardToken
  departments___childDepartments___jobs___boardUrl
  departments___childDepartments___jobs___children
  departments___childDepartments___jobs___childrenJobDepartment
  departments___childDepartments___jobs___childrenJobPost
  departments___childDepartments___jobs___content
  departments___childDepartments___jobs___departments
  departments___childDepartments___jobs___ghId
  departments___childDepartments___jobs___id
  departments___childDepartments___jobs___locationQuestions
  departments___childDepartments___jobs___metadata
  departments___childDepartments___jobs___questions
  departments___childDepartments___jobs___title
  departments___childDepartments___jobs___updatedAt
  departments___childDepartments___name
  departments___childDepartments___parentDepartment___childDepartments
  departments___childDepartments___parentDepartment___children
  departments___childDepartments___parentDepartment___ghId
  departments___childDepartments___parentDepartment___id
  departments___childDepartments___parentDepartment___jobs
  departments___childDepartments___parentDepartment___name
  departments___childDepartments___parent___children
  departments___childDepartments___parent___id
  departments___children
  departments___children___children
  departments___children___children___children
  departments___children___children___id
  departments___children___id
  departments___children___internal___content
  departments___children___internal___contentDigest
  departments___children___internal___description
  departments___children___internal___fieldOwners
  departments___children___internal___ignoreType
  departments___children___internal___mediaType
  departments___children___internal___owner
  departments___children___internal___type
  departments___children___parent___children
  departments___children___parent___id
  departments___ghId
  departments___id
  departments___internal___content
  departments___internal___contentDigest
  departments___internal___description
  departments___internal___fieldOwners
  departments___internal___ignoreType
  departments___internal___mediaType
  departments___internal___owner
  departments___internal___type
  departments___jobs
  departments___jobs___boardToken
  departments___jobs___boardUrl
  departments___jobs___childJobDepartment___children
  departments___jobs___childJobDepartment___ghId
  departments___jobs___childJobDepartment___id
  departments___jobs___childJobDepartment___jobPosts
  departments___jobs___childJobDepartment___name
  departments___jobs___childJobDepartment___slug
  departments___jobs___childJobPost___absoluteUrl
  departments___jobs___childJobPost___alternativeCivilianService
  departments___jobs___childJobPost___boardToken
  departments___jobs___childJobPost___boardUrl
  departments___jobs___childJobPost___chapter
  departments___jobs___childJobPost___children
  departments___jobs___childJobPost___content
  departments___jobs___childJobPost___corporate
  departments___jobs___childJobPost___departments
  departments___jobs___childJobPost___employmentType
  departments___jobs___childJobPost___externalUrl
  departments___jobs___childJobPost___ghId
  departments___jobs___childJobPost___id
  departments___jobs___childJobPost___keywords
  departments___jobs___childJobPost___order
  departments___jobs___childJobPost___priorExperience
  departments___jobs___childJobPost___rawContent
  departments___jobs___childJobPost___tags
  departments___jobs___childJobPost___title
  departments___jobs___childJobPost___updatedAt
  departments___jobs___childJobPost___validThrough
  departments___jobs___children
  departments___jobs___childrenJobDepartment
  departments___jobs___childrenJobDepartment___children
  departments___jobs___childrenJobDepartment___ghId
  departments___jobs___childrenJobDepartment___id
  departments___jobs___childrenJobDepartment___jobPosts
  departments___jobs___childrenJobDepartment___name
  departments___jobs___childrenJobDepartment___slug
  departments___jobs___childrenJobPost
  departments___jobs___childrenJobPost___absoluteUrl
  departments___jobs___childrenJobPost___alternativeCivilianService
  departments___jobs___childrenJobPost___boardToken
  departments___jobs___childrenJobPost___boardUrl
  departments___jobs___childrenJobPost___chapter
  departments___jobs___childrenJobPost___children
  departments___jobs___childrenJobPost___content
  departments___jobs___childrenJobPost___corporate
  departments___jobs___childrenJobPost___departments
  departments___jobs___childrenJobPost___employmentType
  departments___jobs___childrenJobPost___externalUrl
  departments___jobs___childrenJobPost___ghId
  departments___jobs___childrenJobPost___id
  departments___jobs___childrenJobPost___keywords
  departments___jobs___childrenJobPost___order
  departments___jobs___childrenJobPost___priorExperience
  departments___jobs___childrenJobPost___rawContent
  departments___jobs___childrenJobPost___tags
  departments___jobs___childrenJobPost___title
  departments___jobs___childrenJobPost___updatedAt
  departments___jobs___childrenJobPost___validThrough
  departments___jobs___children___children
  departments___jobs___children___id
  departments___jobs___content
  departments___jobs___departments
  departments___jobs___departments___childDepartments
  departments___jobs___departments___children
  departments___jobs___departments___ghId
  departments___jobs___departments___id
  departments___jobs___departments___jobs
  departments___jobs___departments___name
  departments___jobs___ghId
  departments___jobs___id
  departments___jobs___internal___content
  departments___jobs___internal___contentDigest
  departments___jobs___internal___description
  departments___jobs___internal___fieldOwners
  departments___jobs___internal___ignoreType
  departments___jobs___internal___mediaType
  departments___jobs___internal___owner
  departments___jobs___internal___type
  departments___jobs___locationQuestions
  departments___jobs___locationQuestions___description
  departments___jobs___locationQuestions___descriptionText
  departments___jobs___locationQuestions___label
  departments___jobs___locationQuestions___name
  departments___jobs___locationQuestions___required
  departments___jobs___metadata
  departments___jobs___metadata___id
  departments___jobs___metadata___name
  departments___jobs___metadata___type
  departments___jobs___metadata___value
  departments___jobs___parent___children
  departments___jobs___parent___id
  departments___jobs___questions
  departments___jobs___questions___description
  departments___jobs___questions___descriptionText
  departments___jobs___questions___label
  departments___jobs___questions___name
  departments___jobs___questions___required
  departments___jobs___title
  departments___jobs___updatedAt
  departments___name
  departments___parentDepartment___childDepartments
  departments___parentDepartment___childDepartments___childDepartments
  departments___parentDepartment___childDepartments___children
  departments___parentDepartment___childDepartments___ghId
  departments___parentDepartment___childDepartments___id
  departments___parentDepartment___childDepartments___jobs
  departments___parentDepartment___childDepartments___name
  departments___parentDepartment___children
  departments___parentDepartment___children___children
  departments___parentDepartment___children___id
  departments___parentDepartment___ghId
  departments___parentDepartment___id
  departments___parentDepartment___internal___content
  departments___parentDepartment___internal___contentDigest
  departments___parentDepartment___internal___description
  departments___parentDepartment___internal___fieldOwners
  departments___parentDepartment___internal___ignoreType
  departments___parentDepartment___internal___mediaType
  departments___parentDepartment___internal___owner
  departments___parentDepartment___internal___type
  departments___parentDepartment___jobs
  departments___parentDepartment___jobs___boardToken
  departments___parentDepartment___jobs___boardUrl
  departments___parentDepartment___jobs___children
  departments___parentDepartment___jobs___childrenJobDepartment
  departments___parentDepartment___jobs___childrenJobPost
  departments___parentDepartment___jobs___content
  departments___parentDepartment___jobs___departments
  departments___parentDepartment___jobs___ghId
  departments___parentDepartment___jobs___id
  departments___parentDepartment___jobs___locationQuestions
  departments___parentDepartment___jobs___metadata
  departments___parentDepartment___jobs___questions
  departments___parentDepartment___jobs___title
  departments___parentDepartment___jobs___updatedAt
  departments___parentDepartment___name
  departments___parentDepartment___parentDepartment___childDepartments
  departments___parentDepartment___parentDepartment___children
  departments___parentDepartment___parentDepartment___ghId
  departments___parentDepartment___parentDepartment___id
  departments___parentDepartment___parentDepartment___jobs
  departments___parentDepartment___parentDepartment___name
  departments___parentDepartment___parent___children
  departments___parentDepartment___parent___id
  departments___parent___children
  departments___parent___children___children
  departments___parent___children___id
  departments___parent___id
  departments___parent___internal___content
  departments___parent___internal___contentDigest
  departments___parent___internal___description
  departments___parent___internal___fieldOwners
  departments___parent___internal___ignoreType
  departments___parent___internal___mediaType
  departments___parent___internal___owner
  departments___parent___internal___type
  departments___parent___parent___children
  departments___parent___parent___id
  ghId
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  locationQuestions
  locationQuestions___description
  locationQuestions___descriptionText
  locationQuestions___label
  locationQuestions___name
  locationQuestions___required
  metadata
  metadata___id
  metadata___name
  metadata___type
  metadata___value
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  questions
  questions___description
  questions___descriptionText
  questions___label
  questions___name
  questions___required
  title
  updatedAt
}

input GreenhouseJobBoardJobFilterInput {
  boardToken: StringQueryOperatorInput
  boardUrl: StringQueryOperatorInput
  childJobDepartment: JobDepartmentFilterInput
  childJobPost: JobPostFilterInput
  children: NodeFilterListInput
  childrenJobDepartment: JobDepartmentFilterListInput
  childrenJobPost: JobPostFilterListInput
  content: StringQueryOperatorInput
  departments: GreenhouseJobBoardDepartmentFilterListInput
  ghId: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  locationQuestions: GreenhouseJobBoardJobQuestionFilterListInput
  metadata: GreenhouseJobBoardJobCustomFieldMetadataFilterListInput
  parent: NodeFilterInput
  questions: GreenhouseJobBoardJobQuestionFilterListInput
  title: StringQueryOperatorInput
  updatedAt: DateQueryOperatorInput
}

input GreenhouseJobBoardJobFilterListInput {
  elemMatch: GreenhouseJobBoardJobFilterInput
}

type GreenhouseJobBoardJobGroupConnection {
  distinct(field: GreenhouseJobBoardJobFieldsEnum!): [String!]!
  edges: [GreenhouseJobBoardJobEdge!]!
  field: String!
  fieldValue: String
  group(field: GreenhouseJobBoardJobFieldsEnum!, limit: Int, skip: Int): [GreenhouseJobBoardJobGroupConnection!]!
  max(field: GreenhouseJobBoardJobFieldsEnum!): Float
  min(field: GreenhouseJobBoardJobFieldsEnum!): Float
  nodes: [GreenhouseJobBoardJob!]!
  pageInfo: PageInfo!
  sum(field: GreenhouseJobBoardJobFieldsEnum!): Float
  totalCount: Int!
}

interface GreenhouseJobBoardJobQuestion {
  description: String
  descriptionText: String
  label: String!
  name: String!
  required: Boolean!
}

type GreenhouseJobBoardJobQuestionAnswerOption {
  # Label of the question answer value
  label: String!

  # Unique id of the question answer value
  value: String!
}

input GreenhouseJobBoardJobQuestionFilterInput {
  description: StringQueryOperatorInput
  descriptionText: StringQueryOperatorInput
  label: StringQueryOperatorInput
  name: StringQueryOperatorInput
  required: BooleanQueryOperatorInput
}

input GreenhouseJobBoardJobQuestionFilterListInput {
  elemMatch: GreenhouseJobBoardJobQuestionFilterInput
}

type GreenhouseJobBoardJobQuestionForAttachment implements GreenhouseJobBoardJobQuestion {
  description: String
  descriptionText: String
  label: String!
  name: String!
  required: Boolean!
}

type GreenhouseJobBoardJobQuestionForLongText implements GreenhouseJobBoardJobQuestion {
  description: String
  descriptionText: String
  label: String!
  name: String!
  required: Boolean!
}

type GreenhouseJobBoardJobQuestionForMultiSelect implements GreenhouseJobBoardJobQuestion {
  description: String
  descriptionText: String
  label: String!
  name: String!
  options: [GreenhouseJobBoardJobQuestionAnswerOption!]!
  required: Boolean!
}

type GreenhouseJobBoardJobQuestionForShortText implements GreenhouseJobBoardJobQuestion {
  description: String
  descriptionText: String
  label: String!
  name: String!
  required: Boolean!
}

type GreenhouseJobBoardJobQuestionForSingleSelect implements GreenhouseJobBoardJobQuestion {
  description: String
  descriptionText: String
  label: String!
  name: String!
  options: [GreenhouseJobBoardJobQuestionAnswerOption!]!
  required: Boolean!
}

type GreenhouseJobBoardJobQuestionForYesNo implements GreenhouseJobBoardJobQuestion {
  description: String
  descriptionText: String
  label: String!
  name: String!
  options: [GreenhouseJobBoardJobQuestionAnswerOption!]!
  required: Boolean!
}

input GreenhouseJobBoardJobSortInput {
  fields: [GreenhouseJobBoardJobFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum HeadingLevel {
  H1
  H2
  H3
  H4
  H5
  H6
}

input HeadingLevelQueryOperatorInput {
  eq: HeadingLevel
  in: [HeadingLevel]
  ne: HeadingLevel
  nin: [HeadingLevel]
}

input IDQueryOperatorInput {
  eq: ID
  in: [ID]
  ne: ID
  nin: [ID]
}

enum ImageCropFocus {
  ATTENTION
  CENTER
  EAST
  ENTROPY
  NORTH
  NORTHEAST
  NORTHWEST
  SOUTH
  SOUTHEAST
  SOUTHWEST
  WEST
}

enum ImageFit {
  CONTAIN
  COVER
  FILL
  INSIDE
  OUTSIDE
}

enum ImageFormat {
  AUTO
  AVIF
  JPG
  NO_CHANGE
  PNG
  WEBP
}

enum ImageLayout {
  CONSTRAINED
  FIXED
  FULL_WIDTH
}

enum ImagePlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
  TRACED_SVG
}

type ImageSharp implements Node {
  children: [Node!]!
  fixed(background: String = "rgba(0,0,0,1)", base64Width: Int, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient = {}, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, toFormatBase64: ImageFormat = NO_CHANGE, traceSVG: Potrace = {}, trim: Float = 0, webpQuality: Int, width: Int): ImageSharpFixed
  fluid(
    background: String = "rgba(0,0,0,1)"
    base64Width: Int
    cropFocus: ImageCropFocus = ATTENTION
    duotone: DuotoneGradient = {}
    fit: ImageFit = COVER
    grayscale: Boolean = false
    jpegProgressive: Boolean = true
    jpegQuality: Int
    maxHeight: Int
    maxWidth: Int
    pngCompressionSpeed: Int = 4
    pngQuality: Int
    quality: Int
    rotate: Int = 0
    sizes: String = ""

    # A list of image widths to be generated. Example: [ 200, 340, 520, 890 ]
    srcSetBreakpoints: [Int] = []
    toFormat: ImageFormat = NO_CHANGE
    toFormatBase64: ImageFormat = NO_CHANGE
    traceSVG: Potrace = {}
    trim: Float = 0
    webpQuality: Int
  ): ImageSharpFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Options to pass to sharp when generating AVIF images.
    avifOptions: AVIFOptions

    # Background color applied to the wrapper. Also passed to sharp to use as a background when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Options for the low-resolution placeholder image. Set placeholder to "BLURRED" to use this
    blurredOptions: BlurredOptions

    # Specifies the image widths to generate. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # The image formats to generate. Valid values are "AUTO" (meaning the same format as the source image), "JPG", "PNG", "WEBP" and "AVIF".
    # The default value is [AUTO, WEBP], and you should rarely need to change this. Take care if you specify JPG or PNG when you do
    # not know the formats of the source images, as this could lead to unwanted results such as converting JPEGs to PNGs. Specifying
    # both PNG and JPG is not supported and will be ignored.
    formats: [ImageFormat]

    # The display height of the generated image for layout = FIXED, and the maximum display height of the largest image for layout = CONSTRAINED.
    # The image will be cropped if the aspect ratio does not match the source image. If omitted, it is calculated from the supplied width,
    # matching the aspect ratio of the source image.
    height: Int

    # Options to pass to sharp when generating JPG images.
    jpgOptions: JPGOptions

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: ImageLayout = CONSTRAINED

    # A list of image pixel densities to generate. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for FIXED images, meaning 1x and 2x and [0.25, 0.5, 1, 2] for CONSTRAINED. In this case, an image with a constrained layout
    # and width = 400 would generate images at 100, 200, 400 and 800px wide. Ignored for FULL_WIDTH images, which use breakpoints instead
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # TRACED_SVG: a low-resolution traced SVG of the image.
    # NONE: no placeholder. Set "background" to use a fixed background color.
    placeholder: ImagePlaceholder

    # Options to pass to sharp when generating PNG images.
    pngOptions: PNGOptions

    # The default quality. This is overridden by any format-specific options
    quality: Int

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download.
    # You should usually leave this blank, and a suitable value will be calculated. The exception is if a FULL_WIDTH image
    # does not actually span the full width of the screen, in which case you should pass the correct size here.
    sizes: String

    # Options for traced placeholder SVGs. You also should set placeholder to "TRACED_SVG".
    tracedSVGOptions: Potrace

    # Options to pass to sharp to control cropping and other image manipulations.
    transformOptions: TransformOptions

    # Options to pass to sharp when generating WebP images.
    webpOptions: WebPOptions

    # The display width of the generated image for layout = FIXED, and the maximum display width of the largest image for layout = CONSTRAINED.
    # Ignored if layout = FLUID.
    width: Int
  ): JSON!
  id: ID!
  internal: Internal!
  original: ImageSharpOriginal
  parent: Node
  resize(background: String = "rgba(0,0,0,1)", base64: Boolean = false, cropFocus: ImageCropFocus = ATTENTION, duotone: DuotoneGradient = {}, fit: ImageFit = COVER, grayscale: Boolean = false, height: Int, jpegProgressive: Boolean = true, jpegQuality: Int, pngCompressionLevel: Int = 9, pngCompressionSpeed: Int = 4, pngQuality: Int, quality: Int, rotate: Int = 0, toFormat: ImageFormat = NO_CHANGE, traceSVG: Potrace = {}, trim: Float = 0, webpQuality: Int, width: Int): ImageSharpResize
}

type ImageSharpConnection {
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  edges: [ImageSharpEdge!]!
  group(field: ImageSharpFieldsEnum!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
  max(field: ImageSharpFieldsEnum!): Float
  min(field: ImageSharpFieldsEnum!): Float
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  sum(field: ImageSharpFieldsEnum!): Float
  totalCount: Int!
}

type ImageSharpEdge {
  next: ImageSharp
  node: ImageSharp!
  previous: ImageSharp
}

enum ImageSharpFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  fixed___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalImg @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationHeight @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___presentationWidth @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  fluid___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  original___height
  original___src
  original___width
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  resize___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___originalName @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___tracedSVG @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  resize___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
}

input ImageSharpFilterInput {
  children: NodeFilterListInput
  fixed: ImageSharpFixedFilterInput
  fluid: ImageSharpFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  original: ImageSharpOriginalFilterInput
  parent: NodeFilterInput
  resize: ImageSharpResizeFilterInput
}

input ImageSharpFilterListInput {
  elemMatch: ImageSharpFilterInput
}

type ImageSharpFixed {
  aspectRatio: Float
  base64: String
  height: Float!
  originalName: String
  src: String!
  srcSet: String!
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
  width: Float!
}

input ImageSharpFixedFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  height: FloatQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

type ImageSharpFluid {
  aspectRatio: Float!
  base64: String
  originalImg: String
  originalName: String
  presentationHeight: Int!
  presentationWidth: Int!
  sizes: String!
  src: String!
  srcSet: String!
  srcSetWebp: String
  srcWebp: String
  tracedSVG: String
}

input ImageSharpFluidFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  originalImg: StringQueryOperatorInput
  originalName: StringQueryOperatorInput
  presentationHeight: IntQueryOperatorInput
  presentationWidth: IntQueryOperatorInput
  sizes: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
}

type ImageSharpGroupConnection {
  distinct(field: ImageSharpFieldsEnum!): [String!]!
  edges: [ImageSharpEdge!]!
  field: String!
  fieldValue: String
  group(field: ImageSharpFieldsEnum!, limit: Int, skip: Int): [ImageSharpGroupConnection!]!
  max(field: ImageSharpFieldsEnum!): Float
  min(field: ImageSharpFieldsEnum!): Float
  nodes: [ImageSharp!]!
  pageInfo: PageInfo!
  sum(field: ImageSharpFieldsEnum!): Float
  totalCount: Int!
}

type ImageSharpOriginal {
  height: Float
  src: String
  width: Float
}

input ImageSharpOriginalFilterInput {
  height: FloatQueryOperatorInput
  src: StringQueryOperatorInput
  width: FloatQueryOperatorInput
}

type ImageSharpResize {
  aspectRatio: Float
  height: Int
  originalName: String
  src: String
  tracedSVG: String
  width: Int
}

input ImageSharpResizeFilterInput {
  aspectRatio: FloatQueryOperatorInput
  height: IntQueryOperatorInput
  originalName: StringQueryOperatorInput
  src: StringQueryOperatorInput
  tracedSVG: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

input ImageSharpSortInput {
  fields: [ImageSharpFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type ImgixFixed {
  base64: String!
  height: Int!
  sizes: String!
  src: String!
  srcSet: String!
  srcSetWebp: String!
  srcWebp: String!
  width: Int!
}

input ImgixFixedFilterInput {
  base64: StringQueryOperatorInput
  height: IntQueryOperatorInput
  sizes: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
  width: IntQueryOperatorInput
}

type ImgixFluid {
  aspectRatio: Float!
  base64: String!
  sizes: String!
  src: String!
  srcSet: String!
  srcSetWebp: String!
  srcWebp: String!
}

input ImgixFluidFilterInput {
  aspectRatio: FloatQueryOperatorInput
  base64: StringQueryOperatorInput
  sizes: StringQueryOperatorInput
  src: StringQueryOperatorInput
  srcSet: StringQueryOperatorInput
  srcSetWebp: StringQueryOperatorInput
  srcWebp: StringQueryOperatorInput
}

input ImgixParamsInput {
  # Alias for `pdfAnnotation`.
  annotation: Boolean

  # Specifies an aspect ratio to maintain when resizing and cropping the image. [See docs](https://docs.imgix.com/apis/url/size/ar).
  ar: String

  # Applies automatic enhancements to images. [See docs](https://docs.imgix.com/apis/url/auto).
  auto: String

  # Alias for `blend`.
  b: String

  # Alias for `blendAlign`.
  ba: String

  # Alias for `blendAlpha`.
  balph: Int

  # Alias for `blendCrop`.
  bc: String

  # Alias for `blendFit`.
  bf: String

  # Colors the background of padded and partially-transparent images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/bg).
  bg: String

  # Alias for `blendH`.
  bh: Float

  # Specifies the location of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend).
  blend: String

  # Changes the blend alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/blending/blend-align).
  blendAlign: String

  # Changes the alpha of the blend image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/blending/blend-alpha).
  blendAlpha: Int

  # Alias for `blendColor`.
  blendClr: String

  # Specifies a color to use when applying the blend. [See docs](https://docs.imgix.com/apis/url/blending/blend-color).
  blendColor: String

  # Specifies the type of crop for blend images. [See docs](https://docs.imgix.com/apis/url/blending/blend-crop).
  blendCrop: String

  # Specifies the fit mode for blend images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/blending/blend-fit).
  blendFit: String

  # Adjusts the height of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-h).
  blendH: Float

  # Sets the blend mode for a blend image. Default: `overlay`. [See docs](https://docs.imgix.com/apis/url/blending/blend-mode).
  blendMode: String

  # Applies padding to the blend image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-pad).
  blendPad: Int

  # Adjusts the size of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-size).
  blendSize: String

  # Adjusts the width of the blend image. [See docs](https://docs.imgix.com/apis/url/blending/blend-w).
  blendW: Float

  # Adjusts the x-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-x).
  blendX: Int

  # Adjusts the y-offset of the blend image relative to its parent. Default: `0`. [See docs](https://docs.imgix.com/apis/url/blending/blend-y).
  blendY: Int

  # Alias for `blendAlign`.
  blendalign: String

  # Alias for `blendAlpha`.
  blendalpha: Int

  # Alias for `blendColor`.
  blendclr: String

  # Alias for `blendColor`.
  blendcolor: String

  # Alias for `blendCrop`.
  blendcrop: String

  # Alias for `blendFit`.
  blendfit: String

  # Alias for `blendH`.
  blendh: Float

  # Alias for `blendMode`.
  blendmode: String

  # Alias for `blendPad`.
  blendpad: Int

  # Alias for `blendSize`.
  blendsize: String

  # Alias for `blendW`.
  blendw: Float

  # Alias for `blendX`.
  blendx: Int

  # Alias for `blendY`.
  blendy: Int

  # Applies a gaussian blur to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/blur).
  blur: Int

  # Alias for `blendMode`.
  bm: String

  # Applies a border to an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border).
  border: String

  # Sets bottom border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-bottom).
  borderBottom: Int

  # Sets left border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-left).
  borderLeft: Int

  # Sets the outer radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius).
  borderRadius: String

  # Sets the inner radius of the image's border in pixels. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-radius-inner).
  borderRadiusInner: String

  # Sets right border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-right).
  borderRight: Int

  # Sets top border of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/border-top).
  borderTop: Int

  # Alias for `blendPad`.
  bp: Int

  # Adjusts the brightness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/bri).
  bri: Int

  # Alias for `blendSize`.
  bs: String

  # Alias for `blendW`.
  bw: Float

  # Alias for `blendX`.
  bx: Int

  # Alias for `blendY`.
  by: Int

  # Sets one or more Client-Hints headers. [See docs](https://docs.imgix.com/apis/url/format/ch).
  ch: String

  # Specifies the output chroma subsampling rate. Default: `420`. [See docs](https://docs.imgix.com/apis/url/format/chromasub).
  chromasub: Int

  # Limits the number of unique colors in an image. [See docs](https://docs.imgix.com/apis/url/format/colorquant).
  colorquant: Int

  # Specifies how many colors to include in a palette-extraction response. Default: `6`. [See docs](https://docs.imgix.com/apis/url/color-palette/colors).
  colors: Int

  # Adjusts the contrast of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/con).
  con: Int

  # Specifies the radius value for a rounded corner mask. [See docs](https://docs.imgix.com/apis/url/mask/corner-radius).
  cornerRadius: String

  # Specifies how to crop an image. [See docs](https://docs.imgix.com/apis/url/size/crop).
  crop: String

  # Specifies the color space of the output image. [See docs](https://docs.imgix.com/apis/url/format/cs).
  cs: String

  # Forces a URL to use send-file in its response. [See docs](https://docs.imgix.com/apis/url/format/dl).
  dl: String

  # Sets the DPI value in the EXIF header. [See docs](https://docs.imgix.com/apis/url/format/dpi).
  dpi: Int

  # Adjusts the device-pixel ratio of the output image. Default: `1`. [See docs](https://docs.imgix.com/apis/url/dpr).
  dpr: Float

  # Applies a duotone effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/duotone).
  duotone: String

  # Changes the alpha of the duotone effect atop the source image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/stylize/duotone-alpha).
  duotoneAlpha: Int

  # Adjusts the exposure of the output image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/exp).
  exp: Int

  # A Unix timestamp specifying a UTC time. Requests made to this URL after that time will output a 404 status code. [See docs](https://docs.imgix.com/apis/url/expires).
  expires: String

  # Alias for `fit`.
  f: String

  # Selects a face to crop to. [See docs](https://docs.imgix.com/apis/url/face-detection/faceindex).
  faceindex: Int

  # Adjusts padding around a selected face. Default: `1`. [See docs](https://docs.imgix.com/apis/url/face-detection/facepad).
  facepad: Float

  # Specifies that face data should be included in output when combined with `fm=json`. [See docs](https://docs.imgix.com/apis/url/face-detection/faces).
  faces: Int

  # Determines how to fill in additional space created by the fit setting. [See docs](https://docs.imgix.com/apis/url/fill/fill).
  fill: String

  # Sets the fill color for images with additional space created by the fit setting. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/fill/fill-color).
  fillColor: String

  # Alias for `fillColor`.
  fillcolor: String

  # Specifies how to map the source image to the output image dimensions. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/size/fit).
  fit: String

  # Flips an image on a specified axis. [See docs](https://docs.imgix.com/apis/url/rotation/flip).
  flip: String

  # Changes the format of the output image. [See docs](https://docs.imgix.com/apis/url/format/fm).
  fm: String

  # Displays crosshairs identifying the location of the set focal point. Default: `false`. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-debug).
  fpDebug: Boolean

  # Sets the relative horizontal value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-x).
  fpX: Float

  # Sets the relative vertical value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-y).
  fpY: Float

  # Sets the relative zoom value for the focal point of an image. [See docs](https://docs.imgix.com/apis/url/focalpoint-crop/fp-z).
  fpZ: Float

  # Adjusts the gamma of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/gam).
  gam: Int

  # Sets grid colors for the transparency checkerboard grid.
  gridColors: String

  # Sets grid size for the transparency checkerboard grid.
  gridSize: Int

  # Adjusts the height of the output image. [See docs](https://docs.imgix.com/apis/url/size/h).
  h: Float

  # Alias for `h`.
  height: Float

  # Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/high).
  high: Int

  # Applies a half-tone effect to the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/htn).
  htn: Int

  # Adjusts the hue of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/hue).
  hue: Int

  # Alias for `invert`.
  inv: Boolean

  # Inverts the colors on the source image. Default: `false`. [See docs](https://docs.imgix.com/apis/url/adjustment/invert).
  invert: Boolean

  # Determine if IPTC data should be passed for JPEG images.
  iptc: String

  # Specifies that the output image should be a lossless variant. Default: `false`. [See docs](https://docs.imgix.com/apis/url/format/lossless).
  lossless: Boolean

  # Alias for `mark`.
  m: String

  # Alias for `markAlign`.
  ma: String

  # Alias for `markAlpha`.
  malph: Int

  # Specifies the location of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark).
  mark: String

  # Changes the watermark alignment relative to the parent image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-align).
  markAlign: String

  # Changes the alpha of the watermark image. Default: `100`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-alpha).
  markAlpha: Int

  # Changes base URL of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-base).
  markBase: String

  # Specifies the fit mode for watermark images. Default: `clip`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-fit).
  markFit: String

  # Adjusts the height of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-h).
  markH: Float

  # Applies padding to the watermark image. Default: `5`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-pad).
  markPad: Int

  # Rotates a watermark or tiled watermarks by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/watermark/mark-rot).
  markRot: Float

  # Adjusts the scale of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-scale).
  markScale: Int

  # Adds tiled watermark. [See docs](https://docs.imgix.com/apis/url/watermark/mark-tile).
  markTile: String

  # Adjusts the width of the watermark image. [See docs](https://docs.imgix.com/apis/url/watermark/mark-w).
  markW: Float

  # Adjusts the x-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-x).
  markX: Int

  # Adjusts the y-offset of the watermark image relative to its parent. [See docs](https://docs.imgix.com/apis/url/watermark/mark-y).
  markY: Int

  # Alias for `markAlign`.
  markalign: String

  # Alias for `markAlpha`.
  markalpha: Int

  # Alias for `markBase`.
  markbase: String

  # Alias for `markFit`.
  markfit: String

  # Alias for `markH`.
  markh: Float

  # Alias for `markPad`.
  markpad: Int

  # Alias for `markScale`.
  markscale: Int

  # Alias for `markTile`.
  marktile: String

  # Alias for `markW`.
  markw: Float

  # Alias for `markX`.
  markx: Int

  # Alias for `markY`.
  marky: Int

  # Defines the type of mask and specifies the URL if that type is selected. [See docs](https://docs.imgix.com/apis/url/mask).
  mask: String

  # Colors the background of the transparent mask area of images. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/mask/mask-bg).
  maskBg: String

  # Alias for `maskBg`.
  maskbg: String

  # Specifies the maximum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-height).
  maxH: Int

  # Alias for `maxH`.
  maxHeight: Int

  # Specifies the maximum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/max-width).
  maxW: Int

  # Alias for `maxW`.
  maxWidth: Int

  # Alias for `markBase`.
  mb: String

  # Alias for `markFit`.
  mf: String

  # Alias for `markH`.
  mh: Float

  # Specifies the minimum height of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-height).
  minH: Int

  # Alias for `minH`.
  minHeight: Int

  # Specifies the minimum width of the output image in pixels. [See docs](https://docs.imgix.com/apis/url/size/min-width).
  minW: Int

  # Alias for `minW`.
  minWidth: Int

  # Alias for `monochrome`.
  mono: String

  # Applies a monochrome effect to the source image. [See docs](https://docs.imgix.com/apis/url/stylize/monochrome).
  monochrome: String

  # Alias for `markPad`.
  mp: Int

  # Alias for `markScale`.
  ms: Int

  # Alias for `markTile`.
  mtile: String

  # Alias for `markW`.
  mw: Float

  # Alias for `markX`.
  mx: Int

  # Alias for `markY`.
  my: Int

  # Reduces the noise in an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nr).
  nr: Int

  # Provides a threshold by which to sharpen an image. Default: `20`. [See docs](https://docs.imgix.com/apis/url/noise-reduction/nrs).
  nrs: Int

  # Alias for `orient`.
  or: Int

  # Changes the image orientation. [See docs](https://docs.imgix.com/apis/url/rotation/orient).
  orient: Int

  # Pads an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad).
  pad: Int

  # Sets bottom padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-bottom).
  padBottom: Int

  # Sets left padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-left).
  padLeft: Int

  # Sets right padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-right).
  padRight: Int

  # Sets top padding of an image. [See docs](https://docs.imgix.com/apis/url/border-and-padding/pad-top).
  padTop: Int

  # Selects a page from a PDF for display. Default: `1`. [See docs](https://docs.imgix.com/apis/url/pdf/page).
  page: Int

  # Specifies an output format for palette-extraction. [See docs](https://docs.imgix.com/apis/url/color-palette/palette).
  palette: String

  # Enables or disables PDF annotation. Default: `true`. [See docs](https://docs.imgix.com/apis/url/pdf/pdf-annotation).
  pdfAnnotation: Boolean

  # Specifies a CSS prefix for all classes in palette-extraction. Default: `image`. [See docs](https://docs.imgix.com/apis/url/color-palette/prefix).
  prefix: String

  # Applies a pixelation effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/px).
  px: Int

  # Adjusts the quality of an output image. Default: `75`. [See docs](https://docs.imgix.com/apis/url/format/q).
  q: Int

  # Crops an image to a specified rectangle. [See docs](https://docs.imgix.com/apis/url/size/rect).
  rect: String

  # Rotates an image by a specified number of degrees. Default: `0`. [See docs](https://docs.imgix.com/apis/url/rotation/rot).
  rot: Float

  # Adjusts the saturation of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sat).
  sat: Int

  # Applies a sepia effect to an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/stylize/sepia).
  sepia: Int

  # Adjusts the highlights of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/shad).
  shad: Float

  # Adjusts the sharpness of the source image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/sharp).
  sharp: Float

  # Alias for `txt`.
  t: String

  # Alias for `txtAlign`.
  ta: String

  # Alias for `txtColor`.
  tc: String

  # Alias for `txtClip`.
  tcl: String

  # Alias for `txtFont`.
  tf: String

  # Alias for `txtLine`.
  tl: Int

  # Alias for `txtPad`.
  tp: Int

  # Adds checkerboard behind images which support transparency. [See docs](https://docs.imgix.com/apis/url/fill/transparency).
  transparency: String

  # Trims the source image. [See docs](https://docs.imgix.com/apis/url/trim/trim).
  trim: String

  # Specifies a trim color on a trim operation. [See docs](https://docs.imgix.com/apis/url/trim/trim-color).
  trimColor: String

  # Specifies the mean difference on a trim operation. Default: `11`. [See docs](https://docs.imgix.com/apis/url/trim/trim-md).
  trimMd: Float

  # Pads the area of the source image before trimming. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-pad).
  trimPad: Int

  # Specifies the standard deviation on a trim operation. Default: `10`. [See docs](https://docs.imgix.com/apis/url/trim/trim-sd).
  trimSd: Float

  # Specifies the tolerance on a trim operation. Default: `0`. [See docs](https://docs.imgix.com/apis/url/trim/trim-tol).
  trimTol: Float

  # Alias for `trimColor`.
  trimcolor: String

  # Alias for `trimMd`.
  trimmd: Float

  # Alias for `trimPad`.
  trimpad: Int

  # Alias for `trimSd`.
  trimsd: Float

  # Alias for `trimTol`.
  trimtol: Float

  # Alias for `txtShad`.
  tsh: Float

  # Alias for `txtSize`.
  tsz: Int

  # Alias for `txtTrack`.
  tt: Int

  # Sets the text string to render. [See docs](https://docs.imgix.com/apis/url/text/txt).
  txt: String

  # Sets the vertical and horizontal alignment of rendered text relative to the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-align).
  txtAlign: String

  # Sets the clipping properties of rendered text. Default: `end`. [See docs](https://docs.imgix.com/apis/url/text/txt-clip).
  txtClip: String

  # Alias for `txtColor`.
  txtClr: String

  # Specifies the color of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-color).
  txtColor: String

  # Specifies the fit approach for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-fit).
  txtFit: String

  # Selects a font for rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-font).
  txtFont: String

  # Sets the leading (line spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-lead).
  txtLead: Int

  # Controls the level of ligature substitution. [See docs](https://docs.imgix.com/apis/url/text/txt-lig).
  txtLig: Int

  # Outlines the rendered text with a specified color. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-line).
  txtLine: Int

  # Alias for `txtLineColor`.
  txtLineClr: String

  # Specifies a text outline color. Default: `fff`. [See docs](https://docs.imgix.com/apis/url/text/txt-line-color).
  txtLineColor: String

  # Specifies the padding (in device-independent pixels) between a textbox and the edges of the base image. [See docs](https://docs.imgix.com/apis/url/text/txt-pad).
  txtPad: Int

  # Applies a shadow to rendered text. Default: `0`. [See docs](https://docs.imgix.com/apis/url/text/txt-shad).
  txtShad: Float

  # Sets the font size of rendered text. Default: `12`. [See docs](https://docs.imgix.com/apis/url/text/txt-size).
  txtSize: Int

  # Sets the tracking (letter spacing) for rendered text. Only works on the multi-line text endpoint. Default: `0`. [See docs](https://docs.imgix.com/apis/url/typesetting/txt-track).
  txtTrack: Int

  # Sets the width of rendered text. [See docs](https://docs.imgix.com/apis/url/text/txt-width).
  txtWidth: Int

  # Alias for `txtAlign`.
  txtalign: String

  # Alias for `txtClip`.
  txtclip: String

  # Alias for `txtColor`.
  txtclr: String

  # Alias for `txtColor`.
  txtcolor: String

  # Alias for `txtFit`.
  txtfit: String

  # Alias for `txtFont`.
  txtfont: String

  # Alias for `txtLead`.
  txtlead: Int

  # Alias for `txtLig`.
  txtlig: Int

  # Alias for `txtLine`.
  txtline: Int

  # Alias for `txtLineColor`.
  txtlineclr: String

  # Alias for `txtLineColor`.
  txtlinecolor: String

  # Alias for `txtPad`.
  txtpad: Int

  # Alias for `txtShad`.
  txtshad: Float

  # Alias for `txtSize`.
  txtsize: Int

  # Alias for `txtTrack`.
  txttrack: Int

  # Alias for `txtWidth`.
  txtwidth: Int

  # Sharpens the source image using an unsharp mask. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/usm).
  usm: Int

  # Specifies the radius for an unsharp mask operation. Default: `2.5`. [See docs](https://docs.imgix.com/apis/url/adjustment/usmrad).
  usmrad: Float

  # Adjusts the vibrance of an image. Default: `0`. [See docs](https://docs.imgix.com/apis/url/adjustment/vib).
  vib: Int

  # Adjusts the width of the output image. [See docs](https://docs.imgix.com/apis/url/size/w).
  w: Float

  # Alias for `w`.
  width: Float
}

enum ImgixPlaceholder {
  BLURRED
  DOMINANT_COLOR
  NONE
}

input IntQueryOperatorInput {
  eq: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  nin: [Int]
}

type Internal {
  content: String
  contentDigest: String!
  description: String
  fieldOwners: [String]
  ignoreType: Boolean
  mediaType: String
  owner: String!
  type: String!
}

input InternalFilterInput {
  content: StringQueryOperatorInput
  contentDigest: StringQueryOperatorInput
  description: StringQueryOperatorInput
  fieldOwners: StringQueryOperatorInput
  ignoreType: BooleanQueryOperatorInput
  mediaType: StringQueryOperatorInput
  owner: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

input JPGOptions {
  progressive: Boolean = true
  quality: Int
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONQueryOperatorInput {
  eq: JSON
  glob: JSON
  in: [JSON]
  ne: JSON
  nin: [JSON]
  regex: JSON
}

enum JobCorporate {
  KARROT_MARKET
  KARROT_PAY
}

input JobCorporateQueryOperatorInput {
  eq: JobCorporate
  in: [JobCorporate]
  ne: JobCorporate
  nin: [JobCorporate]
}

type JobDepartment implements Node {
  children: [Node!]!
  ghId: String!
  id: ID!
  internal: Internal!
  jobPosts: [JobPost!]!
  name: String!
  parent: Node
  slug: String
}

type JobDepartmentConnection {
  distinct(field: JobDepartmentFieldsEnum!): [String!]!
  edges: [JobDepartmentEdge!]!
  group(field: JobDepartmentFieldsEnum!, limit: Int, skip: Int): [JobDepartmentGroupConnection!]!
  max(field: JobDepartmentFieldsEnum!): Float
  min(field: JobDepartmentFieldsEnum!): Float
  nodes: [JobDepartment!]!
  pageInfo: PageInfo!
  sum(field: JobDepartmentFieldsEnum!): Float
  totalCount: Int!
}

type JobDepartmentEdge {
  next: JobDepartment
  node: JobDepartment!
  previous: JobDepartment
}

enum JobDepartmentFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  ghId
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  jobPosts
  jobPosts___absoluteUrl
  jobPosts___alternativeCivilianService
  jobPosts___boardToken
  jobPosts___boardUrl
  jobPosts___chapter
  jobPosts___children
  jobPosts___children___children
  jobPosts___children___children___children
  jobPosts___children___children___id
  jobPosts___children___id
  jobPosts___children___internal___content
  jobPosts___children___internal___contentDigest
  jobPosts___children___internal___description
  jobPosts___children___internal___fieldOwners
  jobPosts___children___internal___ignoreType
  jobPosts___children___internal___mediaType
  jobPosts___children___internal___owner
  jobPosts___children___internal___type
  jobPosts___children___parent___children
  jobPosts___children___parent___id
  jobPosts___content
  jobPosts___content___bodyHtml
  jobPosts___content___level
  jobPosts___content___title
  jobPosts___corporate
  jobPosts___departments
  jobPosts___departments___children
  jobPosts___departments___children___children
  jobPosts___departments___children___id
  jobPosts___departments___ghId
  jobPosts___departments___id
  jobPosts___departments___internal___content
  jobPosts___departments___internal___contentDigest
  jobPosts___departments___internal___description
  jobPosts___departments___internal___fieldOwners
  jobPosts___departments___internal___ignoreType
  jobPosts___departments___internal___mediaType
  jobPosts___departments___internal___owner
  jobPosts___departments___internal___type
  jobPosts___departments___jobPosts
  jobPosts___departments___jobPosts___absoluteUrl
  jobPosts___departments___jobPosts___alternativeCivilianService
  jobPosts___departments___jobPosts___boardToken
  jobPosts___departments___jobPosts___boardUrl
  jobPosts___departments___jobPosts___chapter
  jobPosts___departments___jobPosts___children
  jobPosts___departments___jobPosts___content
  jobPosts___departments___jobPosts___corporate
  jobPosts___departments___jobPosts___departments
  jobPosts___departments___jobPosts___employmentType
  jobPosts___departments___jobPosts___externalUrl
  jobPosts___departments___jobPosts___ghId
  jobPosts___departments___jobPosts___id
  jobPosts___departments___jobPosts___keywords
  jobPosts___departments___jobPosts___order
  jobPosts___departments___jobPosts___priorExperience
  jobPosts___departments___jobPosts___rawContent
  jobPosts___departments___jobPosts___tags
  jobPosts___departments___jobPosts___title
  jobPosts___departments___jobPosts___updatedAt
  jobPosts___departments___jobPosts___validThrough
  jobPosts___departments___name
  jobPosts___departments___parent___children
  jobPosts___departments___parent___id
  jobPosts___departments___slug
  jobPosts___employmentType
  jobPosts___externalUrl
  jobPosts___ghId
  jobPosts___id
  jobPosts___internal___content
  jobPosts___internal___contentDigest
  jobPosts___internal___description
  jobPosts___internal___fieldOwners
  jobPosts___internal___ignoreType
  jobPosts___internal___mediaType
  jobPosts___internal___owner
  jobPosts___internal___type
  jobPosts___keywords
  jobPosts___order
  jobPosts___parentJob___boardToken
  jobPosts___parentJob___boardUrl
  jobPosts___parentJob___childJobDepartment___children
  jobPosts___parentJob___childJobDepartment___ghId
  jobPosts___parentJob___childJobDepartment___id
  jobPosts___parentJob___childJobDepartment___jobPosts
  jobPosts___parentJob___childJobDepartment___name
  jobPosts___parentJob___childJobDepartment___slug
  jobPosts___parentJob___childJobPost___absoluteUrl
  jobPosts___parentJob___childJobPost___alternativeCivilianService
  jobPosts___parentJob___childJobPost___boardToken
  jobPosts___parentJob___childJobPost___boardUrl
  jobPosts___parentJob___childJobPost___chapter
  jobPosts___parentJob___childJobPost___children
  jobPosts___parentJob___childJobPost___content
  jobPosts___parentJob___childJobPost___corporate
  jobPosts___parentJob___childJobPost___departments
  jobPosts___parentJob___childJobPost___employmentType
  jobPosts___parentJob___childJobPost___externalUrl
  jobPosts___parentJob___childJobPost___ghId
  jobPosts___parentJob___childJobPost___id
  jobPosts___parentJob___childJobPost___keywords
  jobPosts___parentJob___childJobPost___order
  jobPosts___parentJob___childJobPost___priorExperience
  jobPosts___parentJob___childJobPost___rawContent
  jobPosts___parentJob___childJobPost___tags
  jobPosts___parentJob___childJobPost___title
  jobPosts___parentJob___childJobPost___updatedAt
  jobPosts___parentJob___childJobPost___validThrough
  jobPosts___parentJob___children
  jobPosts___parentJob___childrenJobDepartment
  jobPosts___parentJob___childrenJobDepartment___children
  jobPosts___parentJob___childrenJobDepartment___ghId
  jobPosts___parentJob___childrenJobDepartment___id
  jobPosts___parentJob___childrenJobDepartment___jobPosts
  jobPosts___parentJob___childrenJobDepartment___name
  jobPosts___parentJob___childrenJobDepartment___slug
  jobPosts___parentJob___childrenJobPost
  jobPosts___parentJob___childrenJobPost___absoluteUrl
  jobPosts___parentJob___childrenJobPost___alternativeCivilianService
  jobPosts___parentJob___childrenJobPost___boardToken
  jobPosts___parentJob___childrenJobPost___boardUrl
  jobPosts___parentJob___childrenJobPost___chapter
  jobPosts___parentJob___childrenJobPost___children
  jobPosts___parentJob___childrenJobPost___content
  jobPosts___parentJob___childrenJobPost___corporate
  jobPosts___parentJob___childrenJobPost___departments
  jobPosts___parentJob___childrenJobPost___employmentType
  jobPosts___parentJob___childrenJobPost___externalUrl
  jobPosts___parentJob___childrenJobPost___ghId
  jobPosts___parentJob___childrenJobPost___id
  jobPosts___parentJob___childrenJobPost___keywords
  jobPosts___parentJob___childrenJobPost___order
  jobPosts___parentJob___childrenJobPost___priorExperience
  jobPosts___parentJob___childrenJobPost___rawContent
  jobPosts___parentJob___childrenJobPost___tags
  jobPosts___parentJob___childrenJobPost___title
  jobPosts___parentJob___childrenJobPost___updatedAt
  jobPosts___parentJob___childrenJobPost___validThrough
  jobPosts___parentJob___children___children
  jobPosts___parentJob___children___id
  jobPosts___parentJob___content
  jobPosts___parentJob___departments
  jobPosts___parentJob___departments___childDepartments
  jobPosts___parentJob___departments___children
  jobPosts___parentJob___departments___ghId
  jobPosts___parentJob___departments___id
  jobPosts___parentJob___departments___jobs
  jobPosts___parentJob___departments___name
  jobPosts___parentJob___ghId
  jobPosts___parentJob___id
  jobPosts___parentJob___internal___content
  jobPosts___parentJob___internal___contentDigest
  jobPosts___parentJob___internal___description
  jobPosts___parentJob___internal___fieldOwners
  jobPosts___parentJob___internal___ignoreType
  jobPosts___parentJob___internal___mediaType
  jobPosts___parentJob___internal___owner
  jobPosts___parentJob___internal___type
  jobPosts___parentJob___locationQuestions
  jobPosts___parentJob___locationQuestions___description
  jobPosts___parentJob___locationQuestions___descriptionText
  jobPosts___parentJob___locationQuestions___label
  jobPosts___parentJob___locationQuestions___name
  jobPosts___parentJob___locationQuestions___required
  jobPosts___parentJob___metadata
  jobPosts___parentJob___metadata___id
  jobPosts___parentJob___metadata___name
  jobPosts___parentJob___metadata___type
  jobPosts___parentJob___metadata___value
  jobPosts___parentJob___parent___children
  jobPosts___parentJob___parent___id
  jobPosts___parentJob___questions
  jobPosts___parentJob___questions___description
  jobPosts___parentJob___questions___descriptionText
  jobPosts___parentJob___questions___label
  jobPosts___parentJob___questions___name
  jobPosts___parentJob___questions___required
  jobPosts___parentJob___title
  jobPosts___parentJob___updatedAt
  jobPosts___parent___children
  jobPosts___parent___children___children
  jobPosts___parent___children___id
  jobPosts___parent___id
  jobPosts___parent___internal___content
  jobPosts___parent___internal___contentDigest
  jobPosts___parent___internal___description
  jobPosts___parent___internal___fieldOwners
  jobPosts___parent___internal___ignoreType
  jobPosts___parent___internal___mediaType
  jobPosts___parent___internal___owner
  jobPosts___parent___internal___type
  jobPosts___parent___parent___children
  jobPosts___parent___parent___id
  jobPosts___priorExperience
  jobPosts___rawContent
  jobPosts___tags
  jobPosts___title
  jobPosts___updatedAt
  jobPosts___validThrough
  name
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  slug
}

input JobDepartmentFilterInput {
  children: NodeFilterListInput
  ghId: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  jobPosts: JobPostFilterListInput
  name: StringQueryOperatorInput
  parent: NodeFilterInput
  slug: StringQueryOperatorInput
}

input JobDepartmentFilterListInput {
  elemMatch: JobDepartmentFilterInput
}

type JobDepartmentGroupConnection {
  distinct(field: JobDepartmentFieldsEnum!): [String!]!
  edges: [JobDepartmentEdge!]!
  field: String!
  fieldValue: String
  group(field: JobDepartmentFieldsEnum!, limit: Int, skip: Int): [JobDepartmentGroupConnection!]!
  max(field: JobDepartmentFieldsEnum!): Float
  min(field: JobDepartmentFieldsEnum!): Float
  nodes: [JobDepartment!]!
  pageInfo: PageInfo!
  sum(field: JobDepartmentFieldsEnum!): Float
  totalCount: Int!
}

input JobDepartmentSortInput {
  fields: [JobDepartmentFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum JobEmploymentType {
  ASSISTANT
  CONTRACTOR
  FULL_TIME
  INTERN
}

input JobEmploymentTypeQueryOperatorInput {
  eq: JobEmploymentType
  in: [JobEmploymentType]
  ne: JobEmploymentType
  nin: [JobEmploymentType]
}

type JobPost implements Node {
  absoluteUrl: String!

  # 산업기능요원 근무 가능합니까?
  alternativeCivilianService: Boolean!
  boardToken: String!
  boardUrl: String!

  # 소속 챕터 (=직무)
  chapter: String! @deprecated(reason: "departments로 대체됨")
  children: [Node!]!

  # Parsed content
  content: [JobPostContentSection!]!

  # 회사 (당근마켓, 당근페이)
  corporate: JobCorporate

  # 소속
  departments: [JobDepartment!]!

  # 고용 형태
  employmentType: JobEmploymentType!

  # 외부 링크 (공고가 바깥에서 열리는 경우.. 좀 컨텐츠 많으면 노션 링크 선호되는 경우 있음)
  externalUrl: String
  ghId: String!
  id: ID!
  internal: Internal!

  # 검색 키워드
  keywords: [String!]!

  # 정렬 선호 순위 값 (signed, 기본값: 0)
  order: Int!
  parent: Node
  parentJob: GreenhouseJobBoardJob!

  # 경력? 신입?
  priorExperience: JobPriorExperience!

  # HTML content (unsafe)
  rawContent: String!

  # 목록에서 표시할 태그
  tags: [String!]!
  title: String!
  updatedAt(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!

  # 공고 유효기간
  validThrough(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
}

type JobPostConnection {
  distinct(field: JobPostFieldsEnum!): [String!]!
  edges: [JobPostEdge!]!
  group(field: JobPostFieldsEnum!, limit: Int, skip: Int): [JobPostGroupConnection!]!
  max(field: JobPostFieldsEnum!): Float
  min(field: JobPostFieldsEnum!): Float
  nodes: [JobPost!]!
  pageInfo: PageInfo!
  sum(field: JobPostFieldsEnum!): Float
  totalCount: Int!
}

type JobPostContentSection {
  bodyHtml: String!
  level: HeadingLevel!
  title: String!
}

input JobPostContentSectionFilterInput {
  bodyHtml: StringQueryOperatorInput
  level: HeadingLevelQueryOperatorInput
  title: StringQueryOperatorInput
}

input JobPostContentSectionFilterListInput {
  elemMatch: JobPostContentSectionFilterInput
}

type JobPostEdge {
  next: JobPost
  node: JobPost!
  previous: JobPost
}

enum JobPostFieldsEnum {
  absoluteUrl
  alternativeCivilianService
  boardToken
  boardUrl
  chapter
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  content
  content___bodyHtml
  content___level
  content___title
  corporate
  departments
  departments___children
  departments___children___children
  departments___children___children___children
  departments___children___children___id
  departments___children___id
  departments___children___internal___content
  departments___children___internal___contentDigest
  departments___children___internal___description
  departments___children___internal___fieldOwners
  departments___children___internal___ignoreType
  departments___children___internal___mediaType
  departments___children___internal___owner
  departments___children___internal___type
  departments___children___parent___children
  departments___children___parent___id
  departments___ghId
  departments___id
  departments___internal___content
  departments___internal___contentDigest
  departments___internal___description
  departments___internal___fieldOwners
  departments___internal___ignoreType
  departments___internal___mediaType
  departments___internal___owner
  departments___internal___type
  departments___jobPosts
  departments___jobPosts___absoluteUrl
  departments___jobPosts___alternativeCivilianService
  departments___jobPosts___boardToken
  departments___jobPosts___boardUrl
  departments___jobPosts___chapter
  departments___jobPosts___children
  departments___jobPosts___children___children
  departments___jobPosts___children___id
  departments___jobPosts___content
  departments___jobPosts___content___bodyHtml
  departments___jobPosts___content___level
  departments___jobPosts___content___title
  departments___jobPosts___corporate
  departments___jobPosts___departments
  departments___jobPosts___departments___children
  departments___jobPosts___departments___ghId
  departments___jobPosts___departments___id
  departments___jobPosts___departments___jobPosts
  departments___jobPosts___departments___name
  departments___jobPosts___departments___slug
  departments___jobPosts___employmentType
  departments___jobPosts___externalUrl
  departments___jobPosts___ghId
  departments___jobPosts___id
  departments___jobPosts___internal___content
  departments___jobPosts___internal___contentDigest
  departments___jobPosts___internal___description
  departments___jobPosts___internal___fieldOwners
  departments___jobPosts___internal___ignoreType
  departments___jobPosts___internal___mediaType
  departments___jobPosts___internal___owner
  departments___jobPosts___internal___type
  departments___jobPosts___keywords
  departments___jobPosts___order
  departments___jobPosts___parentJob___boardToken
  departments___jobPosts___parentJob___boardUrl
  departments___jobPosts___parentJob___children
  departments___jobPosts___parentJob___childrenJobDepartment
  departments___jobPosts___parentJob___childrenJobPost
  departments___jobPosts___parentJob___content
  departments___jobPosts___parentJob___departments
  departments___jobPosts___parentJob___ghId
  departments___jobPosts___parentJob___id
  departments___jobPosts___parentJob___locationQuestions
  departments___jobPosts___parentJob___metadata
  departments___jobPosts___parentJob___questions
  departments___jobPosts___parentJob___title
  departments___jobPosts___parentJob___updatedAt
  departments___jobPosts___parent___children
  departments___jobPosts___parent___id
  departments___jobPosts___priorExperience
  departments___jobPosts___rawContent
  departments___jobPosts___tags
  departments___jobPosts___title
  departments___jobPosts___updatedAt
  departments___jobPosts___validThrough
  departments___name
  departments___parent___children
  departments___parent___children___children
  departments___parent___children___id
  departments___parent___id
  departments___parent___internal___content
  departments___parent___internal___contentDigest
  departments___parent___internal___description
  departments___parent___internal___fieldOwners
  departments___parent___internal___ignoreType
  departments___parent___internal___mediaType
  departments___parent___internal___owner
  departments___parent___internal___type
  departments___parent___parent___children
  departments___parent___parent___id
  departments___slug
  employmentType
  externalUrl
  ghId
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  keywords
  order
  parentJob___boardToken
  parentJob___boardUrl
  parentJob___childJobDepartment___children
  parentJob___childJobDepartment___children___children
  parentJob___childJobDepartment___children___id
  parentJob___childJobDepartment___ghId
  parentJob___childJobDepartment___id
  parentJob___childJobDepartment___internal___content
  parentJob___childJobDepartment___internal___contentDigest
  parentJob___childJobDepartment___internal___description
  parentJob___childJobDepartment___internal___fieldOwners
  parentJob___childJobDepartment___internal___ignoreType
  parentJob___childJobDepartment___internal___mediaType
  parentJob___childJobDepartment___internal___owner
  parentJob___childJobDepartment___internal___type
  parentJob___childJobDepartment___jobPosts
  parentJob___childJobDepartment___jobPosts___absoluteUrl
  parentJob___childJobDepartment___jobPosts___alternativeCivilianService
  parentJob___childJobDepartment___jobPosts___boardToken
  parentJob___childJobDepartment___jobPosts___boardUrl
  parentJob___childJobDepartment___jobPosts___chapter
  parentJob___childJobDepartment___jobPosts___children
  parentJob___childJobDepartment___jobPosts___content
  parentJob___childJobDepartment___jobPosts___corporate
  parentJob___childJobDepartment___jobPosts___departments
  parentJob___childJobDepartment___jobPosts___employmentType
  parentJob___childJobDepartment___jobPosts___externalUrl
  parentJob___childJobDepartment___jobPosts___ghId
  parentJob___childJobDepartment___jobPosts___id
  parentJob___childJobDepartment___jobPosts___keywords
  parentJob___childJobDepartment___jobPosts___order
  parentJob___childJobDepartment___jobPosts___priorExperience
  parentJob___childJobDepartment___jobPosts___rawContent
  parentJob___childJobDepartment___jobPosts___tags
  parentJob___childJobDepartment___jobPosts___title
  parentJob___childJobDepartment___jobPosts___updatedAt
  parentJob___childJobDepartment___jobPosts___validThrough
  parentJob___childJobDepartment___name
  parentJob___childJobDepartment___parent___children
  parentJob___childJobDepartment___parent___id
  parentJob___childJobDepartment___slug
  parentJob___childJobPost___absoluteUrl
  parentJob___childJobPost___alternativeCivilianService
  parentJob___childJobPost___boardToken
  parentJob___childJobPost___boardUrl
  parentJob___childJobPost___chapter
  parentJob___childJobPost___children
  parentJob___childJobPost___children___children
  parentJob___childJobPost___children___id
  parentJob___childJobPost___content
  parentJob___childJobPost___content___bodyHtml
  parentJob___childJobPost___content___level
  parentJob___childJobPost___content___title
  parentJob___childJobPost___corporate
  parentJob___childJobPost___departments
  parentJob___childJobPost___departments___children
  parentJob___childJobPost___departments___ghId
  parentJob___childJobPost___departments___id
  parentJob___childJobPost___departments___jobPosts
  parentJob___childJobPost___departments___name
  parentJob___childJobPost___departments___slug
  parentJob___childJobPost___employmentType
  parentJob___childJobPost___externalUrl
  parentJob___childJobPost___ghId
  parentJob___childJobPost___id
  parentJob___childJobPost___internal___content
  parentJob___childJobPost___internal___contentDigest
  parentJob___childJobPost___internal___description
  parentJob___childJobPost___internal___fieldOwners
  parentJob___childJobPost___internal___ignoreType
  parentJob___childJobPost___internal___mediaType
  parentJob___childJobPost___internal___owner
  parentJob___childJobPost___internal___type
  parentJob___childJobPost___keywords
  parentJob___childJobPost___order
  parentJob___childJobPost___parentJob___boardToken
  parentJob___childJobPost___parentJob___boardUrl
  parentJob___childJobPost___parentJob___children
  parentJob___childJobPost___parentJob___childrenJobDepartment
  parentJob___childJobPost___parentJob___childrenJobPost
  parentJob___childJobPost___parentJob___content
  parentJob___childJobPost___parentJob___departments
  parentJob___childJobPost___parentJob___ghId
  parentJob___childJobPost___parentJob___id
  parentJob___childJobPost___parentJob___locationQuestions
  parentJob___childJobPost___parentJob___metadata
  parentJob___childJobPost___parentJob___questions
  parentJob___childJobPost___parentJob___title
  parentJob___childJobPost___parentJob___updatedAt
  parentJob___childJobPost___parent___children
  parentJob___childJobPost___parent___id
  parentJob___childJobPost___priorExperience
  parentJob___childJobPost___rawContent
  parentJob___childJobPost___tags
  parentJob___childJobPost___title
  parentJob___childJobPost___updatedAt
  parentJob___childJobPost___validThrough
  parentJob___children
  parentJob___childrenJobDepartment
  parentJob___childrenJobDepartment___children
  parentJob___childrenJobDepartment___children___children
  parentJob___childrenJobDepartment___children___id
  parentJob___childrenJobDepartment___ghId
  parentJob___childrenJobDepartment___id
  parentJob___childrenJobDepartment___internal___content
  parentJob___childrenJobDepartment___internal___contentDigest
  parentJob___childrenJobDepartment___internal___description
  parentJob___childrenJobDepartment___internal___fieldOwners
  parentJob___childrenJobDepartment___internal___ignoreType
  parentJob___childrenJobDepartment___internal___mediaType
  parentJob___childrenJobDepartment___internal___owner
  parentJob___childrenJobDepartment___internal___type
  parentJob___childrenJobDepartment___jobPosts
  parentJob___childrenJobDepartment___jobPosts___absoluteUrl
  parentJob___childrenJobDepartment___jobPosts___alternativeCivilianService
  parentJob___childrenJobDepartment___jobPosts___boardToken
  parentJob___childrenJobDepartment___jobPosts___boardUrl
  parentJob___childrenJobDepartment___jobPosts___chapter
  parentJob___childrenJobDepartment___jobPosts___children
  parentJob___childrenJobDepartment___jobPosts___content
  parentJob___childrenJobDepartment___jobPosts___corporate
  parentJob___childrenJobDepartment___jobPosts___departments
  parentJob___childrenJobDepartment___jobPosts___employmentType
  parentJob___childrenJobDepartment___jobPosts___externalUrl
  parentJob___childrenJobDepartment___jobPosts___ghId
  parentJob___childrenJobDepartment___jobPosts___id
  parentJob___childrenJobDepartment___jobPosts___keywords
  parentJob___childrenJobDepartment___jobPosts___order
  parentJob___childrenJobDepartment___jobPosts___priorExperience
  parentJob___childrenJobDepartment___jobPosts___rawContent
  parentJob___childrenJobDepartment___jobPosts___tags
  parentJob___childrenJobDepartment___jobPosts___title
  parentJob___childrenJobDepartment___jobPosts___updatedAt
  parentJob___childrenJobDepartment___jobPosts___validThrough
  parentJob___childrenJobDepartment___name
  parentJob___childrenJobDepartment___parent___children
  parentJob___childrenJobDepartment___parent___id
  parentJob___childrenJobDepartment___slug
  parentJob___childrenJobPost
  parentJob___childrenJobPost___absoluteUrl
  parentJob___childrenJobPost___alternativeCivilianService
  parentJob___childrenJobPost___boardToken
  parentJob___childrenJobPost___boardUrl
  parentJob___childrenJobPost___chapter
  parentJob___childrenJobPost___children
  parentJob___childrenJobPost___children___children
  parentJob___childrenJobPost___children___id
  parentJob___childrenJobPost___content
  parentJob___childrenJobPost___content___bodyHtml
  parentJob___childrenJobPost___content___level
  parentJob___childrenJobPost___content___title
  parentJob___childrenJobPost___corporate
  parentJob___childrenJobPost___departments
  parentJob___childrenJobPost___departments___children
  parentJob___childrenJobPost___departments___ghId
  parentJob___childrenJobPost___departments___id
  parentJob___childrenJobPost___departments___jobPosts
  parentJob___childrenJobPost___departments___name
  parentJob___childrenJobPost___departments___slug
  parentJob___childrenJobPost___employmentType
  parentJob___childrenJobPost___externalUrl
  parentJob___childrenJobPost___ghId
  parentJob___childrenJobPost___id
  parentJob___childrenJobPost___internal___content
  parentJob___childrenJobPost___internal___contentDigest
  parentJob___childrenJobPost___internal___description
  parentJob___childrenJobPost___internal___fieldOwners
  parentJob___childrenJobPost___internal___ignoreType
  parentJob___childrenJobPost___internal___mediaType
  parentJob___childrenJobPost___internal___owner
  parentJob___childrenJobPost___internal___type
  parentJob___childrenJobPost___keywords
  parentJob___childrenJobPost___order
  parentJob___childrenJobPost___parentJob___boardToken
  parentJob___childrenJobPost___parentJob___boardUrl
  parentJob___childrenJobPost___parentJob___children
  parentJob___childrenJobPost___parentJob___childrenJobDepartment
  parentJob___childrenJobPost___parentJob___childrenJobPost
  parentJob___childrenJobPost___parentJob___content
  parentJob___childrenJobPost___parentJob___departments
  parentJob___childrenJobPost___parentJob___ghId
  parentJob___childrenJobPost___parentJob___id
  parentJob___childrenJobPost___parentJob___locationQuestions
  parentJob___childrenJobPost___parentJob___metadata
  parentJob___childrenJobPost___parentJob___questions
  parentJob___childrenJobPost___parentJob___title
  parentJob___childrenJobPost___parentJob___updatedAt
  parentJob___childrenJobPost___parent___children
  parentJob___childrenJobPost___parent___id
  parentJob___childrenJobPost___priorExperience
  parentJob___childrenJobPost___rawContent
  parentJob___childrenJobPost___tags
  parentJob___childrenJobPost___title
  parentJob___childrenJobPost___updatedAt
  parentJob___childrenJobPost___validThrough
  parentJob___children___children
  parentJob___children___children___children
  parentJob___children___children___id
  parentJob___children___id
  parentJob___children___internal___content
  parentJob___children___internal___contentDigest
  parentJob___children___internal___description
  parentJob___children___internal___fieldOwners
  parentJob___children___internal___ignoreType
  parentJob___children___internal___mediaType
  parentJob___children___internal___owner
  parentJob___children___internal___type
  parentJob___children___parent___children
  parentJob___children___parent___id
  parentJob___content
  parentJob___departments
  parentJob___departments___childDepartments
  parentJob___departments___childDepartments___childDepartments
  parentJob___departments___childDepartments___children
  parentJob___departments___childDepartments___ghId
  parentJob___departments___childDepartments___id
  parentJob___departments___childDepartments___jobs
  parentJob___departments___childDepartments___name
  parentJob___departments___children
  parentJob___departments___children___children
  parentJob___departments___children___id
  parentJob___departments___ghId
  parentJob___departments___id
  parentJob___departments___internal___content
  parentJob___departments___internal___contentDigest
  parentJob___departments___internal___description
  parentJob___departments___internal___fieldOwners
  parentJob___departments___internal___ignoreType
  parentJob___departments___internal___mediaType
  parentJob___departments___internal___owner
  parentJob___departments___internal___type
  parentJob___departments___jobs
  parentJob___departments___jobs___boardToken
  parentJob___departments___jobs___boardUrl
  parentJob___departments___jobs___children
  parentJob___departments___jobs___childrenJobDepartment
  parentJob___departments___jobs___childrenJobPost
  parentJob___departments___jobs___content
  parentJob___departments___jobs___departments
  parentJob___departments___jobs___ghId
  parentJob___departments___jobs___id
  parentJob___departments___jobs___locationQuestions
  parentJob___departments___jobs___metadata
  parentJob___departments___jobs___questions
  parentJob___departments___jobs___title
  parentJob___departments___jobs___updatedAt
  parentJob___departments___name
  parentJob___departments___parentDepartment___childDepartments
  parentJob___departments___parentDepartment___children
  parentJob___departments___parentDepartment___ghId
  parentJob___departments___parentDepartment___id
  parentJob___departments___parentDepartment___jobs
  parentJob___departments___parentDepartment___name
  parentJob___departments___parent___children
  parentJob___departments___parent___id
  parentJob___ghId
  parentJob___id
  parentJob___internal___content
  parentJob___internal___contentDigest
  parentJob___internal___description
  parentJob___internal___fieldOwners
  parentJob___internal___ignoreType
  parentJob___internal___mediaType
  parentJob___internal___owner
  parentJob___internal___type
  parentJob___locationQuestions
  parentJob___locationQuestions___description
  parentJob___locationQuestions___descriptionText
  parentJob___locationQuestions___label
  parentJob___locationQuestions___name
  parentJob___locationQuestions___required
  parentJob___metadata
  parentJob___metadata___id
  parentJob___metadata___name
  parentJob___metadata___type
  parentJob___metadata___value
  parentJob___parent___children
  parentJob___parent___children___children
  parentJob___parent___children___id
  parentJob___parent___id
  parentJob___parent___internal___content
  parentJob___parent___internal___contentDigest
  parentJob___parent___internal___description
  parentJob___parent___internal___fieldOwners
  parentJob___parent___internal___ignoreType
  parentJob___parent___internal___mediaType
  parentJob___parent___internal___owner
  parentJob___parent___internal___type
  parentJob___parent___parent___children
  parentJob___parent___parent___id
  parentJob___questions
  parentJob___questions___description
  parentJob___questions___descriptionText
  parentJob___questions___label
  parentJob___questions___name
  parentJob___questions___required
  parentJob___title
  parentJob___updatedAt
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  priorExperience
  rawContent
  tags
  title
  updatedAt
  validThrough
}

input JobPostFilterInput {
  absoluteUrl: StringQueryOperatorInput
  alternativeCivilianService: BooleanQueryOperatorInput
  boardToken: StringQueryOperatorInput
  boardUrl: StringQueryOperatorInput
  chapter: StringQueryOperatorInput
  children: NodeFilterListInput
  content: JobPostContentSectionFilterListInput
  corporate: JobCorporateQueryOperatorInput
  departments: JobDepartmentFilterListInput
  employmentType: JobEmploymentTypeQueryOperatorInput
  externalUrl: StringQueryOperatorInput
  ghId: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  keywords: StringQueryOperatorInput
  order: IntQueryOperatorInput
  parent: NodeFilterInput
  parentJob: GreenhouseJobBoardJobFilterInput
  priorExperience: JobPriorExperienceQueryOperatorInput
  rawContent: StringQueryOperatorInput
  tags: StringQueryOperatorInput
  title: StringQueryOperatorInput
  updatedAt: DateQueryOperatorInput
  validThrough: DateQueryOperatorInput
}

input JobPostFilterListInput {
  elemMatch: JobPostFilterInput
}

type JobPostGroupConnection {
  distinct(field: JobPostFieldsEnum!): [String!]!
  edges: [JobPostEdge!]!
  field: String!
  fieldValue: String
  group(field: JobPostFieldsEnum!, limit: Int, skip: Int): [JobPostGroupConnection!]!
  max(field: JobPostFieldsEnum!): Float
  min(field: JobPostFieldsEnum!): Float
  nodes: [JobPost!]!
  pageInfo: PageInfo!
  sum(field: JobPostFieldsEnum!): Float
  totalCount: Int!
}

input JobPostSortInput {
  fields: [JobPostFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum JobPriorExperience {
  NO
  WHATEVER
  YES
}

input JobPriorExperienceQueryOperatorInput {
  eq: JobPriorExperience
  in: [JobPriorExperience]
  ne: JobPriorExperience
  nin: [JobPriorExperience]
}

type LocalSearchJobPosts implements Node {
  children: [Node!]!

  # The search engine used to create the index.
  engine: String!
  id: ID!

  # The search index created using the selected engine.
  index: String!
  internal: Internal!

  # The name of the index.
  name: String!
  parent: Node

  # Save the index to the site's static directory and return a public URL to it.
  publicIndexURL: String!

  # Save the store to the site's static directory and return a public URL to it.
  publicStoreURL: String!

  # A JSON object used to map search results to their data.
  store: JSON!
}

type LocalSearchJobPostsConnection {
  distinct(field: LocalSearchJobPostsFieldsEnum!): [String!]!
  edges: [LocalSearchJobPostsEdge!]!
  group(field: LocalSearchJobPostsFieldsEnum!, limit: Int, skip: Int): [LocalSearchJobPostsGroupConnection!]!
  max(field: LocalSearchJobPostsFieldsEnum!): Float
  min(field: LocalSearchJobPostsFieldsEnum!): Float
  nodes: [LocalSearchJobPosts!]!
  pageInfo: PageInfo!
  sum(field: LocalSearchJobPostsFieldsEnum!): Float
  totalCount: Int!
}

type LocalSearchJobPostsEdge {
  next: LocalSearchJobPosts
  node: LocalSearchJobPosts!
  previous: LocalSearchJobPosts
}

enum LocalSearchJobPostsFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  engine
  id
  index
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  name
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  publicIndexURL
  publicStoreURL
  store
}

input LocalSearchJobPostsFilterInput {
  children: NodeFilterListInput
  engine: StringQueryOperatorInput
  id: StringQueryOperatorInput
  index: StringQueryOperatorInput
  internal: InternalFilterInput
  name: StringQueryOperatorInput
  parent: NodeFilterInput
  publicIndexURL: StringQueryOperatorInput
  publicStoreURL: StringQueryOperatorInput
  store: JSONQueryOperatorInput
}

type LocalSearchJobPostsGroupConnection {
  distinct(field: LocalSearchJobPostsFieldsEnum!): [String!]!
  edges: [LocalSearchJobPostsEdge!]!
  field: String!
  fieldValue: String
  group(field: LocalSearchJobPostsFieldsEnum!, limit: Int, skip: Int): [LocalSearchJobPostsGroupConnection!]!
  max(field: LocalSearchJobPostsFieldsEnum!): Float
  min(field: LocalSearchJobPostsFieldsEnum!): Float
  nodes: [LocalSearchJobPosts!]!
  pageInfo: PageInfo!
  sum(field: LocalSearchJobPostsFieldsEnum!): Float
  totalCount: Int!
}

input LocalSearchJobPostsSortInput {
  fields: [LocalSearchJobPostsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type LokaliseMessages {
  _placeholder: String!
  detail_link__default_label: String
  faq_page__search: String
  form_field__empty_placeholder: String
  form_field__no_placeholder: String
  form_field__organization_name: String
  form_field__placeholder: String
  form_field__yes_placeholder: String
  job_application_page__alert_completed: String
  job_application_page__alert_failed: String
  job_application_page__button_submit: String
  job_application_page__confirm_apply: String
  job_application_page__field_email_label: String
  job_application_page__field_email_placeholder: String
  job_application_page__field_file_placeholder: String
  job_application_page__field_name_label: String
  job_application_page__field_name_placeholder: String
  job_application_page__field_phone_label: String
  job_application_page__field_phone_placeholder: String
  job_application_page__field_portpolio_description: String
  job_application_page__field_portpolio_label: String
  job_application_page__field_portpolio_placeholder: String
  job_application_page__field_resume_description: String
  job_application_page__field_resume_label: String
  job_application_page__field_resume_placeholder: String
  job_application_page__terms_privacy_info: String
  job_application_page__terms_sensitive_info: String
  job_post_layout__prior_experience_no: String
  job_post_layout__prior_experience_whatever: String
  job_post_layout__prior_experience_yes: String
  job_post_layout__property_karrot_market: String
  job_post_layout__property_karrot_pay: String
  job_post_layout__tab_apply: String
  job_post_layout__tab_view: String
  job_post_list__empty_placeholder__back_to_list: String
  job_post_list__empty_placeholder__no_results: String
  job_post_page__back_to_list: String
  job_post_page__external_post_link: String
  job_post_page__external_post_notice: String
  job_post_page__faq: String
  jobs_page__chapter_all: String
  jobs_page__default_meta_title: String
  jobs_page__employment_type_all: String
  jobs_page__employment_type_assistant: String
  jobs_page__employment_type_contractor: String
  jobs_page__employment_type_fulltime: String
  jobs_page__employment_type_intern: String
  jobs_page__search: String
}

input LokaliseMessagesFilterInput {
  _placeholder: StringQueryOperatorInput
  detail_link__default_label: StringQueryOperatorInput
  faq_page__search: StringQueryOperatorInput
  form_field__empty_placeholder: StringQueryOperatorInput
  form_field__no_placeholder: StringQueryOperatorInput
  form_field__organization_name: StringQueryOperatorInput
  form_field__placeholder: StringQueryOperatorInput
  form_field__yes_placeholder: StringQueryOperatorInput
  job_application_page__alert_completed: StringQueryOperatorInput
  job_application_page__alert_failed: StringQueryOperatorInput
  job_application_page__button_submit: StringQueryOperatorInput
  job_application_page__confirm_apply: StringQueryOperatorInput
  job_application_page__field_email_label: StringQueryOperatorInput
  job_application_page__field_email_placeholder: StringQueryOperatorInput
  job_application_page__field_file_placeholder: StringQueryOperatorInput
  job_application_page__field_name_label: StringQueryOperatorInput
  job_application_page__field_name_placeholder: StringQueryOperatorInput
  job_application_page__field_phone_label: StringQueryOperatorInput
  job_application_page__field_phone_placeholder: StringQueryOperatorInput
  job_application_page__field_portpolio_description: StringQueryOperatorInput
  job_application_page__field_portpolio_label: StringQueryOperatorInput
  job_application_page__field_portpolio_placeholder: StringQueryOperatorInput
  job_application_page__field_resume_description: StringQueryOperatorInput
  job_application_page__field_resume_label: StringQueryOperatorInput
  job_application_page__field_resume_placeholder: StringQueryOperatorInput
  job_application_page__terms_privacy_info: StringQueryOperatorInput
  job_application_page__terms_sensitive_info: StringQueryOperatorInput
  job_post_layout__prior_experience_no: StringQueryOperatorInput
  job_post_layout__prior_experience_whatever: StringQueryOperatorInput
  job_post_layout__prior_experience_yes: StringQueryOperatorInput
  job_post_layout__property_karrot_market: StringQueryOperatorInput
  job_post_layout__property_karrot_pay: StringQueryOperatorInput
  job_post_layout__tab_apply: StringQueryOperatorInput
  job_post_layout__tab_view: StringQueryOperatorInput
  job_post_list__empty_placeholder__back_to_list: StringQueryOperatorInput
  job_post_list__empty_placeholder__no_results: StringQueryOperatorInput
  job_post_page__back_to_list: StringQueryOperatorInput
  job_post_page__external_post_link: StringQueryOperatorInput
  job_post_page__external_post_notice: StringQueryOperatorInput
  job_post_page__faq: StringQueryOperatorInput
  jobs_page__chapter_all: StringQueryOperatorInput
  jobs_page__default_meta_title: StringQueryOperatorInput
  jobs_page__employment_type_all: StringQueryOperatorInput
  jobs_page__employment_type_assistant: StringQueryOperatorInput
  jobs_page__employment_type_contractor: StringQueryOperatorInput
  jobs_page__employment_type_fulltime: StringQueryOperatorInput
  jobs_page__employment_type_intern: StringQueryOperatorInput
  jobs_page__search: StringQueryOperatorInput
}

type LokaliseTranslation implements Node {
  children: [Node!]!
  id: ID!
  internal: Internal!
  messages: LokaliseMessages!
  parent: Node
}

type LokaliseTranslationConnection {
  distinct(field: LokaliseTranslationFieldsEnum!): [String!]!
  edges: [LokaliseTranslationEdge!]!
  group(field: LokaliseTranslationFieldsEnum!, limit: Int, skip: Int): [LokaliseTranslationGroupConnection!]!
  max(field: LokaliseTranslationFieldsEnum!): Float
  min(field: LokaliseTranslationFieldsEnum!): Float
  nodes: [LokaliseTranslation!]!
  pageInfo: PageInfo!
  sum(field: LokaliseTranslationFieldsEnum!): Float
  totalCount: Int!
}

type LokaliseTranslationEdge {
  next: LokaliseTranslation
  node: LokaliseTranslation!
  previous: LokaliseTranslation
}

enum LokaliseTranslationFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  messages____placeholder
  messages___detail_link__default_label
  messages___faq_page__search
  messages___form_field__empty_placeholder
  messages___form_field__no_placeholder
  messages___form_field__organization_name
  messages___form_field__placeholder
  messages___form_field__yes_placeholder
  messages___job_application_page__alert_completed
  messages___job_application_page__alert_failed
  messages___job_application_page__button_submit
  messages___job_application_page__confirm_apply
  messages___job_application_page__field_email_label
  messages___job_application_page__field_email_placeholder
  messages___job_application_page__field_file_placeholder
  messages___job_application_page__field_name_label
  messages___job_application_page__field_name_placeholder
  messages___job_application_page__field_phone_label
  messages___job_application_page__field_phone_placeholder
  messages___job_application_page__field_portpolio_description
  messages___job_application_page__field_portpolio_label
  messages___job_application_page__field_portpolio_placeholder
  messages___job_application_page__field_resume_description
  messages___job_application_page__field_resume_label
  messages___job_application_page__field_resume_placeholder
  messages___job_application_page__terms_privacy_info
  messages___job_application_page__terms_sensitive_info
  messages___job_post_layout__prior_experience_no
  messages___job_post_layout__prior_experience_whatever
  messages___job_post_layout__prior_experience_yes
  messages___job_post_layout__property_karrot_market
  messages___job_post_layout__property_karrot_pay
  messages___job_post_layout__tab_apply
  messages___job_post_layout__tab_view
  messages___job_post_list__empty_placeholder__back_to_list
  messages___job_post_list__empty_placeholder__no_results
  messages___job_post_page__back_to_list
  messages___job_post_page__external_post_link
  messages___job_post_page__external_post_notice
  messages___job_post_page__faq
  messages___jobs_page__chapter_all
  messages___jobs_page__default_meta_title
  messages___jobs_page__employment_type_all
  messages___jobs_page__employment_type_assistant
  messages___jobs_page__employment_type_contractor
  messages___jobs_page__employment_type_fulltime
  messages___jobs_page__employment_type_intern
  messages___jobs_page__search
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
}

input LokaliseTranslationFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  messages: LokaliseMessagesFilterInput
  parent: NodeFilterInput
}

input LokaliseTranslationFilterListInput {
  elemMatch: LokaliseTranslationFilterInput
}

type LokaliseTranslationGroupConnection {
  distinct(field: LokaliseTranslationFieldsEnum!): [String!]!
  edges: [LokaliseTranslationEdge!]!
  field: String!
  fieldValue: String
  group(field: LokaliseTranslationFieldsEnum!, limit: Int, skip: Int): [LokaliseTranslationGroupConnection!]!
  max(field: LokaliseTranslationFieldsEnum!): Float
  min(field: LokaliseTranslationFieldsEnum!): Float
  nodes: [LokaliseTranslation!]!
  pageInfo: PageInfo!
  sum(field: LokaliseTranslationFieldsEnum!): Float
  totalCount: Int!
}

input LokaliseTranslationSortInput {
  fields: [LokaliseTranslationFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

# Node Interface
interface Node {
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

input NodeFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

input NodeFilterListInput {
  elemMatch: NodeFilterInput
}

input PNGOptions {
  compressionSpeed: Int = 4
  quality: Int
}

type PageInfo {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  itemCount: Int!
  pageCount: Int!
  perPage: Int
  totalCount: Int!
}

input Potrace {
  alphaMax: Float
  background: String
  blackOnWhite: Boolean
  color: String
  optCurve: Boolean
  optTolerance: Float
  threshold: Int
  turdSize: Float
  turnPolicy: PotraceTurnPolicy
}

enum PotraceTurnPolicy {
  TURNPOLICY_BLACK
  TURNPOLICY_LEFT
  TURNPOLICY_MAJORITY
  TURNPOLICY_MINORITY
  TURNPOLICY_RIGHT
  TURNPOLICY_WHITE
}

type PrismicAdsContent implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicAdsContentDataType!
  dataRaw: JSON!
  first_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicAdsContentConnection {
  distinct(field: PrismicAdsContentFieldsEnum!): [String!]!
  edges: [PrismicAdsContentEdge!]!
  group(field: PrismicAdsContentFieldsEnum!, limit: Int, skip: Int): [PrismicAdsContentGroupConnection!]!
  max(field: PrismicAdsContentFieldsEnum!): Float
  min(field: PrismicAdsContentFieldsEnum!): Float
  nodes: [PrismicAdsContent!]!
  pageInfo: PageInfo!
  sum(field: PrismicAdsContentFieldsEnum!): Float
  totalCount: Int!
}

type PrismicAdsContentDataBodyDownloadSection implements PrismicSliceType {
  id: ID!
  primary: PrismicAdsContentDataBodyDownloadSectionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicAdsContentDataBodyDownloadSectionPrimary {
  section_subtitle: String
  section_title: PrismicStructuredTextType
}

type PrismicAdsContentDataBodyFeaturesSection implements PrismicSliceType {
  id: ID!
  items: [PrismicAdsContentDataBodyFeaturesSectionItem!]!
  primary: PrismicAdsContentDataBodyFeaturesSectionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicAdsContentDataBodyFeaturesSectionItem {
  feature_description: PrismicStructuredTextType
  feature_link: PrismicLinkType
  feature_name: String
  preview_image: PrismicAdsContentDataBodyFeaturesSectionItemsPreviewImageImageType
}

type PrismicAdsContentDataBodyFeaturesSectionItemsPreviewImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicAdsContentDataBodyFeaturesSectionPrimary {
  section_title: PrismicStructuredTextType
}

type PrismicAdsContentDataBodyGuideSection implements PrismicSliceType {
  id: ID!
  primary: PrismicAdsContentDataBodyGuideSectionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicAdsContentDataBodyGuideSectionPrimary {
  brochure_link: PrismicLinkType
  faq_1_link: PrismicLinkType
  faq_1_text: String
  faq_2_link: PrismicLinkType
  faq_2_text: String
  faq_3_link: PrismicLinkType
  faq_3_text: String
  manual_link: PrismicLinkType
  section_title: PrismicStructuredTextType
}

type PrismicAdsContentDataBodyPreviewSection implements PrismicSliceType {
  id: ID!
  primary: PrismicAdsContentDataBodyPreviewSectionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicAdsContentDataBodyPreviewSectionPrimary {
  image: PrismicAdsContentDataBodyPreviewSectionPrimaryImageImageType
  reversed: Boolean
  section_description: PrismicStructuredTextType
  section_title: PrismicStructuredTextType
}

type PrismicAdsContentDataBodyPreviewSectionPrimaryImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

union PrismicAdsContentDataBodySlicesType = PrismicAdsContentDataBodyDownloadSection | PrismicAdsContentDataBodyFeaturesSection | PrismicAdsContentDataBodyGuideSection | PrismicAdsContentDataBodyPreviewSection | PrismicAdsContentDataBodyStepsSection | PrismicAdsContentDataBodyUsageSlider | PrismicAdsContentDataBodyUserStorySection

type PrismicAdsContentDataBodyStepsSection implements PrismicSliceType {
  id: ID!
  items: [PrismicAdsContentDataBodyStepsSectionItem!]!
  primary: PrismicAdsContentDataBodyStepsSectionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicAdsContentDataBodyStepsSectionItem {
  step_image: PrismicAdsContentDataBodyStepsSectionItemsStepImageImageType
  step_text: String
}

type PrismicAdsContentDataBodyStepsSectionItemsStepImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicAdsContentDataBodyStepsSectionPrimary {
  section_title: PrismicStructuredTextType
}

type PrismicAdsContentDataBodyUsageSlider implements PrismicSliceType {
  id: ID!
  items: [PrismicAdsContentDataBodyUsageSliderItem!]!
  primary: PrismicAdsContentDataBodyUsageSliderPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicAdsContentDataBodyUsageSliderItem {
  region: String
  visitor_count: Float
}

type PrismicAdsContentDataBodyUsageSliderPrimary {
  date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
}

type PrismicAdsContentDataBodyUserStorySection implements PrismicSliceType {
  id: ID!
  items: [PrismicAdsContentDataBodyUserStorySectionItem!]!
  primary: PrismicAdsContentDataBodyUserStorySectionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicAdsContentDataBodyUserStorySectionItem {
  background_image: PrismicAdsContentDataBodyUserStorySectionItemsBackgroundImageImageType
  goto_link: PrismicLinkType
  goto_text: String
  user_story: PrismicStructuredTextType
}

type PrismicAdsContentDataBodyUserStorySectionItemsBackgroundImageImageThumbnailsType {
  mobile: PrismicImageThumbnailType
}

type PrismicAdsContentDataBodyUserStorySectionItemsBackgroundImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File
  thumbnails: PrismicAdsContentDataBodyUserStorySectionItemsBackgroundImageImageThumbnailsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicAdsContentDataBodyUserStorySectionPrimary {
  section_title: PrismicStructuredTextType
}

type PrismicAdsContentDataHeroImageImageThumbnailsType {
  pc_main: PrismicImageThumbnailType
}

input PrismicAdsContentDataHeroImageImageThumbnailsTypeFilterInput {
  pc_main: PrismicImageThumbnailTypeFilterInput
}

type PrismicAdsContentDataHeroImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File
  thumbnails: PrismicAdsContentDataHeroImageImageThumbnailsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicAdsContentDataHeroImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  thumbnails: PrismicAdsContentDataHeroImageImageThumbnailsTypeFilterInput
  url: StringQueryOperatorInput
}

type PrismicAdsContentDataMetaImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicAdsContentDataMetaImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicAdsContentDataType {
  appstore_app_id: String
  body: [PrismicAdsContentDataBodySlicesType!]!
  fb_app_id: String
  here_title: PrismicStructuredTextType
  hero_image: PrismicAdsContentDataHeroImageImageType
  meta_description: String
  meta_image: PrismicAdsContentDataMetaImageImageType
  meta_title: String
  playstore_app_id: String
}

input PrismicAdsContentDataTypeFilterInput {
  appstore_app_id: StringQueryOperatorInput
  fb_app_id: StringQueryOperatorInput
  here_title: PrismicStructuredTextTypeFilterInput
  hero_image: PrismicAdsContentDataHeroImageImageTypeFilterInput
  meta_description: StringQueryOperatorInput
  meta_image: PrismicAdsContentDataMetaImageImageTypeFilterInput
  meta_title: StringQueryOperatorInput
  playstore_app_id: StringQueryOperatorInput
}

type PrismicAdsContentEdge {
  next: PrismicAdsContent
  node: PrismicAdsContent!
  previous: PrismicAdsContent
}

enum PrismicAdsContentFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___appstore_app_id
  data___fb_app_id
  data___here_title___html
  data___here_title___raw
  data___here_title___richText
  data___here_title___text
  data___hero_image___alt
  data___hero_image___copyright
  data___hero_image___dimensions___height
  data___hero_image___dimensions___width
  data___hero_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___hero_image___localFile___absolutePath
  data___hero_image___localFile___accessTime
  data___hero_image___localFile___atime
  data___hero_image___localFile___atimeMs
  data___hero_image___localFile___base
  data___hero_image___localFile___birthTime
  data___hero_image___localFile___birthtime
  data___hero_image___localFile___birthtimeMs
  data___hero_image___localFile___blksize
  data___hero_image___localFile___blocks
  data___hero_image___localFile___changeTime
  data___hero_image___localFile___children
  data___hero_image___localFile___childrenImageSharp
  data___hero_image___localFile___childrenLokaliseTranslation
  data___hero_image___localFile___ctime
  data___hero_image___localFile___ctimeMs
  data___hero_image___localFile___dev
  data___hero_image___localFile___dir
  data___hero_image___localFile___ext
  data___hero_image___localFile___extension
  data___hero_image___localFile___gid
  data___hero_image___localFile___id
  data___hero_image___localFile___ino
  data___hero_image___localFile___mode
  data___hero_image___localFile___modifiedTime
  data___hero_image___localFile___mtime
  data___hero_image___localFile___mtimeMs
  data___hero_image___localFile___name
  data___hero_image___localFile___nlink
  data___hero_image___localFile___prettySize
  data___hero_image___localFile___publicURL
  data___hero_image___localFile___rdev
  data___hero_image___localFile___relativeDirectory
  data___hero_image___localFile___relativePath
  data___hero_image___localFile___root
  data___hero_image___localFile___size
  data___hero_image___localFile___sourceInstanceName
  data___hero_image___localFile___uid
  data___hero_image___localFile___url
  data___hero_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_description
  data___meta_image___alt
  data___meta_image___copyright
  data___meta_image___dimensions___height
  data___meta_image___dimensions___width
  data___meta_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_image___localFile___absolutePath
  data___meta_image___localFile___accessTime
  data___meta_image___localFile___atime
  data___meta_image___localFile___atimeMs
  data___meta_image___localFile___base
  data___meta_image___localFile___birthTime
  data___meta_image___localFile___birthtime
  data___meta_image___localFile___birthtimeMs
  data___meta_image___localFile___blksize
  data___meta_image___localFile___blocks
  data___meta_image___localFile___changeTime
  data___meta_image___localFile___children
  data___meta_image___localFile___childrenImageSharp
  data___meta_image___localFile___childrenLokaliseTranslation
  data___meta_image___localFile___ctime
  data___meta_image___localFile___ctimeMs
  data___meta_image___localFile___dev
  data___meta_image___localFile___dir
  data___meta_image___localFile___ext
  data___meta_image___localFile___extension
  data___meta_image___localFile___gid
  data___meta_image___localFile___id
  data___meta_image___localFile___ino
  data___meta_image___localFile___mode
  data___meta_image___localFile___modifiedTime
  data___meta_image___localFile___mtime
  data___meta_image___localFile___mtimeMs
  data___meta_image___localFile___name
  data___meta_image___localFile___nlink
  data___meta_image___localFile___prettySize
  data___meta_image___localFile___publicURL
  data___meta_image___localFile___rdev
  data___meta_image___localFile___relativeDirectory
  data___meta_image___localFile___relativePath
  data___meta_image___localFile___root
  data___meta_image___localFile___size
  data___meta_image___localFile___sourceInstanceName
  data___meta_image___localFile___uid
  data___meta_image___localFile___url
  data___meta_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___meta_title
  data___playstore_app_id
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicAdsContentFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicAdsContentDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicAdsContentGroupConnection {
  distinct(field: PrismicAdsContentFieldsEnum!): [String!]!
  edges: [PrismicAdsContentEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicAdsContentFieldsEnum!, limit: Int, skip: Int): [PrismicAdsContentGroupConnection!]!
  max(field: PrismicAdsContentFieldsEnum!): Float
  min(field: PrismicAdsContentFieldsEnum!): Float
  nodes: [PrismicAdsContent!]!
  pageInfo: PageInfo!
  sum(field: PrismicAdsContentFieldsEnum!): Float
  totalCount: Int!
}

input PrismicAdsContentSortInput {
  fields: [PrismicAdsContentFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicAdvertisementContents implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicAdvertisementContentsDataType!
  dataRaw: JSON!
  first_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicAdvertisementContentsConnection {
  distinct(field: PrismicAdvertisementContentsFieldsEnum!): [String!]!
  edges: [PrismicAdvertisementContentsEdge!]!
  group(field: PrismicAdvertisementContentsFieldsEnum!, limit: Int, skip: Int): [PrismicAdvertisementContentsGroupConnection!]!
  max(field: PrismicAdvertisementContentsFieldsEnum!): Float
  min(field: PrismicAdvertisementContentsFieldsEnum!): Float
  nodes: [PrismicAdvertisementContents!]!
  pageInfo: PageInfo!
  sum(field: PrismicAdvertisementContentsFieldsEnum!): Float
  totalCount: Int!
}

type PrismicAdvertisementContentsDataBodyLearnmoreSlice implements PrismicSliceType {
  id: ID!
  items: [PrismicAdvertisementContentsDataBodyLearnmoreSliceItem!]!
  primary: PrismicAdvertisementContentsDataBodyLearnmoreSlicePrimary!
  slice_label: String
  slice_type: String!
}

type PrismicAdvertisementContentsDataBodyLearnmoreSliceItem {
  faq_item: PrismicLinkType
  faq_title: String
}

type PrismicAdvertisementContentsDataBodyLearnmoreSlicePrimary {
  introduce_advertise: PrismicLinkType
  learn_more: PrismicLinkType
}

union PrismicAdvertisementContentsDataBodySlicesType = PrismicAdvertisementContentsDataBodyLearnmoreSlice | PrismicAdvertisementContentsDataBodyVisitorCountSlide

type PrismicAdvertisementContentsDataBodyVisitorCountSlide implements PrismicSliceType {
  id: ID!
  items: [PrismicAdvertisementContentsDataBodyVisitorCountSlideItem!]!
  primary: PrismicAdvertisementContentsDataBodyVisitorCountSlidePrimary!
  slice_label: String
  slice_type: String!
}

type PrismicAdvertisementContentsDataBodyVisitorCountSlideItem {
  region: String
  visitor_count: Float
}

type PrismicAdvertisementContentsDataBodyVisitorCountSlidePrimary {
  date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
}

type PrismicAdvertisementContentsDataType {
  body: [PrismicAdvertisementContentsDataBodySlicesType!]!
}

type PrismicAdvertisementContentsEdge {
  next: PrismicAdvertisementContents
  node: PrismicAdvertisementContents!
  previous: PrismicAdvertisementContents
}

enum PrismicAdvertisementContentsFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicAdvertisementContentsFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicAdvertisementContentsGroupConnection {
  distinct(field: PrismicAdvertisementContentsFieldsEnum!): [String!]!
  edges: [PrismicAdvertisementContentsEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicAdvertisementContentsFieldsEnum!, limit: Int, skip: Int): [PrismicAdvertisementContentsGroupConnection!]!
  max(field: PrismicAdvertisementContentsFieldsEnum!): Float
  min(field: PrismicAdvertisementContentsFieldsEnum!): Float
  nodes: [PrismicAdvertisementContents!]!
  pageInfo: PageInfo!
  sum(field: PrismicAdvertisementContentsFieldsEnum!): Float
  totalCount: Int!
}

input PrismicAdvertisementContentsSortInput {
  fields: [PrismicAdvertisementContentsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

union PrismicAllDocumentTypes = PrismicAdsContent | PrismicAdvertisementContents | PrismicFaq | PrismicGlobalContents | PrismicIr | PrismicMemberProfile | PrismicPayContents | PrismicSiteNavigation | PrismicTeamBanner | PrismicTeamContents | PrismicTeamsArticle | PrismicTermsAndConditions

type PrismicAlternateLanguageType {
  document: PrismicAllDocumentTypes
  id: ID
  lang: String
  raw: JSON
  type: String
  uid: String
}

input PrismicAlternateLanguageTypeFilterInput {
  id: IDQueryOperatorInput
  lang: StringQueryOperatorInput
  raw: JSONQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
}

input PrismicAlternateLanguageTypeFilterListInput {
  elemMatch: PrismicAlternateLanguageTypeFilterInput
}

type PrismicEmbedType implements Node {
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

type PrismicEmbedTypeConnection {
  distinct(field: PrismicEmbedTypeFieldsEnum!): [String!]!
  edges: [PrismicEmbedTypeEdge!]!
  group(field: PrismicEmbedTypeFieldsEnum!, limit: Int, skip: Int): [PrismicEmbedTypeGroupConnection!]!
  max(field: PrismicEmbedTypeFieldsEnum!): Float
  min(field: PrismicEmbedTypeFieldsEnum!): Float
  nodes: [PrismicEmbedType!]!
  pageInfo: PageInfo!
  sum(field: PrismicEmbedTypeFieldsEnum!): Float
  totalCount: Int!
}

type PrismicEmbedTypeEdge {
  next: PrismicEmbedType
  node: PrismicEmbedType!
  previous: PrismicEmbedType
}

enum PrismicEmbedTypeFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
}

input PrismicEmbedTypeFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

type PrismicEmbedTypeGroupConnection {
  distinct(field: PrismicEmbedTypeFieldsEnum!): [String!]!
  edges: [PrismicEmbedTypeEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicEmbedTypeFieldsEnum!, limit: Int, skip: Int): [PrismicEmbedTypeGroupConnection!]!
  max(field: PrismicEmbedTypeFieldsEnum!): Float
  min(field: PrismicEmbedTypeFieldsEnum!): Float
  nodes: [PrismicEmbedType!]!
  pageInfo: PageInfo!
  sum(field: PrismicEmbedTypeFieldsEnum!): Float
  totalCount: Int!
}

input PrismicEmbedTypeSortInput {
  fields: [PrismicEmbedTypeFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicFaq implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicFaqDataType!
  dataRaw: JSON!
  first_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicFaqConnection {
  distinct(field: PrismicFaqFieldsEnum!): [String!]!
  edges: [PrismicFaqEdge!]!
  group(field: PrismicFaqFieldsEnum!, limit: Int, skip: Int): [PrismicFaqGroupConnection!]!
  max(field: PrismicFaqFieldsEnum!): Float
  min(field: PrismicFaqFieldsEnum!): Float
  nodes: [PrismicFaq!]!
  pageInfo: PageInfo!
  sum(field: PrismicFaqFieldsEnum!): Float
  totalCount: Int!
}

type PrismicFaqDataEntries {
  answer: PrismicStructuredTextType
  keywords: String
  question: String
}

input PrismicFaqDataEntriesFilterInput {
  answer: PrismicStructuredTextTypeFilterInput
  keywords: StringQueryOperatorInput
  question: StringQueryOperatorInput
}

input PrismicFaqDataEntriesFilterListInput {
  elemMatch: PrismicFaqDataEntriesFilterInput
}

type PrismicFaqDataType {
  display_name: String
  entries: [PrismicFaqDataEntries]
}

input PrismicFaqDataTypeFilterInput {
  display_name: StringQueryOperatorInput
  entries: PrismicFaqDataEntriesFilterListInput
}

type PrismicFaqEdge {
  next: PrismicFaq
  node: PrismicFaq!
  previous: PrismicFaq
}

enum PrismicFaqFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___display_name
  data___entries
  data___entries___answer___html
  data___entries___answer___raw
  data___entries___answer___richText
  data___entries___answer___text
  data___entries___keywords
  data___entries___question
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicFaqFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicFaqDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicFaqGroupConnection {
  distinct(field: PrismicFaqFieldsEnum!): [String!]!
  edges: [PrismicFaqEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicFaqFieldsEnum!, limit: Int, skip: Int): [PrismicFaqGroupConnection!]!
  max(field: PrismicFaqFieldsEnum!): Float
  min(field: PrismicFaqFieldsEnum!): Float
  nodes: [PrismicFaq!]!
  pageInfo: PageInfo!
  sum(field: PrismicFaqFieldsEnum!): Float
  totalCount: Int!
}

input PrismicFaqSortInput {
  fields: [PrismicFaqFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicGeoPointType {
  latitude: Float!
  longitude: Float!
}

type PrismicGlobalContents implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicGlobalContentsDataType!
  dataRaw: JSON!
  first_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicGlobalContentsConnection {
  distinct(field: PrismicGlobalContentsFieldsEnum!): [String!]!
  edges: [PrismicGlobalContentsEdge!]!
  group(field: PrismicGlobalContentsFieldsEnum!, limit: Int, skip: Int): [PrismicGlobalContentsGroupConnection!]!
  max(field: PrismicGlobalContentsFieldsEnum!): Float
  min(field: PrismicGlobalContentsFieldsEnum!): Float
  nodes: [PrismicGlobalContents!]!
  pageInfo: PageInfo!
  sum(field: PrismicGlobalContentsFieldsEnum!): Float
  totalCount: Int!
}

type PrismicGlobalContentsDataAboutBackgroundImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicGlobalContentsDataAboutBackgroundImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicGlobalContentsDataAboutBodyDetailsList implements PrismicSliceType {
  id: ID!
  items: [PrismicGlobalContentsDataAboutBodyDetailsListItem!]!
  slice_label: String
  slice_type: String!
}

type PrismicGlobalContentsDataAboutBodyDetailsListItem {
  label: String
  text: String
}

union PrismicGlobalContentsDataAboutBodySlicesType = PrismicGlobalContentsDataAboutBodyDetailsList | PrismicGlobalContentsDataAboutBodySubtitleAndImages | PrismicGlobalContentsDataAboutBodySubtitleAndLinks | PrismicGlobalContentsDataAboutBodySubtitleAndText

type PrismicGlobalContentsDataAboutBodySubtitleAndImages implements PrismicSliceType {
  id: ID!
  items: [PrismicGlobalContentsDataAboutBodySubtitleAndImagesItem!]!
  primary: PrismicGlobalContentsDataAboutBodySubtitleAndImagesPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicGlobalContentsDataAboutBodySubtitleAndImagesItem {
  image: PrismicGlobalContentsDataAboutBodySubtitleAndImagesItemsImageImageType
}

type PrismicGlobalContentsDataAboutBodySubtitleAndImagesItemsImageImageThumbnailsType {
  mobile: PrismicImageThumbnailType
}

type PrismicGlobalContentsDataAboutBodySubtitleAndImagesItemsImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File
  thumbnails: PrismicGlobalContentsDataAboutBodySubtitleAndImagesItemsImageImageThumbnailsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicGlobalContentsDataAboutBodySubtitleAndImagesPrimary {
  subtitle: PrismicStructuredTextType
}

type PrismicGlobalContentsDataAboutBodySubtitleAndLinks implements PrismicSliceType {
  id: ID!
  items: [PrismicGlobalContentsDataAboutBodySubtitleAndLinksItem!]!
  primary: PrismicGlobalContentsDataAboutBodySubtitleAndLinksPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicGlobalContentsDataAboutBodySubtitleAndLinksItem {
  date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  link: PrismicLinkType
  text: String
}

type PrismicGlobalContentsDataAboutBodySubtitleAndLinksPrimary {
  subtitle: PrismicStructuredTextType
}

type PrismicGlobalContentsDataAboutBodySubtitleAndText implements PrismicSliceType {
  id: ID!
  primary: PrismicGlobalContentsDataAboutBodySubtitleAndTextPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicGlobalContentsDataAboutBodySubtitleAndTextPrimary {
  subtitle: PrismicStructuredTextType
  text: PrismicStructuredTextType
}

type PrismicGlobalContentsDataAboutOpengraphImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicGlobalContentsDataAboutOpengraphImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicGlobalContentsDataBodyDetailsList implements PrismicSliceType {
  id: ID!
  items: [PrismicGlobalContentsDataBodyDetailsListItem!]!
  slice_label: String
  slice_type: String!
}

type PrismicGlobalContentsDataBodyDetailsListItem {
  label: String
  text: String
}

union PrismicGlobalContentsDataBodySlicesType = PrismicGlobalContentsDataBodyDetailsList | PrismicGlobalContentsDataBodySubtitleAndImages | PrismicGlobalContentsDataBodySubtitleAndLinks | PrismicGlobalContentsDataBodySubtitleAndText

type PrismicGlobalContentsDataBodySubtitleAndImages implements PrismicSliceType {
  id: ID!
  items: [PrismicGlobalContentsDataBodySubtitleAndImagesItem!]!
  primary: PrismicGlobalContentsDataBodySubtitleAndImagesPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicGlobalContentsDataBodySubtitleAndImagesItem {
  image: PrismicGlobalContentsDataBodySubtitleAndImagesItemsImageImageType
}

type PrismicGlobalContentsDataBodySubtitleAndImagesItemsImageImageThumbnailsType {
  mobile: PrismicImageThumbnailType
}

type PrismicGlobalContentsDataBodySubtitleAndImagesItemsImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File
  thumbnails: PrismicGlobalContentsDataBodySubtitleAndImagesItemsImageImageThumbnailsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicGlobalContentsDataBodySubtitleAndImagesPrimary {
  subtitle: PrismicStructuredTextType
}

type PrismicGlobalContentsDataBodySubtitleAndLinks implements PrismicSliceType {
  id: ID!
  items: [PrismicGlobalContentsDataBodySubtitleAndLinksItem!]!
  primary: PrismicGlobalContentsDataBodySubtitleAndLinksPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicGlobalContentsDataBodySubtitleAndLinksItem {
  date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  link: PrismicLinkType
  text: String
}

type PrismicGlobalContentsDataBodySubtitleAndLinksPrimary {
  subtitle: PrismicStructuredTextType
}

type PrismicGlobalContentsDataBodySubtitleAndText implements PrismicSliceType {
  id: ID!
  primary: PrismicGlobalContentsDataBodySubtitleAndTextPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicGlobalContentsDataBodySubtitleAndTextPrimary {
  subtitle: PrismicStructuredTextType
  text: PrismicStructuredTextType
}

type PrismicGlobalContentsDataIntroductionBackgroundImageImageThumbnailsType {
  portrait: PrismicImageThumbnailType
}

input PrismicGlobalContentsDataIntroductionBackgroundImageImageThumbnailsTypeFilterInput {
  portrait: PrismicImageThumbnailTypeFilterInput
}

type PrismicGlobalContentsDataIntroductionBackgroundImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File
  thumbnails: PrismicGlobalContentsDataIntroductionBackgroundImageImageThumbnailsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicGlobalContentsDataIntroductionBackgroundImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  thumbnails: PrismicGlobalContentsDataIntroductionBackgroundImageImageThumbnailsTypeFilterInput
  url: StringQueryOperatorInput
}

type PrismicGlobalContentsDataIntroductionOpengraphImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicGlobalContentsDataIntroductionOpengraphImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicGlobalContentsDataMainBodyCentreSection implements PrismicSliceType {
  id: ID!
  primary: PrismicGlobalContentsDataMainBodyCentreSectionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicGlobalContentsDataMainBodyCentreSectionPrimary {
  image: PrismicGlobalContentsDataMainBodyCentreSectionPrimaryImageImageType
  text: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

type PrismicGlobalContentsDataMainBodyCentreSectionPrimaryImageImageThumbnailsType {
  mobile: PrismicImageThumbnailType
}

type PrismicGlobalContentsDataMainBodyCentreSectionPrimaryImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File
  thumbnails: PrismicGlobalContentsDataMainBodyCentreSectionPrimaryImageImageThumbnailsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicGlobalContentsDataMainBodyDownloadSection implements PrismicSliceType {
  id: ID!
  primary: PrismicGlobalContentsDataMainBodyDownloadSectionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicGlobalContentsDataMainBodyDownloadSectionPrimary {
  title: PrismicStructuredTextType
}

type PrismicGlobalContentsDataMainBodyHeroSection implements PrismicSliceType {
  id: ID!
  primary: PrismicGlobalContentsDataMainBodyHeroSectionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicGlobalContentsDataMainBodyHeroSectionPrimary {
  background_color: String
  background_image: PrismicGlobalContentsDataMainBodyHeroSectionPrimaryBackgroundImageImageType
  side_image: PrismicGlobalContentsDataMainBodyHeroSectionPrimarySideImageImageType
  text: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

type PrismicGlobalContentsDataMainBodyHeroSectionPrimaryBackgroundImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicGlobalContentsDataMainBodyHeroSectionPrimarySideImageImageThumbnailsType {
  mobile: PrismicImageThumbnailType
}

type PrismicGlobalContentsDataMainBodyHeroSectionPrimarySideImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File
  thumbnails: PrismicGlobalContentsDataMainBodyHeroSectionPrimarySideImageImageThumbnailsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicGlobalContentsDataMainBodyIllustrationSection implements PrismicSliceType {
  id: ID!
  primary: PrismicGlobalContentsDataMainBodyIllustrationSectionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicGlobalContentsDataMainBodyIllustrationSectionPrimary {
  image: PrismicGlobalContentsDataMainBodyIllustrationSectionPrimaryImageImageType
  inverted: Boolean
  text: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

type PrismicGlobalContentsDataMainBodyIllustrationSectionPrimaryImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicGlobalContentsDataMainBodyMockupSection implements PrismicSliceType {
  id: ID!
  items: [PrismicGlobalContentsDataMainBodyMockupSectionItem!]!
  primary: PrismicGlobalContentsDataMainBodyMockupSectionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicGlobalContentsDataMainBodyMockupSectionItem {
  icon: String
  text: String
}

type PrismicGlobalContentsDataMainBodyMockupSectionPrimary {
  background_color: String
  inverted: Boolean
  phone_mockup_component: String
  text: PrismicStructuredTextType
  text_highlight_color: String
}

type PrismicGlobalContentsDataMainBodyParallaxSection implements PrismicSliceType {
  id: ID!
  primary: PrismicGlobalContentsDataMainBodyParallaxSectionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicGlobalContentsDataMainBodyParallaxSectionPrimary {
  background_image: PrismicGlobalContentsDataMainBodyParallaxSectionPrimaryBackgroundImageImageType
  title: PrismicStructuredTextType
  top_icon: String
  top_text: PrismicStructuredTextType
}

type PrismicGlobalContentsDataMainBodyParallaxSectionPrimaryBackgroundImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicGlobalContentsDataMainBodyPopularSection implements PrismicSliceType {
  id: ID!
  primary: PrismicGlobalContentsDataMainBodyPopularSectionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicGlobalContentsDataMainBodyPopularSectionPrimary {
  more_button: String
  title: PrismicStructuredTextType
}

type PrismicGlobalContentsDataMainBodyReviewSection implements PrismicSliceType {
  id: ID!
  items: [PrismicGlobalContentsDataMainBodyReviewSectionItem!]!
  primary: PrismicGlobalContentsDataMainBodyReviewSectionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicGlobalContentsDataMainBodyReviewSectionItem {
  content: PrismicStructuredTextType
  text_highlight_color: String
  user_name: String
  user_region: String
}

type PrismicGlobalContentsDataMainBodyReviewSectionPrimary {
  background_color: String
  image: PrismicGlobalContentsDataMainBodyReviewSectionPrimaryImageImageType
  title: PrismicStructuredTextType
}

type PrismicGlobalContentsDataMainBodyReviewSectionPrimaryImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

union PrismicGlobalContentsDataMainBodySlicesType = PrismicGlobalContentsDataMainBodyCentreSection | PrismicGlobalContentsDataMainBodyDownloadSection | PrismicGlobalContentsDataMainBodyHeroSection | PrismicGlobalContentsDataMainBodyIllustrationSection | PrismicGlobalContentsDataMainBodyMockupSection | PrismicGlobalContentsDataMainBodyParallaxSection | PrismicGlobalContentsDataMainBodyPopularSection | PrismicGlobalContentsDataMainBodyReviewSection

type PrismicGlobalContentsDataMainOpengraphImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicGlobalContentsDataMainOpengraphImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicGlobalContentsDataType {
  about_background_image: PrismicGlobalContentsDataAboutBackgroundImageImageType
  about_body: [PrismicGlobalContentsDataAboutBodySlicesType!]!
  about_opengraph_image: PrismicGlobalContentsDataAboutOpengraphImageImageType
  about_opengraph_image_link: String
  about_page_description: String
  about_page_title: String
  about_title: PrismicStructuredTextType
  app_store_link: String
  body: [PrismicGlobalContentsDataBodySlicesType!]!
  google_play_link: String
  introduction_background_image: PrismicGlobalContentsDataIntroductionBackgroundImageImageType
  introduction_opengraph_image: PrismicGlobalContentsDataIntroductionOpengraphImageImageType
  introduction_opengraph_image_link: String
  introduction_page_description: String
  introduction_page_title: String
  introduction_title: PrismicStructuredTextType
  main_body: [PrismicGlobalContentsDataMainBodySlicesType!]!
  main_opengraph_image: PrismicGlobalContentsDataMainOpengraphImageImageType
  main_opengraph_image_link: String
  main_page_description: String
  main_page_title: String
  one_link: String
  one_link_button_text: String
}

input PrismicGlobalContentsDataTypeFilterInput {
  about_background_image: PrismicGlobalContentsDataAboutBackgroundImageImageTypeFilterInput
  about_opengraph_image: PrismicGlobalContentsDataAboutOpengraphImageImageTypeFilterInput
  about_opengraph_image_link: StringQueryOperatorInput
  about_page_description: StringQueryOperatorInput
  about_page_title: StringQueryOperatorInput
  about_title: PrismicStructuredTextTypeFilterInput
  app_store_link: StringQueryOperatorInput
  google_play_link: StringQueryOperatorInput
  introduction_background_image: PrismicGlobalContentsDataIntroductionBackgroundImageImageTypeFilterInput
  introduction_opengraph_image: PrismicGlobalContentsDataIntroductionOpengraphImageImageTypeFilterInput
  introduction_opengraph_image_link: StringQueryOperatorInput
  introduction_page_description: StringQueryOperatorInput
  introduction_page_title: StringQueryOperatorInput
  introduction_title: PrismicStructuredTextTypeFilterInput
  main_opengraph_image: PrismicGlobalContentsDataMainOpengraphImageImageTypeFilterInput
  main_opengraph_image_link: StringQueryOperatorInput
  main_page_description: StringQueryOperatorInput
  main_page_title: StringQueryOperatorInput
  one_link: StringQueryOperatorInput
  one_link_button_text: StringQueryOperatorInput
}

type PrismicGlobalContentsEdge {
  next: PrismicGlobalContents
  node: PrismicGlobalContents!
  previous: PrismicGlobalContents
}

enum PrismicGlobalContentsFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___about_background_image___alt
  data___about_background_image___copyright
  data___about_background_image___dimensions___height
  data___about_background_image___dimensions___width
  data___about_background_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_background_image___localFile___absolutePath
  data___about_background_image___localFile___accessTime
  data___about_background_image___localFile___atime
  data___about_background_image___localFile___atimeMs
  data___about_background_image___localFile___base
  data___about_background_image___localFile___birthTime
  data___about_background_image___localFile___birthtime
  data___about_background_image___localFile___birthtimeMs
  data___about_background_image___localFile___blksize
  data___about_background_image___localFile___blocks
  data___about_background_image___localFile___changeTime
  data___about_background_image___localFile___children
  data___about_background_image___localFile___childrenImageSharp
  data___about_background_image___localFile___childrenLokaliseTranslation
  data___about_background_image___localFile___ctime
  data___about_background_image___localFile___ctimeMs
  data___about_background_image___localFile___dev
  data___about_background_image___localFile___dir
  data___about_background_image___localFile___ext
  data___about_background_image___localFile___extension
  data___about_background_image___localFile___gid
  data___about_background_image___localFile___id
  data___about_background_image___localFile___ino
  data___about_background_image___localFile___mode
  data___about_background_image___localFile___modifiedTime
  data___about_background_image___localFile___mtime
  data___about_background_image___localFile___mtimeMs
  data___about_background_image___localFile___name
  data___about_background_image___localFile___nlink
  data___about_background_image___localFile___prettySize
  data___about_background_image___localFile___publicURL
  data___about_background_image___localFile___rdev
  data___about_background_image___localFile___relativeDirectory
  data___about_background_image___localFile___relativePath
  data___about_background_image___localFile___root
  data___about_background_image___localFile___size
  data___about_background_image___localFile___sourceInstanceName
  data___about_background_image___localFile___uid
  data___about_background_image___localFile___url
  data___about_background_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___alt
  data___about_opengraph_image___copyright
  data___about_opengraph_image___dimensions___height
  data___about_opengraph_image___dimensions___width
  data___about_opengraph_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image___localFile___absolutePath
  data___about_opengraph_image___localFile___accessTime
  data___about_opengraph_image___localFile___atime
  data___about_opengraph_image___localFile___atimeMs
  data___about_opengraph_image___localFile___base
  data___about_opengraph_image___localFile___birthTime
  data___about_opengraph_image___localFile___birthtime
  data___about_opengraph_image___localFile___birthtimeMs
  data___about_opengraph_image___localFile___blksize
  data___about_opengraph_image___localFile___blocks
  data___about_opengraph_image___localFile___changeTime
  data___about_opengraph_image___localFile___children
  data___about_opengraph_image___localFile___childrenImageSharp
  data___about_opengraph_image___localFile___childrenLokaliseTranslation
  data___about_opengraph_image___localFile___ctime
  data___about_opengraph_image___localFile___ctimeMs
  data___about_opengraph_image___localFile___dev
  data___about_opengraph_image___localFile___dir
  data___about_opengraph_image___localFile___ext
  data___about_opengraph_image___localFile___extension
  data___about_opengraph_image___localFile___gid
  data___about_opengraph_image___localFile___id
  data___about_opengraph_image___localFile___ino
  data___about_opengraph_image___localFile___mode
  data___about_opengraph_image___localFile___modifiedTime
  data___about_opengraph_image___localFile___mtime
  data___about_opengraph_image___localFile___mtimeMs
  data___about_opengraph_image___localFile___name
  data___about_opengraph_image___localFile___nlink
  data___about_opengraph_image___localFile___prettySize
  data___about_opengraph_image___localFile___publicURL
  data___about_opengraph_image___localFile___rdev
  data___about_opengraph_image___localFile___relativeDirectory
  data___about_opengraph_image___localFile___relativePath
  data___about_opengraph_image___localFile___root
  data___about_opengraph_image___localFile___size
  data___about_opengraph_image___localFile___sourceInstanceName
  data___about_opengraph_image___localFile___uid
  data___about_opengraph_image___localFile___url
  data___about_opengraph_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___about_opengraph_image_link
  data___about_page_description
  data___about_page_title
  data___about_title___html
  data___about_title___raw
  data___about_title___richText
  data___about_title___text
  data___app_store_link
  data___google_play_link
  data___introduction_background_image___alt
  data___introduction_background_image___copyright
  data___introduction_background_image___dimensions___height
  data___introduction_background_image___dimensions___width
  data___introduction_background_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_background_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_background_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_background_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_background_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_background_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_background_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_background_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_background_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_background_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_background_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_background_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_background_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_background_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_background_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_background_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_background_image___localFile___absolutePath
  data___introduction_background_image___localFile___accessTime
  data___introduction_background_image___localFile___atime
  data___introduction_background_image___localFile___atimeMs
  data___introduction_background_image___localFile___base
  data___introduction_background_image___localFile___birthTime
  data___introduction_background_image___localFile___birthtime
  data___introduction_background_image___localFile___birthtimeMs
  data___introduction_background_image___localFile___blksize
  data___introduction_background_image___localFile___blocks
  data___introduction_background_image___localFile___changeTime
  data___introduction_background_image___localFile___children
  data___introduction_background_image___localFile___childrenImageSharp
  data___introduction_background_image___localFile___childrenLokaliseTranslation
  data___introduction_background_image___localFile___ctime
  data___introduction_background_image___localFile___ctimeMs
  data___introduction_background_image___localFile___dev
  data___introduction_background_image___localFile___dir
  data___introduction_background_image___localFile___ext
  data___introduction_background_image___localFile___extension
  data___introduction_background_image___localFile___gid
  data___introduction_background_image___localFile___id
  data___introduction_background_image___localFile___ino
  data___introduction_background_image___localFile___mode
  data___introduction_background_image___localFile___modifiedTime
  data___introduction_background_image___localFile___mtime
  data___introduction_background_image___localFile___mtimeMs
  data___introduction_background_image___localFile___name
  data___introduction_background_image___localFile___nlink
  data___introduction_background_image___localFile___prettySize
  data___introduction_background_image___localFile___publicURL
  data___introduction_background_image___localFile___rdev
  data___introduction_background_image___localFile___relativeDirectory
  data___introduction_background_image___localFile___relativePath
  data___introduction_background_image___localFile___root
  data___introduction_background_image___localFile___size
  data___introduction_background_image___localFile___sourceInstanceName
  data___introduction_background_image___localFile___uid
  data___introduction_background_image___localFile___url
  data___introduction_background_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___alt
  data___introduction_opengraph_image___copyright
  data___introduction_opengraph_image___dimensions___height
  data___introduction_opengraph_image___dimensions___width
  data___introduction_opengraph_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image___localFile___absolutePath
  data___introduction_opengraph_image___localFile___accessTime
  data___introduction_opengraph_image___localFile___atime
  data___introduction_opengraph_image___localFile___atimeMs
  data___introduction_opengraph_image___localFile___base
  data___introduction_opengraph_image___localFile___birthTime
  data___introduction_opengraph_image___localFile___birthtime
  data___introduction_opengraph_image___localFile___birthtimeMs
  data___introduction_opengraph_image___localFile___blksize
  data___introduction_opengraph_image___localFile___blocks
  data___introduction_opengraph_image___localFile___changeTime
  data___introduction_opengraph_image___localFile___children
  data___introduction_opengraph_image___localFile___childrenImageSharp
  data___introduction_opengraph_image___localFile___childrenLokaliseTranslation
  data___introduction_opengraph_image___localFile___ctime
  data___introduction_opengraph_image___localFile___ctimeMs
  data___introduction_opengraph_image___localFile___dev
  data___introduction_opengraph_image___localFile___dir
  data___introduction_opengraph_image___localFile___ext
  data___introduction_opengraph_image___localFile___extension
  data___introduction_opengraph_image___localFile___gid
  data___introduction_opengraph_image___localFile___id
  data___introduction_opengraph_image___localFile___ino
  data___introduction_opengraph_image___localFile___mode
  data___introduction_opengraph_image___localFile___modifiedTime
  data___introduction_opengraph_image___localFile___mtime
  data___introduction_opengraph_image___localFile___mtimeMs
  data___introduction_opengraph_image___localFile___name
  data___introduction_opengraph_image___localFile___nlink
  data___introduction_opengraph_image___localFile___prettySize
  data___introduction_opengraph_image___localFile___publicURL
  data___introduction_opengraph_image___localFile___rdev
  data___introduction_opengraph_image___localFile___relativeDirectory
  data___introduction_opengraph_image___localFile___relativePath
  data___introduction_opengraph_image___localFile___root
  data___introduction_opengraph_image___localFile___size
  data___introduction_opengraph_image___localFile___sourceInstanceName
  data___introduction_opengraph_image___localFile___uid
  data___introduction_opengraph_image___localFile___url
  data___introduction_opengraph_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___introduction_opengraph_image_link
  data___introduction_page_description
  data___introduction_page_title
  data___introduction_title___html
  data___introduction_title___raw
  data___introduction_title___richText
  data___introduction_title___text
  data___main_opengraph_image___alt
  data___main_opengraph_image___copyright
  data___main_opengraph_image___dimensions___height
  data___main_opengraph_image___dimensions___width
  data___main_opengraph_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image___localFile___absolutePath
  data___main_opengraph_image___localFile___accessTime
  data___main_opengraph_image___localFile___atime
  data___main_opengraph_image___localFile___atimeMs
  data___main_opengraph_image___localFile___base
  data___main_opengraph_image___localFile___birthTime
  data___main_opengraph_image___localFile___birthtime
  data___main_opengraph_image___localFile___birthtimeMs
  data___main_opengraph_image___localFile___blksize
  data___main_opengraph_image___localFile___blocks
  data___main_opengraph_image___localFile___changeTime
  data___main_opengraph_image___localFile___children
  data___main_opengraph_image___localFile___childrenImageSharp
  data___main_opengraph_image___localFile___childrenLokaliseTranslation
  data___main_opengraph_image___localFile___ctime
  data___main_opengraph_image___localFile___ctimeMs
  data___main_opengraph_image___localFile___dev
  data___main_opengraph_image___localFile___dir
  data___main_opengraph_image___localFile___ext
  data___main_opengraph_image___localFile___extension
  data___main_opengraph_image___localFile___gid
  data___main_opengraph_image___localFile___id
  data___main_opengraph_image___localFile___ino
  data___main_opengraph_image___localFile___mode
  data___main_opengraph_image___localFile___modifiedTime
  data___main_opengraph_image___localFile___mtime
  data___main_opengraph_image___localFile___mtimeMs
  data___main_opengraph_image___localFile___name
  data___main_opengraph_image___localFile___nlink
  data___main_opengraph_image___localFile___prettySize
  data___main_opengraph_image___localFile___publicURL
  data___main_opengraph_image___localFile___rdev
  data___main_opengraph_image___localFile___relativeDirectory
  data___main_opengraph_image___localFile___relativePath
  data___main_opengraph_image___localFile___root
  data___main_opengraph_image___localFile___size
  data___main_opengraph_image___localFile___sourceInstanceName
  data___main_opengraph_image___localFile___uid
  data___main_opengraph_image___localFile___url
  data___main_opengraph_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_opengraph_image_link
  data___main_page_description
  data___main_page_title
  data___one_link
  data___one_link_button_text
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicGlobalContentsFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicGlobalContentsDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicGlobalContentsGroupConnection {
  distinct(field: PrismicGlobalContentsFieldsEnum!): [String!]!
  edges: [PrismicGlobalContentsEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicGlobalContentsFieldsEnum!, limit: Int, skip: Int): [PrismicGlobalContentsGroupConnection!]!
  max(field: PrismicGlobalContentsFieldsEnum!): Float
  min(field: PrismicGlobalContentsFieldsEnum!): Float
  nodes: [PrismicGlobalContents!]!
  pageInfo: PageInfo!
  sum(field: PrismicGlobalContentsFieldsEnum!): Float
  totalCount: Int!
}

input PrismicGlobalContentsSortInput {
  fields: [PrismicGlobalContentsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicImageDimensionsType {
  height: Int!
  width: Int!
}

input PrismicImageDimensionsTypeFilterInput {
  height: IntQueryOperatorInput
  width: IntQueryOperatorInput
}

type PrismicImageFixedType {
  base64: String
  height: Int
  src: String
  srcSet: String
  srcSetWebp: String
  srcWebp: String
  width: Int
}

type PrismicImageFluidType {
  aspectRatio: Float
  base64: String
  sizes: String
  src: String
  srcSet: String
  srcSetWebp: String
  srcWebp: String
}

type PrismicImageThumbnailType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicImageThumbnailTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicIr implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicIrDataType!
  dataRaw: JSON!
  first_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicIrConnection {
  distinct(field: PrismicIrFieldsEnum!): [String!]!
  edges: [PrismicIrEdge!]!
  group(field: PrismicIrFieldsEnum!, limit: Int, skip: Int): [PrismicIrGroupConnection!]!
  max(field: PrismicIrFieldsEnum!): Float
  min(field: PrismicIrFieldsEnum!): Float
  nodes: [PrismicIr!]!
  pageInfo: PageInfo!
  sum(field: PrismicIrFieldsEnum!): Float
  totalCount: Int!
}

type PrismicIrDataAttachmentGroup {
  file: PrismicLinkType
}

input PrismicIrDataAttachmentGroupFilterInput {
  file: PrismicLinkTypeFilterInput
}

input PrismicIrDataAttachmentGroupFilterListInput {
  elemMatch: PrismicIrDataAttachmentGroupFilterInput
}

type PrismicIrDataBodyMainText implements PrismicSliceType {
  id: ID!
  primary: PrismicIrDataBodyMainTextPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicIrDataBodyMainTextPrimary {
  text: PrismicStructuredTextType
}

union PrismicIrDataBodySlicesType = PrismicIrDataBodyMainText | PrismicIrDataBodySupplementaryText

type PrismicIrDataBodySupplementaryText implements PrismicSliceType {
  id: ID!
  primary: PrismicIrDataBodySupplementaryTextPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicIrDataBodySupplementaryTextPrimary {
  text: PrismicStructuredTextType
}

type PrismicIrDataType {
  attachment_group: [PrismicIrDataAttachmentGroup]
  body: [PrismicIrDataBodySlicesType!]!
  title: PrismicStructuredTextType
}

input PrismicIrDataTypeFilterInput {
  attachment_group: PrismicIrDataAttachmentGroupFilterListInput
  title: PrismicStructuredTextTypeFilterInput
}

type PrismicIrEdge {
  next: PrismicIr
  node: PrismicIr!
  previous: PrismicIr
}

enum PrismicIrFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___attachment_group
  data___attachment_group___file___id
  data___attachment_group___file___isBroken
  data___attachment_group___file___lang
  data___attachment_group___file___link_type
  data___attachment_group___file___raw
  data___attachment_group___file___size
  data___attachment_group___file___slug
  data___attachment_group___file___tags
  data___attachment_group___file___target
  data___attachment_group___file___type
  data___attachment_group___file___uid
  data___attachment_group___file___url
  data___title___html
  data___title___raw
  data___title___richText
  data___title___text
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicIrFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicIrDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicIrGroupConnection {
  distinct(field: PrismicIrFieldsEnum!): [String!]!
  edges: [PrismicIrEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicIrFieldsEnum!, limit: Int, skip: Int): [PrismicIrGroupConnection!]!
  max(field: PrismicIrFieldsEnum!): Float
  min(field: PrismicIrFieldsEnum!): Float
  nodes: [PrismicIr!]!
  pageInfo: PageInfo!
  sum(field: PrismicIrFieldsEnum!): Float
  totalCount: Int!
}

input PrismicIrSortInput {
  fields: [PrismicIrFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicLinkType {
  document: PrismicAllDocumentTypes
  id: ID
  isBroken: Boolean
  lang: String
  link_type: PrismicLinkTypeEnum
  localFile: File
  raw: JSON
  size: Int
  slug: String
  tags: [String]
  target: String
  type: String
  uid: String
  url: String
}

enum PrismicLinkTypeEnum {
  Any
  Document
  Media
  Web
}

input PrismicLinkTypeEnumQueryOperatorInput {
  eq: PrismicLinkTypeEnum
  in: [PrismicLinkTypeEnum]
  ne: PrismicLinkTypeEnum
  nin: [PrismicLinkTypeEnum]
}

input PrismicLinkTypeFilterInput {
  id: IDQueryOperatorInput
  isBroken: BooleanQueryOperatorInput
  lang: StringQueryOperatorInput
  link_type: PrismicLinkTypeEnumQueryOperatorInput
  localFile: FileFilterInput
  raw: JSONQueryOperatorInput
  size: IntQueryOperatorInput
  slug: StringQueryOperatorInput
  tags: StringQueryOperatorInput
  target: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicMemberProfile implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicMemberProfileDataType!
  dataRaw: JSON!
  first_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicMemberProfileConnection {
  distinct(field: PrismicMemberProfileFieldsEnum!): [String!]!
  edges: [PrismicMemberProfileEdge!]!
  group(field: PrismicMemberProfileFieldsEnum!, limit: Int, skip: Int): [PrismicMemberProfileGroupConnection!]!
  max(field: PrismicMemberProfileFieldsEnum!): Float
  min(field: PrismicMemberProfileFieldsEnum!): Float
  nodes: [PrismicMemberProfile!]!
  pageInfo: PageInfo!
  sum(field: PrismicMemberProfileFieldsEnum!): Float
  totalCount: Int!
}

type PrismicMemberProfileDataImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicMemberProfileDataImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicMemberProfileDataType {
  email: String
  image: PrismicMemberProfileDataImageImageType
  name: String
  nickname: String
  role: String
}

input PrismicMemberProfileDataTypeFilterInput {
  email: StringQueryOperatorInput
  image: PrismicMemberProfileDataImageImageTypeFilterInput
  name: StringQueryOperatorInput
  nickname: StringQueryOperatorInput
  role: StringQueryOperatorInput
}

type PrismicMemberProfileEdge {
  next: PrismicMemberProfile
  node: PrismicMemberProfile!
  previous: PrismicMemberProfile
}

enum PrismicMemberProfileFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___email
  data___image___alt
  data___image___copyright
  data___image___dimensions___height
  data___image___dimensions___width
  data___image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image___localFile___absolutePath
  data___image___localFile___accessTime
  data___image___localFile___atime
  data___image___localFile___atimeMs
  data___image___localFile___base
  data___image___localFile___birthTime
  data___image___localFile___birthtime
  data___image___localFile___birthtimeMs
  data___image___localFile___blksize
  data___image___localFile___blocks
  data___image___localFile___changeTime
  data___image___localFile___children
  data___image___localFile___childrenImageSharp
  data___image___localFile___childrenLokaliseTranslation
  data___image___localFile___ctime
  data___image___localFile___ctimeMs
  data___image___localFile___dev
  data___image___localFile___dir
  data___image___localFile___ext
  data___image___localFile___extension
  data___image___localFile___gid
  data___image___localFile___id
  data___image___localFile___ino
  data___image___localFile___mode
  data___image___localFile___modifiedTime
  data___image___localFile___mtime
  data___image___localFile___mtimeMs
  data___image___localFile___name
  data___image___localFile___nlink
  data___image___localFile___prettySize
  data___image___localFile___publicURL
  data___image___localFile___rdev
  data___image___localFile___relativeDirectory
  data___image___localFile___relativePath
  data___image___localFile___root
  data___image___localFile___size
  data___image___localFile___sourceInstanceName
  data___image___localFile___uid
  data___image___localFile___url
  data___image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___name
  data___nickname
  data___role
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicMemberProfileFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicMemberProfileDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicMemberProfileGroupConnection {
  distinct(field: PrismicMemberProfileFieldsEnum!): [String!]!
  edges: [PrismicMemberProfileEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicMemberProfileFieldsEnum!, limit: Int, skip: Int): [PrismicMemberProfileGroupConnection!]!
  max(field: PrismicMemberProfileFieldsEnum!): Float
  min(field: PrismicMemberProfileFieldsEnum!): Float
  nodes: [PrismicMemberProfile!]!
  pageInfo: PageInfo!
  sum(field: PrismicMemberProfileFieldsEnum!): Float
  totalCount: Int!
}

input PrismicMemberProfileSortInput {
  fields: [PrismicMemberProfileFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicPayContents implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicPayContentsDataType!
  dataRaw: JSON!
  first_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicPayContentsConnection {
  distinct(field: PrismicPayContentsFieldsEnum!): [String!]!
  edges: [PrismicPayContentsEdge!]!
  group(field: PrismicPayContentsFieldsEnum!, limit: Int, skip: Int): [PrismicPayContentsGroupConnection!]!
  max(field: PrismicPayContentsFieldsEnum!): Float
  min(field: PrismicPayContentsFieldsEnum!): Float
  nodes: [PrismicPayContents!]!
  pageInfo: PageInfo!
  sum(field: PrismicPayContentsFieldsEnum!): Float
  totalCount: Int!
}

type PrismicPayContentsDataBodyHero implements PrismicSliceType {
  id: ID!
  primary: PrismicPayContentsDataBodyHeroPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicPayContentsDataBodyHeroPrimary {
  image: PrismicPayContentsDataBodyHeroPrimaryImageImageType
}

type PrismicPayContentsDataBodyHeroPrimaryImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

union PrismicPayContentsDataBodySlicesType = PrismicPayContentsDataBodyHero | PrismicPayContentsDataBodyTitleAndDescription | PrismicPayContentsDataBodyTitleAndIllustration | PrismicPayContentsDataBodyWideBanner

type PrismicPayContentsDataBodyTitleAndDescription implements PrismicSliceType {
  id: ID!
  primary: PrismicPayContentsDataBodyTitleAndDescriptionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicPayContentsDataBodyTitleAndDescriptionPrimary {
  description: PrismicStructuredTextType
  inverted: Boolean
  key_text: String
  link: PrismicLinkType
  link_text: String
  title: PrismicStructuredTextType
}

type PrismicPayContentsDataBodyTitleAndIllustration implements PrismicSliceType {
  id: ID!
  primary: PrismicPayContentsDataBodyTitleAndIllustrationPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicPayContentsDataBodyTitleAndIllustrationPrimary {
  illustration: PrismicPayContentsDataBodyTitleAndIllustrationPrimaryIllustrationImageType
  inverted: Boolean
  key_text: String
  link: PrismicLinkType
  link_text: String
  sub_title: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

type PrismicPayContentsDataBodyTitleAndIllustrationPrimaryIllustrationImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicPayContentsDataBodyWideBanner implements PrismicSliceType {
  id: ID!
  primary: PrismicPayContentsDataBodyWideBannerPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicPayContentsDataBodyWideBannerPrimary {
  background_color: String
  link: PrismicLinkType
  link_text: String
  thumbnail: PrismicPayContentsDataBodyWideBannerPrimaryThumbnailImageType
  title: PrismicStructuredTextType
}

type PrismicPayContentsDataBodyWideBannerPrimaryThumbnailImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicPayContentsDataLogoIconImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicPayContentsDataLogoIconImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicPayContentsDataType {
  body: [PrismicPayContentsDataBodySlicesType!]!
  logo_icon: PrismicPayContentsDataLogoIconImageType
}

input PrismicPayContentsDataTypeFilterInput {
  logo_icon: PrismicPayContentsDataLogoIconImageTypeFilterInput
}

type PrismicPayContentsEdge {
  next: PrismicPayContents
  node: PrismicPayContents!
  previous: PrismicPayContents
}

enum PrismicPayContentsFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___logo_icon___alt
  data___logo_icon___copyright
  data___logo_icon___dimensions___height
  data___logo_icon___dimensions___width
  data___logo_icon___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___logo_icon___localFile___absolutePath
  data___logo_icon___localFile___accessTime
  data___logo_icon___localFile___atime
  data___logo_icon___localFile___atimeMs
  data___logo_icon___localFile___base
  data___logo_icon___localFile___birthTime
  data___logo_icon___localFile___birthtime
  data___logo_icon___localFile___birthtimeMs
  data___logo_icon___localFile___blksize
  data___logo_icon___localFile___blocks
  data___logo_icon___localFile___changeTime
  data___logo_icon___localFile___children
  data___logo_icon___localFile___childrenImageSharp
  data___logo_icon___localFile___childrenLokaliseTranslation
  data___logo_icon___localFile___ctime
  data___logo_icon___localFile___ctimeMs
  data___logo_icon___localFile___dev
  data___logo_icon___localFile___dir
  data___logo_icon___localFile___ext
  data___logo_icon___localFile___extension
  data___logo_icon___localFile___gid
  data___logo_icon___localFile___id
  data___logo_icon___localFile___ino
  data___logo_icon___localFile___mode
  data___logo_icon___localFile___modifiedTime
  data___logo_icon___localFile___mtime
  data___logo_icon___localFile___mtimeMs
  data___logo_icon___localFile___name
  data___logo_icon___localFile___nlink
  data___logo_icon___localFile___prettySize
  data___logo_icon___localFile___publicURL
  data___logo_icon___localFile___rdev
  data___logo_icon___localFile___relativeDirectory
  data___logo_icon___localFile___relativePath
  data___logo_icon___localFile___root
  data___logo_icon___localFile___size
  data___logo_icon___localFile___sourceInstanceName
  data___logo_icon___localFile___uid
  data___logo_icon___localFile___url
  data___logo_icon___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicPayContentsFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicPayContentsDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicPayContentsGroupConnection {
  distinct(field: PrismicPayContentsFieldsEnum!): [String!]!
  edges: [PrismicPayContentsEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicPayContentsFieldsEnum!, limit: Int, skip: Int): [PrismicPayContentsGroupConnection!]!
  max(field: PrismicPayContentsFieldsEnum!): Float
  min(field: PrismicPayContentsFieldsEnum!): Float
  nodes: [PrismicPayContents!]!
  pageInfo: PageInfo!
  sum(field: PrismicPayContentsFieldsEnum!): Float
  totalCount: Int!
}

input PrismicPayContentsSortInput {
  fields: [PrismicPayContentsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

interface PrismicSharedSliceType {
  id: ID!
  slice_label: String
  slice_type: String!
  variation: String!
  version: String!
}

type PrismicSiteNavigation implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicSiteNavigationDataType!
  dataRaw: JSON!
  first_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicSiteNavigationConnection {
  distinct(field: PrismicSiteNavigationFieldsEnum!): [String!]!
  edges: [PrismicSiteNavigationEdge!]!
  group(field: PrismicSiteNavigationFieldsEnum!, limit: Int, skip: Int): [PrismicSiteNavigationGroupConnection!]!
  max(field: PrismicSiteNavigationFieldsEnum!): Float
  min(field: PrismicSiteNavigationFieldsEnum!): Float
  nodes: [PrismicSiteNavigation!]!
  pageInfo: PageInfo!
  sum(field: PrismicSiteNavigationFieldsEnum!): Float
  totalCount: Int!
}

type PrismicSiteNavigationDataContactGroup {
  contact_info: PrismicStructuredTextType
}

input PrismicSiteNavigationDataContactGroupFilterInput {
  contact_info: PrismicStructuredTextTypeFilterInput
}

input PrismicSiteNavigationDataContactGroupFilterListInput {
  elemMatch: PrismicSiteNavigationDataContactGroupFilterInput
}

type PrismicSiteNavigationDataFooterEntries {
  display_text: String
  group: String
  link: PrismicLinkType
  new_tab: Boolean
}

input PrismicSiteNavigationDataFooterEntriesFilterInput {
  display_text: StringQueryOperatorInput
  group: StringQueryOperatorInput
  link: PrismicLinkTypeFilterInput
  new_tab: BooleanQueryOperatorInput
}

input PrismicSiteNavigationDataFooterEntriesFilterListInput {
  elemMatch: PrismicSiteNavigationDataFooterEntriesFilterInput
}

type PrismicSiteNavigationDataHeaderEntries {
  display_text: String
  group: String
  link: PrismicLinkType
  new_tab: Boolean
}

input PrismicSiteNavigationDataHeaderEntriesFilterInput {
  display_text: StringQueryOperatorInput
  group: StringQueryOperatorInput
  link: PrismicLinkTypeFilterInput
  new_tab: BooleanQueryOperatorInput
}

input PrismicSiteNavigationDataHeaderEntriesFilterListInput {
  elemMatch: PrismicSiteNavigationDataHeaderEntriesFilterInput
}

type PrismicSiteNavigationDataSnsProfiles {
  link: PrismicLinkType
  service: String
}

input PrismicSiteNavigationDataSnsProfilesFilterInput {
  link: PrismicLinkTypeFilterInput
  service: StringQueryOperatorInput
}

input PrismicSiteNavigationDataSnsProfilesFilterListInput {
  elemMatch: PrismicSiteNavigationDataSnsProfilesFilterInput
}

type PrismicSiteNavigationDataType {
  address: PrismicStructuredTextType
  contact_group: [PrismicSiteNavigationDataContactGroup]
  copyright: PrismicStructuredTextType
  email: PrismicStructuredTextType
  footer_entries: [PrismicSiteNavigationDataFooterEntries]
  header_entries: [PrismicSiteNavigationDataHeaderEntries]
  sns_profiles: [PrismicSiteNavigationDataSnsProfiles]
  tel: PrismicStructuredTextType
}

input PrismicSiteNavigationDataTypeFilterInput {
  address: PrismicStructuredTextTypeFilterInput
  contact_group: PrismicSiteNavigationDataContactGroupFilterListInput
  copyright: PrismicStructuredTextTypeFilterInput
  email: PrismicStructuredTextTypeFilterInput
  footer_entries: PrismicSiteNavigationDataFooterEntriesFilterListInput
  header_entries: PrismicSiteNavigationDataHeaderEntriesFilterListInput
  sns_profiles: PrismicSiteNavigationDataSnsProfilesFilterListInput
  tel: PrismicStructuredTextTypeFilterInput
}

type PrismicSiteNavigationEdge {
  next: PrismicSiteNavigation
  node: PrismicSiteNavigation!
  previous: PrismicSiteNavigation
}

enum PrismicSiteNavigationFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___address___html
  data___address___raw
  data___address___richText
  data___address___text
  data___contact_group
  data___contact_group___contact_info___html
  data___contact_group___contact_info___raw
  data___contact_group___contact_info___richText
  data___contact_group___contact_info___text
  data___copyright___html
  data___copyright___raw
  data___copyright___richText
  data___copyright___text
  data___email___html
  data___email___raw
  data___email___richText
  data___email___text
  data___footer_entries
  data___footer_entries___display_text
  data___footer_entries___group
  data___footer_entries___link___id
  data___footer_entries___link___isBroken
  data___footer_entries___link___lang
  data___footer_entries___link___link_type
  data___footer_entries___link___raw
  data___footer_entries___link___size
  data___footer_entries___link___slug
  data___footer_entries___link___tags
  data___footer_entries___link___target
  data___footer_entries___link___type
  data___footer_entries___link___uid
  data___footer_entries___link___url
  data___footer_entries___new_tab
  data___header_entries
  data___header_entries___display_text
  data___header_entries___group
  data___header_entries___link___id
  data___header_entries___link___isBroken
  data___header_entries___link___lang
  data___header_entries___link___link_type
  data___header_entries___link___raw
  data___header_entries___link___size
  data___header_entries___link___slug
  data___header_entries___link___tags
  data___header_entries___link___target
  data___header_entries___link___type
  data___header_entries___link___uid
  data___header_entries___link___url
  data___header_entries___new_tab
  data___sns_profiles
  data___sns_profiles___link___id
  data___sns_profiles___link___isBroken
  data___sns_profiles___link___lang
  data___sns_profiles___link___link_type
  data___sns_profiles___link___raw
  data___sns_profiles___link___size
  data___sns_profiles___link___slug
  data___sns_profiles___link___tags
  data___sns_profiles___link___target
  data___sns_profiles___link___type
  data___sns_profiles___link___uid
  data___sns_profiles___link___url
  data___sns_profiles___service
  data___tel___html
  data___tel___raw
  data___tel___richText
  data___tel___text
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicSiteNavigationFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicSiteNavigationDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicSiteNavigationGroupConnection {
  distinct(field: PrismicSiteNavigationFieldsEnum!): [String!]!
  edges: [PrismicSiteNavigationEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicSiteNavigationFieldsEnum!, limit: Int, skip: Int): [PrismicSiteNavigationGroupConnection!]!
  max(field: PrismicSiteNavigationFieldsEnum!): Float
  min(field: PrismicSiteNavigationFieldsEnum!): Float
  nodes: [PrismicSiteNavigation!]!
  pageInfo: PageInfo!
  sum(field: PrismicSiteNavigationFieldsEnum!): Float
  totalCount: Int!
}

input PrismicSiteNavigationSortInput {
  fields: [PrismicSiteNavigationFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

interface PrismicSliceType {
  id: ID!
  slice_label: String
  slice_type: String!
}

# Text content with rich formatting capabilities using a Prismic format called Structured Text.
scalar PrismicStructuredText

input PrismicStructuredTextQueryOperatorInput {
  eq: PrismicStructuredText
  in: [PrismicStructuredText]
  ne: PrismicStructuredText
  nin: [PrismicStructuredText]
}

type PrismicStructuredTextType {
  html: String
  raw: PrismicStructuredText! @deprecated(reason: "This field has been renamed to `richText`. The `richText` field has the same value the `raw` field.")
  richText: PrismicStructuredText!
  text: String
}

input PrismicStructuredTextTypeFilterInput {
  html: StringQueryOperatorInput
  raw: PrismicStructuredTextQueryOperatorInput
  richText: PrismicStructuredTextQueryOperatorInput
  text: StringQueryOperatorInput
}

type PrismicTeamBanner implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicTeamBannerDataType!
  dataRaw: JSON!
  first_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicTeamBannerConnection {
  distinct(field: PrismicTeamBannerFieldsEnum!): [String!]!
  edges: [PrismicTeamBannerEdge!]!
  group(field: PrismicTeamBannerFieldsEnum!, limit: Int, skip: Int): [PrismicTeamBannerGroupConnection!]!
  max(field: PrismicTeamBannerFieldsEnum!): Float
  min(field: PrismicTeamBannerFieldsEnum!): Float
  nodes: [PrismicTeamBanner!]!
  pageInfo: PageInfo!
  sum(field: PrismicTeamBannerFieldsEnum!): Float
  totalCount: Int!
}

type PrismicTeamBannerDataImage360ImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicTeamBannerDataImage360ImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicTeamBannerDataImage576ImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicTeamBannerDataImage576ImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicTeamBannerDataImage768ImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicTeamBannerDataImage768ImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicTeamBannerDataType {
  background_color: String
  href: PrismicLinkType
  image_360: PrismicTeamBannerDataImage360ImageType
  image_576: PrismicTeamBannerDataImage576ImageType
  image_768: PrismicTeamBannerDataImage768ImageType
}

input PrismicTeamBannerDataTypeFilterInput {
  background_color: StringQueryOperatorInput
  href: PrismicLinkTypeFilterInput
  image_360: PrismicTeamBannerDataImage360ImageTypeFilterInput
  image_576: PrismicTeamBannerDataImage576ImageTypeFilterInput
  image_768: PrismicTeamBannerDataImage768ImageTypeFilterInput
}

type PrismicTeamBannerEdge {
  next: PrismicTeamBanner
  node: PrismicTeamBanner!
  previous: PrismicTeamBanner
}

enum PrismicTeamBannerFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___background_color
  data___href___id
  data___href___isBroken
  data___href___lang
  data___href___link_type
  data___href___localFile___absolutePath
  data___href___localFile___accessTime
  data___href___localFile___atime
  data___href___localFile___atimeMs
  data___href___localFile___base
  data___href___localFile___birthTime
  data___href___localFile___birthtime
  data___href___localFile___birthtimeMs
  data___href___localFile___blksize
  data___href___localFile___blocks
  data___href___localFile___changeTime
  data___href___localFile___children
  data___href___localFile___childrenImageSharp
  data___href___localFile___childrenLokaliseTranslation
  data___href___localFile___ctime
  data___href___localFile___ctimeMs
  data___href___localFile___dev
  data___href___localFile___dir
  data___href___localFile___ext
  data___href___localFile___extension
  data___href___localFile___gid
  data___href___localFile___id
  data___href___localFile___ino
  data___href___localFile___mode
  data___href___localFile___modifiedTime
  data___href___localFile___mtime
  data___href___localFile___mtimeMs
  data___href___localFile___name
  data___href___localFile___nlink
  data___href___localFile___prettySize
  data___href___localFile___publicURL
  data___href___localFile___rdev
  data___href___localFile___relativeDirectory
  data___href___localFile___relativePath
  data___href___localFile___root
  data___href___localFile___size
  data___href___localFile___sourceInstanceName
  data___href___localFile___uid
  data___href___localFile___url
  data___href___raw
  data___href___size
  data___href___slug
  data___href___tags
  data___href___target
  data___href___type
  data___href___uid
  data___href___url
  data___image_360___alt
  data___image_360___copyright
  data___image_360___dimensions___height
  data___image_360___dimensions___width
  data___image_360___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_360___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_360___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_360___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_360___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_360___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_360___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_360___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_360___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_360___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_360___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_360___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_360___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_360___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_360___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_360___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_360___localFile___absolutePath
  data___image_360___localFile___accessTime
  data___image_360___localFile___atime
  data___image_360___localFile___atimeMs
  data___image_360___localFile___base
  data___image_360___localFile___birthTime
  data___image_360___localFile___birthtime
  data___image_360___localFile___birthtimeMs
  data___image_360___localFile___blksize
  data___image_360___localFile___blocks
  data___image_360___localFile___changeTime
  data___image_360___localFile___children
  data___image_360___localFile___childrenImageSharp
  data___image_360___localFile___childrenLokaliseTranslation
  data___image_360___localFile___ctime
  data___image_360___localFile___ctimeMs
  data___image_360___localFile___dev
  data___image_360___localFile___dir
  data___image_360___localFile___ext
  data___image_360___localFile___extension
  data___image_360___localFile___gid
  data___image_360___localFile___id
  data___image_360___localFile___ino
  data___image_360___localFile___mode
  data___image_360___localFile___modifiedTime
  data___image_360___localFile___mtime
  data___image_360___localFile___mtimeMs
  data___image_360___localFile___name
  data___image_360___localFile___nlink
  data___image_360___localFile___prettySize
  data___image_360___localFile___publicURL
  data___image_360___localFile___rdev
  data___image_360___localFile___relativeDirectory
  data___image_360___localFile___relativePath
  data___image_360___localFile___root
  data___image_360___localFile___size
  data___image_360___localFile___sourceInstanceName
  data___image_360___localFile___uid
  data___image_360___localFile___url
  data___image_360___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___alt
  data___image_576___copyright
  data___image_576___dimensions___height
  data___image_576___dimensions___width
  data___image_576___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_576___localFile___absolutePath
  data___image_576___localFile___accessTime
  data___image_576___localFile___atime
  data___image_576___localFile___atimeMs
  data___image_576___localFile___base
  data___image_576___localFile___birthTime
  data___image_576___localFile___birthtime
  data___image_576___localFile___birthtimeMs
  data___image_576___localFile___blksize
  data___image_576___localFile___blocks
  data___image_576___localFile___changeTime
  data___image_576___localFile___children
  data___image_576___localFile___childrenImageSharp
  data___image_576___localFile___childrenLokaliseTranslation
  data___image_576___localFile___ctime
  data___image_576___localFile___ctimeMs
  data___image_576___localFile___dev
  data___image_576___localFile___dir
  data___image_576___localFile___ext
  data___image_576___localFile___extension
  data___image_576___localFile___gid
  data___image_576___localFile___id
  data___image_576___localFile___ino
  data___image_576___localFile___mode
  data___image_576___localFile___modifiedTime
  data___image_576___localFile___mtime
  data___image_576___localFile___mtimeMs
  data___image_576___localFile___name
  data___image_576___localFile___nlink
  data___image_576___localFile___prettySize
  data___image_576___localFile___publicURL
  data___image_576___localFile___rdev
  data___image_576___localFile___relativeDirectory
  data___image_576___localFile___relativePath
  data___image_576___localFile___root
  data___image_576___localFile___size
  data___image_576___localFile___sourceInstanceName
  data___image_576___localFile___uid
  data___image_576___localFile___url
  data___image_576___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___alt
  data___image_768___copyright
  data___image_768___dimensions___height
  data___image_768___dimensions___width
  data___image_768___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___image_768___localFile___absolutePath
  data___image_768___localFile___accessTime
  data___image_768___localFile___atime
  data___image_768___localFile___atimeMs
  data___image_768___localFile___base
  data___image_768___localFile___birthTime
  data___image_768___localFile___birthtime
  data___image_768___localFile___birthtimeMs
  data___image_768___localFile___blksize
  data___image_768___localFile___blocks
  data___image_768___localFile___changeTime
  data___image_768___localFile___children
  data___image_768___localFile___childrenImageSharp
  data___image_768___localFile___childrenLokaliseTranslation
  data___image_768___localFile___ctime
  data___image_768___localFile___ctimeMs
  data___image_768___localFile___dev
  data___image_768___localFile___dir
  data___image_768___localFile___ext
  data___image_768___localFile___extension
  data___image_768___localFile___gid
  data___image_768___localFile___id
  data___image_768___localFile___ino
  data___image_768___localFile___mode
  data___image_768___localFile___modifiedTime
  data___image_768___localFile___mtime
  data___image_768___localFile___mtimeMs
  data___image_768___localFile___name
  data___image_768___localFile___nlink
  data___image_768___localFile___prettySize
  data___image_768___localFile___publicURL
  data___image_768___localFile___rdev
  data___image_768___localFile___relativeDirectory
  data___image_768___localFile___relativePath
  data___image_768___localFile___root
  data___image_768___localFile___size
  data___image_768___localFile___sourceInstanceName
  data___image_768___localFile___uid
  data___image_768___localFile___url
  data___image_768___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicTeamBannerFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicTeamBannerDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicTeamBannerGroupConnection {
  distinct(field: PrismicTeamBannerFieldsEnum!): [String!]!
  edges: [PrismicTeamBannerEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicTeamBannerFieldsEnum!, limit: Int, skip: Int): [PrismicTeamBannerGroupConnection!]!
  max(field: PrismicTeamBannerFieldsEnum!): Float
  min(field: PrismicTeamBannerFieldsEnum!): Float
  nodes: [PrismicTeamBanner!]!
  pageInfo: PageInfo!
  sum(field: PrismicTeamBannerFieldsEnum!): Float
  totalCount: Int!
}

input PrismicTeamBannerSortInput {
  fields: [PrismicTeamBannerFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicTeamContents implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicTeamContentsDataType!
  dataRaw: JSON!
  first_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  url: String
}

type PrismicTeamContentsConnection {
  distinct(field: PrismicTeamContentsFieldsEnum!): [String!]!
  edges: [PrismicTeamContentsEdge!]!
  group(field: PrismicTeamContentsFieldsEnum!, limit: Int, skip: Int): [PrismicTeamContentsGroupConnection!]!
  max(field: PrismicTeamContentsFieldsEnum!): Float
  min(field: PrismicTeamContentsFieldsEnum!): Float
  nodes: [PrismicTeamContents!]!
  pageInfo: PageInfo!
  sum(field: PrismicTeamContentsFieldsEnum!): Float
  totalCount: Int!
}

type PrismicTeamContentsDataCompletedPageLinkGroup {
  display_text: String
  link: PrismicLinkType
}

input PrismicTeamContentsDataCompletedPageLinkGroupFilterInput {
  display_text: StringQueryOperatorInput
  link: PrismicLinkTypeFilterInput
}

input PrismicTeamContentsDataCompletedPageLinkGroupFilterListInput {
  elemMatch: PrismicTeamContentsDataCompletedPageLinkGroupFilterInput
}

type PrismicTeamContentsDataCultureBodyBenefit implements PrismicSliceType {
  id: ID!
  items: [PrismicTeamContentsDataCultureBodyBenefitItem!]!
  primary: PrismicTeamContentsDataCultureBodyBenefitPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataCultureBodyBenefitItem {
  description: PrismicStructuredTextType
  subtext: String
  subtitle: String
}

type PrismicTeamContentsDataCultureBodyBenefitPrimary {
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataCultureBodyDivider implements PrismicSliceType {
  id: ID!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataCultureBodyHowWeWork implements PrismicSliceType {
  id: ID!
  items: [PrismicTeamContentsDataCultureBodyHowWeWorkItem!]!
  primary: PrismicTeamContentsDataCultureBodyHowWeWorkPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataCultureBodyHowWeWorkItem {
  description: PrismicStructuredTextType
  group: String
  key_text: String
}

type PrismicTeamContentsDataCultureBodyHowWeWorkPrimary {
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataCultureBodyIllustrationAndDescription implements PrismicSliceType {
  id: ID!
  primary: PrismicTeamContentsDataCultureBodyIllustrationAndDescriptionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataCultureBodyIllustrationAndDescriptionPrimary {
  description: PrismicStructuredTextType
  expanded: Boolean
  illustration: PrismicTeamContentsDataCultureBodyIllustrationAndDescriptionPrimaryIllustrationImageType
  inverted: Boolean
  link: PrismicLinkType
  link_text: String
}

type PrismicTeamContentsDataCultureBodyIllustrationAndDescriptionPrimaryIllustrationImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicTeamContentsDataCultureBodyKeyVisual implements PrismicSliceType {
  id: ID!
  primary: PrismicTeamContentsDataCultureBodyKeyVisualPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataCultureBodyKeyVisualPrimary {
  description: PrismicStructuredTextType
  expanded: Boolean
  key_visual_image: PrismicTeamContentsDataCultureBodyKeyVisualPrimaryKeyVisualImageImageType
}

type PrismicTeamContentsDataCultureBodyKeyVisualPrimaryKeyVisualImageImageThumbnailsType {
  portrait: PrismicImageThumbnailType
}

type PrismicTeamContentsDataCultureBodyKeyVisualPrimaryKeyVisualImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File
  thumbnails: PrismicTeamContentsDataCultureBodyKeyVisualPrimaryKeyVisualImageImageThumbnailsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicTeamContentsDataCultureBodyMemberQuoteCarousel implements PrismicSliceType {
  id: ID!
  items: [PrismicTeamContentsDataCultureBodyMemberQuoteCarouselItem!]!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataCultureBodyMemberQuoteCarouselItem {
  image: PrismicTeamContentsDataCultureBodyMemberQuoteCarouselItemsImageImageType
  quote: String
  who: String
}

type PrismicTeamContentsDataCultureBodyMemberQuoteCarouselItemsImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

union PrismicTeamContentsDataCultureBodySlicesType = PrismicTeamContentsDataCultureBodyBenefit | PrismicTeamContentsDataCultureBodyDivider | PrismicTeamContentsDataCultureBodyHowWeWork | PrismicTeamContentsDataCultureBodyIllustrationAndDescription | PrismicTeamContentsDataCultureBodyKeyVisual | PrismicTeamContentsDataCultureBodyMemberQuoteCarousel | PrismicTeamContentsDataCultureBodyTitleAndDescription | PrismicTeamContentsDataCultureBodyTitleAndIllustration | PrismicTeamContentsDataCultureBodyWideBanner

type PrismicTeamContentsDataCultureBodyTitleAndDescription implements PrismicSliceType {
  id: ID!
  primary: PrismicTeamContentsDataCultureBodyTitleAndDescriptionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataCultureBodyTitleAndDescriptionPrimary {
  description: PrismicStructuredTextType
  inverted: Boolean
  key_text: String
  link: PrismicLinkType
  link_text: String
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataCultureBodyTitleAndIllustration implements PrismicSliceType {
  id: ID!
  primary: PrismicTeamContentsDataCultureBodyTitleAndIllustrationPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataCultureBodyTitleAndIllustrationPrimary {
  illustration: PrismicTeamContentsDataCultureBodyTitleAndIllustrationPrimaryIllustrationImageType
  inverted: Boolean
  key_text: String
  link: PrismicLinkType
  link_text: String
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataCultureBodyTitleAndIllustrationPrimaryIllustrationImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicTeamContentsDataCultureBodyWideBanner implements PrismicSliceType {
  id: ID!
  primary: PrismicTeamContentsDataCultureBodyWideBannerPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataCultureBodyWideBannerPrimary {
  background_color: String
  link: PrismicLinkType
  link_text: String
  thumbnail: PrismicTeamContentsDataCultureBodyWideBannerPrimaryThumbnailImageType
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataCultureBodyWideBannerPrimaryThumbnailImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicTeamContentsDataCulturePageMetaImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicTeamContentsDataCulturePageMetaImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicTeamContentsDataFaqEntries {
  answer: PrismicStructuredTextType
  question: String
}

input PrismicTeamContentsDataFaqEntriesFilterInput {
  answer: PrismicStructuredTextTypeFilterInput
  question: StringQueryOperatorInput
}

input PrismicTeamContentsDataFaqEntriesFilterListInput {
  elemMatch: PrismicTeamContentsDataFaqEntriesFilterInput
}

type PrismicTeamContentsDataFaqPageEntries {
  faq_category_title: String
  faq_page: PrismicLinkType
}

input PrismicTeamContentsDataFaqPageEntriesFilterInput {
  faq_category_title: StringQueryOperatorInput
  faq_page: PrismicLinkTypeFilterInput
}

input PrismicTeamContentsDataFaqPageEntriesFilterListInput {
  elemMatch: PrismicTeamContentsDataFaqPageEntriesFilterInput
}

type PrismicTeamContentsDataJobsPageMetaImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicTeamContentsDataJobsPageMetaImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicTeamContentsDataLifeBodyKeyVisual implements PrismicSliceType {
  id: ID!
  primary: PrismicTeamContentsDataLifeBodyKeyVisualPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataLifeBodyKeyVisualPrimary {
  description: PrismicStructuredTextType
  expanded: Boolean
  key_visual_image: PrismicTeamContentsDataLifeBodyKeyVisualPrimaryKeyVisualImageImageType
}

type PrismicTeamContentsDataLifeBodyKeyVisualPrimaryKeyVisualImageImageThumbnailsType {
  portrait: PrismicImageThumbnailType
}

type PrismicTeamContentsDataLifeBodyKeyVisualPrimaryKeyVisualImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File
  thumbnails: PrismicTeamContentsDataLifeBodyKeyVisualPrimaryKeyVisualImageImageThumbnailsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicTeamContentsDataLifeBodyLifeContent implements PrismicSliceType {
  id: ID!
  items: [PrismicTeamContentsDataLifeBodyLifeContentItem!]!
  primary: PrismicTeamContentsDataLifeBodyLifeContentPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataLifeBodyLifeContentItem {
  thumbnail_description: PrismicStructuredTextType
  thumbnail_image: PrismicTeamContentsDataLifeBodyLifeContentItemsThumbnailImageImageType
}

type PrismicTeamContentsDataLifeBodyLifeContentItemsThumbnailImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicTeamContentsDataLifeBodyLifeContentPrimary {
  body_text: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

union PrismicTeamContentsDataLifeBodySlicesType = PrismicTeamContentsDataLifeBodyKeyVisual | PrismicTeamContentsDataLifeBodyLifeContent

type PrismicTeamContentsDataLifePageMetaImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicTeamContentsDataLifePageMetaImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicTeamContentsDataMainBodyBenefit implements PrismicSliceType {
  id: ID!
  items: [PrismicTeamContentsDataMainBodyBenefitItem!]!
  primary: PrismicTeamContentsDataMainBodyBenefitPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataMainBodyBenefitItem {
  description: PrismicStructuredTextType
  subtext: String
  subtitle: String
}

type PrismicTeamContentsDataMainBodyBenefitPrimary {
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataMainBodyDivider implements PrismicSliceType {
  id: ID!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataMainBodyHowWeWork implements PrismicSliceType {
  id: ID!
  items: [PrismicTeamContentsDataMainBodyHowWeWorkItem!]!
  primary: PrismicTeamContentsDataMainBodyHowWeWorkPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataMainBodyHowWeWorkItem {
  description: PrismicStructuredTextType
  group: String
  key_text: String
}

type PrismicTeamContentsDataMainBodyHowWeWorkPrimary {
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataMainBodyIllustrationAndDescription implements PrismicSliceType {
  id: ID!
  primary: PrismicTeamContentsDataMainBodyIllustrationAndDescriptionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataMainBodyIllustrationAndDescriptionPrimary {
  description: PrismicStructuredTextType
  expanded: Boolean
  illustration: PrismicTeamContentsDataMainBodyIllustrationAndDescriptionPrimaryIllustrationImageType
  inverted: Boolean
  link: PrismicLinkType
  link_text: String
}

type PrismicTeamContentsDataMainBodyIllustrationAndDescriptionPrimaryIllustrationImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicTeamContentsDataMainBodyKeyVisual implements PrismicSliceType {
  id: ID!
  primary: PrismicTeamContentsDataMainBodyKeyVisualPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataMainBodyKeyVisualPrimary {
  description: PrismicStructuredTextType
  expanded: Boolean
  key_visual_image: PrismicTeamContentsDataMainBodyKeyVisualPrimaryKeyVisualImageImageType
}

type PrismicTeamContentsDataMainBodyKeyVisualPrimaryKeyVisualImageImageThumbnailsType {
  portrait: PrismicImageThumbnailType
}

type PrismicTeamContentsDataMainBodyKeyVisualPrimaryKeyVisualImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File
  thumbnails: PrismicTeamContentsDataMainBodyKeyVisualPrimaryKeyVisualImageImageThumbnailsType

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicTeamContentsDataMainBodyMemberQuoteCarousel implements PrismicSliceType {
  id: ID!
  items: [PrismicTeamContentsDataMainBodyMemberQuoteCarouselItem!]!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataMainBodyMemberQuoteCarouselItem {
  image: PrismicTeamContentsDataMainBodyMemberQuoteCarouselItemsImageImageType
  quote: String
  who: String
}

type PrismicTeamContentsDataMainBodyMemberQuoteCarouselItemsImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

union PrismicTeamContentsDataMainBodySlicesType = PrismicTeamContentsDataMainBodyBenefit | PrismicTeamContentsDataMainBodyDivider | PrismicTeamContentsDataMainBodyHowWeWork | PrismicTeamContentsDataMainBodyIllustrationAndDescription | PrismicTeamContentsDataMainBodyKeyVisual | PrismicTeamContentsDataMainBodyMemberQuoteCarousel | PrismicTeamContentsDataMainBodyTitleAndDescription | PrismicTeamContentsDataMainBodyTitleAndIllustration | PrismicTeamContentsDataMainBodyWideBanner

type PrismicTeamContentsDataMainBodyTitleAndDescription implements PrismicSliceType {
  id: ID!
  primary: PrismicTeamContentsDataMainBodyTitleAndDescriptionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataMainBodyTitleAndDescriptionPrimary {
  description: PrismicStructuredTextType
  inverted: Boolean
  key_text: String
  link: PrismicLinkType
  link_text: String
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataMainBodyTitleAndIllustration implements PrismicSliceType {
  id: ID!
  primary: PrismicTeamContentsDataMainBodyTitleAndIllustrationPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataMainBodyTitleAndIllustrationPrimary {
  illustration: PrismicTeamContentsDataMainBodyTitleAndIllustrationPrimaryIllustrationImageType
  inverted: Boolean
  key_text: String
  link: PrismicLinkType
  link_text: String
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataMainBodyTitleAndIllustrationPrimaryIllustrationImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicTeamContentsDataMainBodyWideBanner implements PrismicSliceType {
  id: ID!
  primary: PrismicTeamContentsDataMainBodyWideBannerPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamContentsDataMainBodyWideBannerPrimary {
  background_color: String
  link: PrismicLinkType
  link_text: String
  thumbnail: PrismicTeamContentsDataMainBodyWideBannerPrimaryThumbnailImageType
  title: PrismicStructuredTextType
}

type PrismicTeamContentsDataMainBodyWideBannerPrimaryThumbnailImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicTeamContentsDataMainPageMetaImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicTeamContentsDataMainPageMetaImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicTeamContentsDataNotfoundPageLinkGroup {
  display_text: String
  link: PrismicLinkType
}

input PrismicTeamContentsDataNotfoundPageLinkGroupFilterInput {
  display_text: StringQueryOperatorInput
  link: PrismicLinkTypeFilterInput
}

input PrismicTeamContentsDataNotfoundPageLinkGroupFilterListInput {
  elemMatch: PrismicTeamContentsDataNotfoundPageLinkGroupFilterInput
}

type PrismicTeamContentsDataType {
  completed_page_content: PrismicStructuredTextType
  completed_page_link_group: [PrismicTeamContentsDataCompletedPageLinkGroup]
  culture_body: [PrismicTeamContentsDataCultureBodySlicesType!]!
  culture_page_meta_description: String
  culture_page_meta_image: PrismicTeamContentsDataCulturePageMetaImageImageType
  culture_page_meta_title: String
  culture_page_title: PrismicStructuredTextType
  enable_culture_page: Boolean
  enable_faq_page: Boolean
  enable_life_page: Boolean
  faq_entries: [PrismicTeamContentsDataFaqEntries]
  faq_page_entries: [PrismicTeamContentsDataFaqPageEntries]
  faq_page_meta_description: String
  faq_page_meta_title: String
  faq_page_title: PrismicStructuredTextType
  fb_app_id: String
  jobs_page_meta_description: String
  jobs_page_meta_image: PrismicTeamContentsDataJobsPageMetaImageImageType
  jobs_page_meta_title: String
  jobs_page_title: PrismicStructuredTextType
  life_body: [PrismicTeamContentsDataLifeBodySlicesType!]!
  life_page_meta_description: String
  life_page_meta_image: PrismicTeamContentsDataLifePageMetaImageImageType
  life_page_meta_title: String
  life_page_title: PrismicStructuredTextType
  main_body: [PrismicTeamContentsDataMainBodySlicesType!]!
  main_page_meta_description: String
  main_page_meta_image: PrismicTeamContentsDataMainPageMetaImageImageType
  main_page_meta_title: String
  main_page_title: PrismicStructuredTextType
  notfound_page_link_group: [PrismicTeamContentsDataNotfoundPageLinkGroup]
  notfound_page_title: PrismicStructuredTextType
  twitter_site_handle: String
}

input PrismicTeamContentsDataTypeFilterInput {
  completed_page_content: PrismicStructuredTextTypeFilterInput
  completed_page_link_group: PrismicTeamContentsDataCompletedPageLinkGroupFilterListInput
  culture_page_meta_description: StringQueryOperatorInput
  culture_page_meta_image: PrismicTeamContentsDataCulturePageMetaImageImageTypeFilterInput
  culture_page_meta_title: StringQueryOperatorInput
  culture_page_title: PrismicStructuredTextTypeFilterInput
  enable_culture_page: BooleanQueryOperatorInput
  enable_faq_page: BooleanQueryOperatorInput
  enable_life_page: BooleanQueryOperatorInput
  faq_entries: PrismicTeamContentsDataFaqEntriesFilterListInput
  faq_page_entries: PrismicTeamContentsDataFaqPageEntriesFilterListInput
  faq_page_meta_description: StringQueryOperatorInput
  faq_page_meta_title: StringQueryOperatorInput
  faq_page_title: PrismicStructuredTextTypeFilterInput
  fb_app_id: StringQueryOperatorInput
  jobs_page_meta_description: StringQueryOperatorInput
  jobs_page_meta_image: PrismicTeamContentsDataJobsPageMetaImageImageTypeFilterInput
  jobs_page_meta_title: StringQueryOperatorInput
  jobs_page_title: PrismicStructuredTextTypeFilterInput
  life_page_meta_description: StringQueryOperatorInput
  life_page_meta_image: PrismicTeamContentsDataLifePageMetaImageImageTypeFilterInput
  life_page_meta_title: StringQueryOperatorInput
  life_page_title: PrismicStructuredTextTypeFilterInput
  main_page_meta_description: StringQueryOperatorInput
  main_page_meta_image: PrismicTeamContentsDataMainPageMetaImageImageTypeFilterInput
  main_page_meta_title: StringQueryOperatorInput
  main_page_title: PrismicStructuredTextTypeFilterInput
  notfound_page_link_group: PrismicTeamContentsDataNotfoundPageLinkGroupFilterListInput
  notfound_page_title: PrismicStructuredTextTypeFilterInput
  twitter_site_handle: StringQueryOperatorInput
}

type PrismicTeamContentsEdge {
  next: PrismicTeamContents
  node: PrismicTeamContents!
  previous: PrismicTeamContents
}

enum PrismicTeamContentsFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___completed_page_content___html
  data___completed_page_content___raw
  data___completed_page_content___richText
  data___completed_page_content___text
  data___completed_page_link_group
  data___completed_page_link_group___display_text
  data___completed_page_link_group___link___id
  data___completed_page_link_group___link___isBroken
  data___completed_page_link_group___link___lang
  data___completed_page_link_group___link___link_type
  data___completed_page_link_group___link___raw
  data___completed_page_link_group___link___size
  data___completed_page_link_group___link___slug
  data___completed_page_link_group___link___tags
  data___completed_page_link_group___link___target
  data___completed_page_link_group___link___type
  data___completed_page_link_group___link___uid
  data___completed_page_link_group___link___url
  data___culture_page_meta_description
  data___culture_page_meta_image___alt
  data___culture_page_meta_image___copyright
  data___culture_page_meta_image___dimensions___height
  data___culture_page_meta_image___dimensions___width
  data___culture_page_meta_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_image___localFile___absolutePath
  data___culture_page_meta_image___localFile___accessTime
  data___culture_page_meta_image___localFile___atime
  data___culture_page_meta_image___localFile___atimeMs
  data___culture_page_meta_image___localFile___base
  data___culture_page_meta_image___localFile___birthTime
  data___culture_page_meta_image___localFile___birthtime
  data___culture_page_meta_image___localFile___birthtimeMs
  data___culture_page_meta_image___localFile___blksize
  data___culture_page_meta_image___localFile___blocks
  data___culture_page_meta_image___localFile___changeTime
  data___culture_page_meta_image___localFile___children
  data___culture_page_meta_image___localFile___childrenImageSharp
  data___culture_page_meta_image___localFile___childrenLokaliseTranslation
  data___culture_page_meta_image___localFile___ctime
  data___culture_page_meta_image___localFile___ctimeMs
  data___culture_page_meta_image___localFile___dev
  data___culture_page_meta_image___localFile___dir
  data___culture_page_meta_image___localFile___ext
  data___culture_page_meta_image___localFile___extension
  data___culture_page_meta_image___localFile___gid
  data___culture_page_meta_image___localFile___id
  data___culture_page_meta_image___localFile___ino
  data___culture_page_meta_image___localFile___mode
  data___culture_page_meta_image___localFile___modifiedTime
  data___culture_page_meta_image___localFile___mtime
  data___culture_page_meta_image___localFile___mtimeMs
  data___culture_page_meta_image___localFile___name
  data___culture_page_meta_image___localFile___nlink
  data___culture_page_meta_image___localFile___prettySize
  data___culture_page_meta_image___localFile___publicURL
  data___culture_page_meta_image___localFile___rdev
  data___culture_page_meta_image___localFile___relativeDirectory
  data___culture_page_meta_image___localFile___relativePath
  data___culture_page_meta_image___localFile___root
  data___culture_page_meta_image___localFile___size
  data___culture_page_meta_image___localFile___sourceInstanceName
  data___culture_page_meta_image___localFile___uid
  data___culture_page_meta_image___localFile___url
  data___culture_page_meta_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___culture_page_meta_title
  data___culture_page_title___html
  data___culture_page_title___raw
  data___culture_page_title___richText
  data___culture_page_title___text
  data___enable_culture_page
  data___enable_faq_page
  data___enable_life_page
  data___faq_entries
  data___faq_entries___answer___html
  data___faq_entries___answer___raw
  data___faq_entries___answer___richText
  data___faq_entries___answer___text
  data___faq_entries___question
  data___faq_page_entries
  data___faq_page_entries___faq_category_title
  data___faq_page_entries___faq_page___id
  data___faq_page_entries___faq_page___isBroken
  data___faq_page_entries___faq_page___lang
  data___faq_page_entries___faq_page___link_type
  data___faq_page_entries___faq_page___raw
  data___faq_page_entries___faq_page___size
  data___faq_page_entries___faq_page___slug
  data___faq_page_entries___faq_page___tags
  data___faq_page_entries___faq_page___target
  data___faq_page_entries___faq_page___type
  data___faq_page_entries___faq_page___uid
  data___faq_page_entries___faq_page___url
  data___faq_page_meta_description
  data___faq_page_meta_title
  data___faq_page_title___html
  data___faq_page_title___raw
  data___faq_page_title___richText
  data___faq_page_title___text
  data___fb_app_id
  data___jobs_page_meta_description
  data___jobs_page_meta_image___alt
  data___jobs_page_meta_image___copyright
  data___jobs_page_meta_image___dimensions___height
  data___jobs_page_meta_image___dimensions___width
  data___jobs_page_meta_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_image___localFile___absolutePath
  data___jobs_page_meta_image___localFile___accessTime
  data___jobs_page_meta_image___localFile___atime
  data___jobs_page_meta_image___localFile___atimeMs
  data___jobs_page_meta_image___localFile___base
  data___jobs_page_meta_image___localFile___birthTime
  data___jobs_page_meta_image___localFile___birthtime
  data___jobs_page_meta_image___localFile___birthtimeMs
  data___jobs_page_meta_image___localFile___blksize
  data___jobs_page_meta_image___localFile___blocks
  data___jobs_page_meta_image___localFile___changeTime
  data___jobs_page_meta_image___localFile___children
  data___jobs_page_meta_image___localFile___childrenImageSharp
  data___jobs_page_meta_image___localFile___childrenLokaliseTranslation
  data___jobs_page_meta_image___localFile___ctime
  data___jobs_page_meta_image___localFile___ctimeMs
  data___jobs_page_meta_image___localFile___dev
  data___jobs_page_meta_image___localFile___dir
  data___jobs_page_meta_image___localFile___ext
  data___jobs_page_meta_image___localFile___extension
  data___jobs_page_meta_image___localFile___gid
  data___jobs_page_meta_image___localFile___id
  data___jobs_page_meta_image___localFile___ino
  data___jobs_page_meta_image___localFile___mode
  data___jobs_page_meta_image___localFile___modifiedTime
  data___jobs_page_meta_image___localFile___mtime
  data___jobs_page_meta_image___localFile___mtimeMs
  data___jobs_page_meta_image___localFile___name
  data___jobs_page_meta_image___localFile___nlink
  data___jobs_page_meta_image___localFile___prettySize
  data___jobs_page_meta_image___localFile___publicURL
  data___jobs_page_meta_image___localFile___rdev
  data___jobs_page_meta_image___localFile___relativeDirectory
  data___jobs_page_meta_image___localFile___relativePath
  data___jobs_page_meta_image___localFile___root
  data___jobs_page_meta_image___localFile___size
  data___jobs_page_meta_image___localFile___sourceInstanceName
  data___jobs_page_meta_image___localFile___uid
  data___jobs_page_meta_image___localFile___url
  data___jobs_page_meta_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___jobs_page_meta_title
  data___jobs_page_title___html
  data___jobs_page_title___raw
  data___jobs_page_title___richText
  data___jobs_page_title___text
  data___life_page_meta_description
  data___life_page_meta_image___alt
  data___life_page_meta_image___copyright
  data___life_page_meta_image___dimensions___height
  data___life_page_meta_image___dimensions___width
  data___life_page_meta_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_image___localFile___absolutePath
  data___life_page_meta_image___localFile___accessTime
  data___life_page_meta_image___localFile___atime
  data___life_page_meta_image___localFile___atimeMs
  data___life_page_meta_image___localFile___base
  data___life_page_meta_image___localFile___birthTime
  data___life_page_meta_image___localFile___birthtime
  data___life_page_meta_image___localFile___birthtimeMs
  data___life_page_meta_image___localFile___blksize
  data___life_page_meta_image___localFile___blocks
  data___life_page_meta_image___localFile___changeTime
  data___life_page_meta_image___localFile___children
  data___life_page_meta_image___localFile___childrenImageSharp
  data___life_page_meta_image___localFile___childrenLokaliseTranslation
  data___life_page_meta_image___localFile___ctime
  data___life_page_meta_image___localFile___ctimeMs
  data___life_page_meta_image___localFile___dev
  data___life_page_meta_image___localFile___dir
  data___life_page_meta_image___localFile___ext
  data___life_page_meta_image___localFile___extension
  data___life_page_meta_image___localFile___gid
  data___life_page_meta_image___localFile___id
  data___life_page_meta_image___localFile___ino
  data___life_page_meta_image___localFile___mode
  data___life_page_meta_image___localFile___modifiedTime
  data___life_page_meta_image___localFile___mtime
  data___life_page_meta_image___localFile___mtimeMs
  data___life_page_meta_image___localFile___name
  data___life_page_meta_image___localFile___nlink
  data___life_page_meta_image___localFile___prettySize
  data___life_page_meta_image___localFile___publicURL
  data___life_page_meta_image___localFile___rdev
  data___life_page_meta_image___localFile___relativeDirectory
  data___life_page_meta_image___localFile___relativePath
  data___life_page_meta_image___localFile___root
  data___life_page_meta_image___localFile___size
  data___life_page_meta_image___localFile___sourceInstanceName
  data___life_page_meta_image___localFile___uid
  data___life_page_meta_image___localFile___url
  data___life_page_meta_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___life_page_meta_title
  data___life_page_title___html
  data___life_page_title___raw
  data___life_page_title___richText
  data___life_page_title___text
  data___main_page_meta_description
  data___main_page_meta_image___alt
  data___main_page_meta_image___copyright
  data___main_page_meta_image___dimensions___height
  data___main_page_meta_image___dimensions___width
  data___main_page_meta_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_image___localFile___absolutePath
  data___main_page_meta_image___localFile___accessTime
  data___main_page_meta_image___localFile___atime
  data___main_page_meta_image___localFile___atimeMs
  data___main_page_meta_image___localFile___base
  data___main_page_meta_image___localFile___birthTime
  data___main_page_meta_image___localFile___birthtime
  data___main_page_meta_image___localFile___birthtimeMs
  data___main_page_meta_image___localFile___blksize
  data___main_page_meta_image___localFile___blocks
  data___main_page_meta_image___localFile___changeTime
  data___main_page_meta_image___localFile___children
  data___main_page_meta_image___localFile___childrenImageSharp
  data___main_page_meta_image___localFile___childrenLokaliseTranslation
  data___main_page_meta_image___localFile___ctime
  data___main_page_meta_image___localFile___ctimeMs
  data___main_page_meta_image___localFile___dev
  data___main_page_meta_image___localFile___dir
  data___main_page_meta_image___localFile___ext
  data___main_page_meta_image___localFile___extension
  data___main_page_meta_image___localFile___gid
  data___main_page_meta_image___localFile___id
  data___main_page_meta_image___localFile___ino
  data___main_page_meta_image___localFile___mode
  data___main_page_meta_image___localFile___modifiedTime
  data___main_page_meta_image___localFile___mtime
  data___main_page_meta_image___localFile___mtimeMs
  data___main_page_meta_image___localFile___name
  data___main_page_meta_image___localFile___nlink
  data___main_page_meta_image___localFile___prettySize
  data___main_page_meta_image___localFile___publicURL
  data___main_page_meta_image___localFile___rdev
  data___main_page_meta_image___localFile___relativeDirectory
  data___main_page_meta_image___localFile___relativePath
  data___main_page_meta_image___localFile___root
  data___main_page_meta_image___localFile___size
  data___main_page_meta_image___localFile___sourceInstanceName
  data___main_page_meta_image___localFile___uid
  data___main_page_meta_image___localFile___url
  data___main_page_meta_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___main_page_meta_title
  data___main_page_title___html
  data___main_page_title___raw
  data___main_page_title___richText
  data___main_page_title___text
  data___notfound_page_link_group
  data___notfound_page_link_group___display_text
  data___notfound_page_link_group___link___id
  data___notfound_page_link_group___link___isBroken
  data___notfound_page_link_group___link___lang
  data___notfound_page_link_group___link___link_type
  data___notfound_page_link_group___link___raw
  data___notfound_page_link_group___link___size
  data___notfound_page_link_group___link___slug
  data___notfound_page_link_group___link___tags
  data___notfound_page_link_group___link___target
  data___notfound_page_link_group___link___type
  data___notfound_page_link_group___link___uid
  data___notfound_page_link_group___link___url
  data___notfound_page_title___html
  data___notfound_page_title___raw
  data___notfound_page_title___richText
  data___notfound_page_title___text
  data___twitter_site_handle
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  url
}

input PrismicTeamContentsFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicTeamContentsDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicTeamContentsGroupConnection {
  distinct(field: PrismicTeamContentsFieldsEnum!): [String!]!
  edges: [PrismicTeamContentsEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicTeamContentsFieldsEnum!, limit: Int, skip: Int): [PrismicTeamContentsGroupConnection!]!
  max(field: PrismicTeamContentsFieldsEnum!): Float
  min(field: PrismicTeamContentsFieldsEnum!): Float
  nodes: [PrismicTeamContents!]!
  pageInfo: PageInfo!
  sum(field: PrismicTeamContentsFieldsEnum!): Float
  totalCount: Int!
}

input PrismicTeamContentsSortInput {
  fields: [PrismicTeamContentsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicTeamsArticle implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicTeamsArticleDataType!
  dataRaw: JSON!
  first_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicTeamsArticleConnection {
  distinct(field: PrismicTeamsArticleFieldsEnum!): [String!]!
  edges: [PrismicTeamsArticleEdge!]!
  group(field: PrismicTeamsArticleFieldsEnum!, limit: Int, skip: Int): [PrismicTeamsArticleGroupConnection!]!
  max(field: PrismicTeamsArticleFieldsEnum!): Float
  min(field: PrismicTeamsArticleFieldsEnum!): Float
  nodes: [PrismicTeamsArticle!]!
  pageInfo: PageInfo!
  sum(field: PrismicTeamsArticleFieldsEnum!): Float
  totalCount: Int!
}

type PrismicTeamsArticleDataBodyArticleSection implements PrismicSliceType {
  id: ID!
  items: [PrismicTeamsArticleDataBodyArticleSectionItem!]!
  primary: PrismicTeamsArticleDataBodyArticleSectionPrimary!
  slice_label: String
  slice_type: String!
}

type PrismicTeamsArticleDataBodyArticleSectionItem {
  thumbnail_description: PrismicStructuredTextType
  thumbnail_image: PrismicTeamsArticleDataBodyArticleSectionItemsThumbnailImageImageType
}

type PrismicTeamsArticleDataBodyArticleSectionItemsThumbnailImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

type PrismicTeamsArticleDataBodyArticleSectionPrimary {
  body_text: PrismicStructuredTextType
  title: PrismicStructuredTextType
}

union PrismicTeamsArticleDataBodySlicesType = PrismicTeamsArticleDataBodyArticleSection

type PrismicTeamsArticleDataPageMetaImageImageType {
  alt: String
  copyright: String
  dimensions: PrismicImageDimensionsType

  # Should be used to generate fixed-width images (i.e. the size of the image doesn't change when the size of the browser changes, and are "fixed"). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFixed fragment should be used. See the project's README for more information.
  fixed(
    # The fixed image height to render, in px.
    height: Int

    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # The image quality to use for compression. Range: 0-100, with 100 being highest quality. This setting is not recommended as the quality is already optimized by decreasing quality as the dpr increases to reduce image size while retaining visual quality.
    quality: Int

    # The fixed image width to render, in px.
    width: Int = 8192
  ): ImgixFixed

  # Should be used to generate fluid-width images (i.e. images that change when the size of the browser changes). Returns data compatible with gatsby-image. Instead of accessing this data directly, the GatsbySourceImgixFluid fragment should be used. See the project's README for more information.
  fluid(
    # The imgix parameters (transformations) to apply to the image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    imgixParams: ImgixParamsInput = {}

    # The maximum px height of the *image* to be *requested*. This does NOT affect the height of the image displayed.
    maxHeight: Int

    # The maximum px width of the *image* to be *requested*. This does NOT affect the width of the image displayed. The width of the image displayed can be controlled by adding a sizes parameter to the GatsbyImage component. For more information, see this project's readme.
    maxWidth: Int = 8192

    # Any imgix parameters to use only for the blur-up/placeholder image. The full set of imgix params can be explored here: https://docs.imgix.com/apis/url
    placeholderImgixParams: ImgixParamsInput = {}

    # A custom set of widths (in px) to use for the srcset widths. This feature is not recommended as the default widths are optimized for imgix's caching infrastructure.
    srcSetBreakpoints: [Int]
  ): ImgixFluid
  gatsbyImageData(
    # If set along with width or height, this will set the value of the other dimension to match the provided aspect ratio, cropping the image if needed.
    # If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    aspectRatio: Float

    # Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    backgroundColor: String

    # Specifies the image widths to generate. You should rarely need to change this. For FIXED and CONSTRAINED images it is better to allow these to be determined automatically,
    # based on the image size. For FULL_WIDTH images this can be used to override the default, which is [750, 1080, 1366, 1920].
    # It will never generate any images larger than the source.
    breakpoints: [Int]

    # If set, the height of the generated image. If omitted, it is calculated from the supplied width, matching the aspect ratio of the source image.
    height: Int

    # This argument is used to set parameters to instruct imgix to transform the image. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    imgixParams: ImgixParamsInput

    # The layout for the image.
    # FIXED: A static image sized, that does not resize according to the screen width
    # FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if it isn't going to be the full width of the screen.
    # CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    layout: GatsbyImageLayout

    # A list of image pixel densities to generate for FIXED and CONSTRAINED images. You should rarely need to change this. It will never generate images larger than the source, and will always include a 1x image.
    # Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1, 2] for fluid. In this case, an image with a fluid layout and width = 400 would generate images at 100, 200, 400 and 800px wide.
    outputPixelDensities: [Float]

    # Format of generated placeholder image, displayed while the main image loads.
    # BLURRED: a blurred, low resolution image, encoded as a base64 data URI (default)
    # DOMINANT_COLOR: a solid color, calculated from the dominant color of the image.
    # NONE: no placeholder. Set "backgroundColor" to use a fixed background color.
    placeholder: ImgixPlaceholder

    # This argument is used to set parameters to instruct imgix to transform the placeholder image. By default all parameters passed to 'imgixParams' are already set here, but this can be used to override or set extra parameters. 
    #         
    #         All of imgix's parameters can be found here: https://docs.imgix.com/apis/rendering
    placeholderImgixParams: ImgixParamsInput

    # The "sizes" property, passed to the img tag. This describes the display size of the image.
    # This does not affect the generated images, but is used by the browser to decide which images to download. You can leave this blank for fixed images, or if the responsive image
    # container will be the full width of the screen. In these cases we will generate an appropriate value.
    sizes: String

    # This argument determines the maximum srcset width that is generated, if the layout type is FULL_WIDTH. If the layout type is CONSTRAINED, the width argument will be used. Furthermore, in every case, the maximum srcset width is constrained by the width of the source image. The default is 8192px, which is the render limit of the imgix service.
    srcSetMaxWidth: Int = 8192

    # This argument determines the minimum srcset width that is generated. The default is 100px.
    srcSetMinWidth: Int = 100

    # The display width of the generated image for layout = FIXED, and the display width of the largest image for layout = CONSTRAINED.
    # The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    # Ignored if layout = FLUID.
    width: Int

    # This argument affects the breakpoints used for the srcsets, dictates the maximum tolerated size difference between an image's downloaded size and its rendered size. For example: setting this value to 0.1 means that an image will not render more than 10% larger or smaller than its native size. In practice, the image URLs generated for a width-based srcset attribute will grow by twice this rate. A lower tolerance means images will render closer to their native size (thereby increasing perceived image quality), but a large srcset list will be generated and consequently users may experience lower rates of cache-hit for pre-rendered images on your site.
    #
    # By default this rate is set to 8 percent, which we consider to be the ideal rate for maximizing cache hits without sacrificing visual quality. Users can specify their own width tolerance by providing a positive scalar value as widthTolerance to the third options object:
    widthTolerance: Float = 0.08
  ): JSON
  localFile: File

  # A plain imgix URL with the URL and params applied.
  url(imgixParams: ImgixParamsInput = {}): String
}

input PrismicTeamsArticleDataPageMetaImageImageTypeFilterInput {
  alt: StringQueryOperatorInput
  copyright: StringQueryOperatorInput
  dimensions: PrismicImageDimensionsTypeFilterInput
  fixed: ImgixFixedFilterInput
  fluid: ImgixFluidFilterInput
  gatsbyImageData: JSONQueryOperatorInput
  localFile: FileFilterInput
  url: StringQueryOperatorInput
}

type PrismicTeamsArticleDataType {
  body: [PrismicTeamsArticleDataBodySlicesType!]!
  page_meta_description: String
  page_meta_image: PrismicTeamsArticleDataPageMetaImageImageType
  page_meta_title: String
  page_title: PrismicStructuredTextType
}

input PrismicTeamsArticleDataTypeFilterInput {
  page_meta_description: StringQueryOperatorInput
  page_meta_image: PrismicTeamsArticleDataPageMetaImageImageTypeFilterInput
  page_meta_title: StringQueryOperatorInput
  page_title: PrismicStructuredTextTypeFilterInput
}

type PrismicTeamsArticleEdge {
  next: PrismicTeamsArticle
  node: PrismicTeamsArticle!
  previous: PrismicTeamsArticle
}

enum PrismicTeamsArticleFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___page_meta_description
  data___page_meta_image___alt
  data___page_meta_image___copyright
  data___page_meta_image___dimensions___height
  data___page_meta_image___dimensions___width
  data___page_meta_image___fixed___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fixed___height @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fixed___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fixed___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fixed___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fixed___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fixed___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fixed___width @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fluid___aspectRatio @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fluid___base64 @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fluid___sizes @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fluid___src @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fluid___srcSet @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fluid___srcSetWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___fluid___srcWebp @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___gatsbyImageData @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_image___localFile___absolutePath
  data___page_meta_image___localFile___accessTime
  data___page_meta_image___localFile___atime
  data___page_meta_image___localFile___atimeMs
  data___page_meta_image___localFile___base
  data___page_meta_image___localFile___birthTime
  data___page_meta_image___localFile___birthtime
  data___page_meta_image___localFile___birthtimeMs
  data___page_meta_image___localFile___blksize
  data___page_meta_image___localFile___blocks
  data___page_meta_image___localFile___changeTime
  data___page_meta_image___localFile___children
  data___page_meta_image___localFile___childrenImageSharp
  data___page_meta_image___localFile___childrenLokaliseTranslation
  data___page_meta_image___localFile___ctime
  data___page_meta_image___localFile___ctimeMs
  data___page_meta_image___localFile___dev
  data___page_meta_image___localFile___dir
  data___page_meta_image___localFile___ext
  data___page_meta_image___localFile___extension
  data___page_meta_image___localFile___gid
  data___page_meta_image___localFile___id
  data___page_meta_image___localFile___ino
  data___page_meta_image___localFile___mode
  data___page_meta_image___localFile___modifiedTime
  data___page_meta_image___localFile___mtime
  data___page_meta_image___localFile___mtimeMs
  data___page_meta_image___localFile___name
  data___page_meta_image___localFile___nlink
  data___page_meta_image___localFile___prettySize
  data___page_meta_image___localFile___publicURL
  data___page_meta_image___localFile___rdev
  data___page_meta_image___localFile___relativeDirectory
  data___page_meta_image___localFile___relativePath
  data___page_meta_image___localFile___root
  data___page_meta_image___localFile___size
  data___page_meta_image___localFile___sourceInstanceName
  data___page_meta_image___localFile___uid
  data___page_meta_image___localFile___url
  data___page_meta_image___url @deprecated(reason: "Sorting on fields that need arguments to resolve is deprecated.")
  data___page_meta_title
  data___page_title___html
  data___page_title___raw
  data___page_title___richText
  data___page_title___text
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicTeamsArticleFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicTeamsArticleDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicTeamsArticleGroupConnection {
  distinct(field: PrismicTeamsArticleFieldsEnum!): [String!]!
  edges: [PrismicTeamsArticleEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicTeamsArticleFieldsEnum!, limit: Int, skip: Int): [PrismicTeamsArticleGroupConnection!]!
  max(field: PrismicTeamsArticleFieldsEnum!): Float
  min(field: PrismicTeamsArticleFieldsEnum!): Float
  nodes: [PrismicTeamsArticle!]!
  pageInfo: PageInfo!
  sum(field: PrismicTeamsArticleFieldsEnum!): Float
  totalCount: Int!
}

input PrismicTeamsArticleSortInput {
  fields: [PrismicTeamsArticleFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicTermsAndConditions implements Node {
  _previewable: ID!
  alternate_languages: [PrismicAlternateLanguageType!]!
  children: [Node!]!
  data: PrismicTermsAndConditionsDataType!
  dataRaw: JSON!
  first_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  href: String!
  id: ID!
  internal: Internal!
  lang: String!
  last_publication_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date!
  parent: Node
  prismicId: ID!
  tags: [String!]!
  type: String!
  uid: String!
  url: String
}

type PrismicTermsAndConditionsConnection {
  distinct(field: PrismicTermsAndConditionsFieldsEnum!): [String!]!
  edges: [PrismicTermsAndConditionsEdge!]!
  group(field: PrismicTermsAndConditionsFieldsEnum!, limit: Int, skip: Int): [PrismicTermsAndConditionsGroupConnection!]!
  max(field: PrismicTermsAndConditionsFieldsEnum!): Float
  min(field: PrismicTermsAndConditionsFieldsEnum!): Float
  nodes: [PrismicTermsAndConditions!]!
  pageInfo: PageInfo!
  sum(field: PrismicTermsAndConditionsFieldsEnum!): Float
  totalCount: Int!
}

type PrismicTermsAndConditionsDataType {
  content: PrismicStructuredTextType
  description: String
  revision_date(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
}

input PrismicTermsAndConditionsDataTypeFilterInput {
  content: PrismicStructuredTextTypeFilterInput
  description: StringQueryOperatorInput
  revision_date: DateQueryOperatorInput
}

type PrismicTermsAndConditionsEdge {
  next: PrismicTermsAndConditions
  node: PrismicTermsAndConditions!
  previous: PrismicTermsAndConditions
}

enum PrismicTermsAndConditionsFieldsEnum {
  _previewable
  alternate_languages
  alternate_languages___id
  alternate_languages___lang
  alternate_languages___raw
  alternate_languages___type
  alternate_languages___uid
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  dataRaw
  data___content___html
  data___content___raw
  data___content___richText
  data___content___text
  data___description
  data___revision_date
  first_publication_date
  href
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  lang
  last_publication_date
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  prismicId
  tags
  type
  uid
  url
}

input PrismicTermsAndConditionsFilterInput {
  _previewable: IDQueryOperatorInput
  alternate_languages: PrismicAlternateLanguageTypeFilterListInput
  children: NodeFilterListInput
  data: PrismicTermsAndConditionsDataTypeFilterInput
  dataRaw: JSONQueryOperatorInput
  first_publication_date: DateQueryOperatorInput
  href: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  lang: StringQueryOperatorInput
  last_publication_date: DateQueryOperatorInput
  parent: NodeFilterInput
  prismicId: IDQueryOperatorInput
  tags: StringQueryOperatorInput
  type: StringQueryOperatorInput
  uid: StringQueryOperatorInput
  url: StringQueryOperatorInput
}

type PrismicTermsAndConditionsGroupConnection {
  distinct(field: PrismicTermsAndConditionsFieldsEnum!): [String!]!
  edges: [PrismicTermsAndConditionsEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicTermsAndConditionsFieldsEnum!, limit: Int, skip: Int): [PrismicTermsAndConditionsGroupConnection!]!
  max(field: PrismicTermsAndConditionsFieldsEnum!): Float
  min(field: PrismicTermsAndConditionsFieldsEnum!): Float
  nodes: [PrismicTermsAndConditions!]!
  pageInfo: PageInfo!
  sum(field: PrismicTermsAndConditionsFieldsEnum!): Float
  totalCount: Int!
}

input PrismicTermsAndConditionsSortInput {
  fields: [PrismicTermsAndConditionsFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type PrismicTypePathType implements Node {
  children: [Node!]!
  id: ID!
  internal: Internal!
  kind: String!
  parent: Node
  path: [String!]!
  type: String!
}

type PrismicTypePathTypeConnection {
  distinct(field: PrismicTypePathTypeFieldsEnum!): [String!]!
  edges: [PrismicTypePathTypeEdge!]!
  group(field: PrismicTypePathTypeFieldsEnum!, limit: Int, skip: Int): [PrismicTypePathTypeGroupConnection!]!
  max(field: PrismicTypePathTypeFieldsEnum!): Float
  min(field: PrismicTypePathTypeFieldsEnum!): Float
  nodes: [PrismicTypePathType!]!
  pageInfo: PageInfo!
  sum(field: PrismicTypePathTypeFieldsEnum!): Float
  totalCount: Int!
}

type PrismicTypePathTypeEdge {
  next: PrismicTypePathType
  node: PrismicTypePathType!
  previous: PrismicTypePathType
}

enum PrismicTypePathTypeFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  kind
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  path
  type
}

input PrismicTypePathTypeFilterInput {
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  kind: StringQueryOperatorInput
  parent: NodeFilterInput
  path: StringQueryOperatorInput
  type: StringQueryOperatorInput
}

type PrismicTypePathTypeGroupConnection {
  distinct(field: PrismicTypePathTypeFieldsEnum!): [String!]!
  edges: [PrismicTypePathTypeEdge!]!
  field: String!
  fieldValue: String
  group(field: PrismicTypePathTypeFieldsEnum!, limit: Int, skip: Int): [PrismicTypePathTypeGroupConnection!]!
  max(field: PrismicTypePathTypeFieldsEnum!): Float
  min(field: PrismicTypePathTypeFieldsEnum!): Float
  nodes: [PrismicTypePathType!]!
  pageInfo: PageInfo!
  sum(field: PrismicTypePathTypeFieldsEnum!): Float
  totalCount: Int!
}

input PrismicTypePathTypeSortInput {
  fields: [PrismicTypePathTypeFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type Query {
  allDirectory(filter: DirectoryFilterInput, limit: Int, skip: Int, sort: DirectorySortInput): DirectoryConnection!
  allFile(filter: FileFilterInput, limit: Int, skip: Int, sort: FileSortInput): FileConnection!
  allGreenhouseJobBoardDepartment(filter: GreenhouseJobBoardDepartmentFilterInput, limit: Int, skip: Int, sort: GreenhouseJobBoardDepartmentSortInput): GreenhouseJobBoardDepartmentConnection!
  allGreenhouseJobBoardJob(filter: GreenhouseJobBoardJobFilterInput, limit: Int, skip: Int, sort: GreenhouseJobBoardJobSortInput): GreenhouseJobBoardJobConnection!
  allImageSharp(filter: ImageSharpFilterInput, limit: Int, skip: Int, sort: ImageSharpSortInput): ImageSharpConnection!
  allJobDepartment(filter: JobDepartmentFilterInput, limit: Int, skip: Int, sort: JobDepartmentSortInput): JobDepartmentConnection!
  allJobPost(filter: JobPostFilterInput, limit: Int, skip: Int, sort: JobPostSortInput): JobPostConnection!
  allLocalSearchJobPosts(filter: LocalSearchJobPostsFilterInput, limit: Int, skip: Int, sort: LocalSearchJobPostsSortInput): LocalSearchJobPostsConnection!
  allLokaliseTranslation(filter: LokaliseTranslationFilterInput, limit: Int, skip: Int, sort: LokaliseTranslationSortInput): LokaliseTranslationConnection!
  allPrismicAdsContent(filter: PrismicAdsContentFilterInput, limit: Int, skip: Int, sort: PrismicAdsContentSortInput): PrismicAdsContentConnection!
  allPrismicAdvertisementContents(filter: PrismicAdvertisementContentsFilterInput, limit: Int, skip: Int, sort: PrismicAdvertisementContentsSortInput): PrismicAdvertisementContentsConnection!
  allPrismicEmbedType(filter: PrismicEmbedTypeFilterInput, limit: Int, skip: Int, sort: PrismicEmbedTypeSortInput): PrismicEmbedTypeConnection!
  allPrismicFaq(filter: PrismicFaqFilterInput, limit: Int, skip: Int, sort: PrismicFaqSortInput): PrismicFaqConnection!
  allPrismicGlobalContents(filter: PrismicGlobalContentsFilterInput, limit: Int, skip: Int, sort: PrismicGlobalContentsSortInput): PrismicGlobalContentsConnection!
  allPrismicIr(filter: PrismicIrFilterInput, limit: Int, skip: Int, sort: PrismicIrSortInput): PrismicIrConnection!
  allPrismicMemberProfile(filter: PrismicMemberProfileFilterInput, limit: Int, skip: Int, sort: PrismicMemberProfileSortInput): PrismicMemberProfileConnection!
  allPrismicPayContents(filter: PrismicPayContentsFilterInput, limit: Int, skip: Int, sort: PrismicPayContentsSortInput): PrismicPayContentsConnection!
  allPrismicSiteNavigation(filter: PrismicSiteNavigationFilterInput, limit: Int, skip: Int, sort: PrismicSiteNavigationSortInput): PrismicSiteNavigationConnection!
  allPrismicTeamBanner(filter: PrismicTeamBannerFilterInput, limit: Int, skip: Int, sort: PrismicTeamBannerSortInput): PrismicTeamBannerConnection!
  allPrismicTeamContents(filter: PrismicTeamContentsFilterInput, limit: Int, skip: Int, sort: PrismicTeamContentsSortInput): PrismicTeamContentsConnection!
  allPrismicTeamsArticle(filter: PrismicTeamsArticleFilterInput, limit: Int, skip: Int, sort: PrismicTeamsArticleSortInput): PrismicTeamsArticleConnection!
  allPrismicTermsAndConditions(filter: PrismicTermsAndConditionsFilterInput, limit: Int, skip: Int, sort: PrismicTermsAndConditionsSortInput): PrismicTermsAndConditionsConnection!
  allPrismicTypePathType(filter: PrismicTypePathTypeFilterInput, limit: Int, skip: Int, sort: PrismicTypePathTypeSortInput): PrismicTypePathTypeConnection!
  allSite(filter: SiteFilterInput, limit: Int, skip: Int, sort: SiteSortInput): SiteConnection!
  allSiteBuildMetadata(filter: SiteBuildMetadataFilterInput, limit: Int, skip: Int, sort: SiteBuildMetadataSortInput): SiteBuildMetadataConnection!
  allSiteFunction(filter: SiteFunctionFilterInput, limit: Int, skip: Int, sort: SiteFunctionSortInput): SiteFunctionConnection!
  allSitePage(filter: SitePageFilterInput, limit: Int, skip: Int, sort: SitePageSortInput): SitePageConnection!
  directory(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, changeTime: DateQueryOperatorInput, children: NodeFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput): Directory
  file(absolutePath: StringQueryOperatorInput, accessTime: DateQueryOperatorInput, atime: DateQueryOperatorInput, atimeMs: FloatQueryOperatorInput, base: StringQueryOperatorInput, birthTime: DateQueryOperatorInput, birthtime: DateQueryOperatorInput, birthtimeMs: FloatQueryOperatorInput, blksize: IntQueryOperatorInput, blocks: IntQueryOperatorInput, changeTime: DateQueryOperatorInput, childImageSharp: ImageSharpFilterInput, childLokaliseTranslation: LokaliseTranslationFilterInput, children: NodeFilterListInput, childrenImageSharp: ImageSharpFilterListInput, childrenLokaliseTranslation: LokaliseTranslationFilterListInput, ctime: DateQueryOperatorInput, ctimeMs: FloatQueryOperatorInput, dev: IntQueryOperatorInput, dir: StringQueryOperatorInput, ext: StringQueryOperatorInput, extension: StringQueryOperatorInput, gid: IntQueryOperatorInput, id: StringQueryOperatorInput, ino: FloatQueryOperatorInput, internal: InternalFilterInput, mode: IntQueryOperatorInput, modifiedTime: DateQueryOperatorInput, mtime: DateQueryOperatorInput, mtimeMs: FloatQueryOperatorInput, name: StringQueryOperatorInput, nlink: IntQueryOperatorInput, parent: NodeFilterInput, prettySize: StringQueryOperatorInput, publicURL: StringQueryOperatorInput, rdev: IntQueryOperatorInput, relativeDirectory: StringQueryOperatorInput, relativePath: StringQueryOperatorInput, root: StringQueryOperatorInput, size: IntQueryOperatorInput, sourceInstanceName: StringQueryOperatorInput, uid: IntQueryOperatorInput, url: StringQueryOperatorInput): File
  greenhouseJobBoardDepartment(childDepartments: GreenhouseJobBoardDepartmentFilterListInput, children: NodeFilterListInput, ghId: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, jobs: GreenhouseJobBoardJobFilterListInput, name: StringQueryOperatorInput, parent: NodeFilterInput, parentDepartment: GreenhouseJobBoardDepartmentFilterInput): GreenhouseJobBoardDepartment
  greenhouseJobBoardJob(boardToken: StringQueryOperatorInput, boardUrl: StringQueryOperatorInput, childJobDepartment: JobDepartmentFilterInput, childJobPost: JobPostFilterInput, children: NodeFilterListInput, childrenJobDepartment: JobDepartmentFilterListInput, childrenJobPost: JobPostFilterListInput, content: StringQueryOperatorInput, departments: GreenhouseJobBoardDepartmentFilterListInput, ghId: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, locationQuestions: GreenhouseJobBoardJobQuestionFilterListInput, metadata: GreenhouseJobBoardJobCustomFieldMetadataFilterListInput, parent: NodeFilterInput, questions: GreenhouseJobBoardJobQuestionFilterListInput, title: StringQueryOperatorInput, updatedAt: DateQueryOperatorInput): GreenhouseJobBoardJob
  imageSharp(children: NodeFilterListInput, fixed: ImageSharpFixedFilterInput, fluid: ImageSharpFluidFilterInput, gatsbyImageData: JSONQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, original: ImageSharpOriginalFilterInput, parent: NodeFilterInput, resize: ImageSharpResizeFilterInput): ImageSharp
  jobDepartment(children: NodeFilterListInput, ghId: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, jobPosts: JobPostFilterListInput, name: StringQueryOperatorInput, parent: NodeFilterInput, slug: StringQueryOperatorInput): JobDepartment
  jobPost(absoluteUrl: StringQueryOperatorInput, alternativeCivilianService: BooleanQueryOperatorInput, boardToken: StringQueryOperatorInput, boardUrl: StringQueryOperatorInput, chapter: StringQueryOperatorInput, children: NodeFilterListInput, content: JobPostContentSectionFilterListInput, corporate: JobCorporateQueryOperatorInput, departments: JobDepartmentFilterListInput, employmentType: JobEmploymentTypeQueryOperatorInput, externalUrl: StringQueryOperatorInput, ghId: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, keywords: StringQueryOperatorInput, order: IntQueryOperatorInput, parent: NodeFilterInput, parentJob: GreenhouseJobBoardJobFilterInput, priorExperience: JobPriorExperienceQueryOperatorInput, rawContent: StringQueryOperatorInput, tags: StringQueryOperatorInput, title: StringQueryOperatorInput, updatedAt: DateQueryOperatorInput, validThrough: DateQueryOperatorInput): JobPost
  localSearchJobPosts(children: NodeFilterListInput, engine: StringQueryOperatorInput, id: StringQueryOperatorInput, index: StringQueryOperatorInput, internal: InternalFilterInput, name: StringQueryOperatorInput, parent: NodeFilterInput, publicIndexURL: StringQueryOperatorInput, publicStoreURL: StringQueryOperatorInput, store: JSONQueryOperatorInput): LocalSearchJobPosts
  lokaliseTranslation(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, messages: LokaliseMessagesFilterInput, parent: NodeFilterInput): LokaliseTranslation
  prismicAdsContent(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicAdsContentDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicAdsContent
  prismicAdvertisementContents(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicAdvertisementContents
  prismicEmbedType(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): PrismicEmbedType
  prismicFaq(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicFaqDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicFaq
  prismicGlobalContents(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicGlobalContentsDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicGlobalContents
  prismicIr(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicIrDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicIr
  prismicMemberProfile(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicMemberProfileDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicMemberProfile
  prismicPayContents(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicPayContentsDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicPayContents
  prismicSiteNavigation(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicSiteNavigationDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicSiteNavigation
  prismicTeamBanner(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicTeamBannerDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicTeamBanner
  prismicTeamContents(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicTeamContentsDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicTeamContents
  prismicTeamsArticle(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicTeamsArticleDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicTeamsArticle
  prismicTermsAndConditions(_previewable: IDQueryOperatorInput, alternate_languages: PrismicAlternateLanguageTypeFilterListInput, children: NodeFilterListInput, data: PrismicTermsAndConditionsDataTypeFilterInput, dataRaw: JSONQueryOperatorInput, first_publication_date: DateQueryOperatorInput, href: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, lang: StringQueryOperatorInput, last_publication_date: DateQueryOperatorInput, parent: NodeFilterInput, prismicId: IDQueryOperatorInput, tags: StringQueryOperatorInput, type: StringQueryOperatorInput, uid: StringQueryOperatorInput, url: StringQueryOperatorInput): PrismicTermsAndConditions
  prismicTypePathType(children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, kind: StringQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput, type: StringQueryOperatorInput): PrismicTypePathType
  site(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, jsxRuntime: StringQueryOperatorInput, parent: NodeFilterInput, pathPrefix: StringQueryOperatorInput, polyfill: BooleanQueryOperatorInput, siteMetadata: SiteMetadataFilterInput, trailingSlash: StringQueryOperatorInput): Site
  siteBuildMetadata(buildTime: DateQueryOperatorInput, children: NodeFilterListInput, id: StringQueryOperatorInput, internal: InternalFilterInput, parent: NodeFilterInput): SiteBuildMetadata
  siteFunction(absoluteCompiledFilePath: StringQueryOperatorInput, children: NodeFilterListInput, functionRoute: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, matchPath: StringQueryOperatorInput, originalAbsoluteFilePath: StringQueryOperatorInput, originalRelativeFilePath: StringQueryOperatorInput, parent: NodeFilterInput, pluginName: StringQueryOperatorInput, relativeCompiledFilePath: StringQueryOperatorInput): SiteFunction
  sitePage(children: NodeFilterListInput, component: StringQueryOperatorInput, componentChunkName: StringQueryOperatorInput, id: StringQueryOperatorInput, internal: InternalFilterInput, internalComponentName: StringQueryOperatorInput, matchPath: StringQueryOperatorInput, pageContext: JSONQueryOperatorInput, parent: NodeFilterInput, path: StringQueryOperatorInput): SitePage
}

type Site implements Node {
  buildTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  children: [Node!]!
  id: ID!
  internal: Internal!
  jsxRuntime: String
  parent: Node
  pathPrefix: String
  polyfill: Boolean
  siteMetadata: SiteMetadata!
  trailingSlash: String
}

type SiteBuildMetadata implements Node {
  buildTime(
    # Returns the difference between this date and the current time. Defaults to "milliseconds" but you can also pass in as the measurement "years", "months", "weeks", "days", "hours", "minutes", and "seconds".
    difference: String

    # Format the date using Moment.js' date tokens, e.g. `date(formatString: "YYYY MMMM DD")`. See https://momentjs.com/docs/#/displaying/format/ for documentation for different tokens.
    formatString: String

    # Returns a string generated with Moment.js' `fromNow` function
    fromNow: Boolean

    # Configures the locale Moment.js will use to format the date.
    locale: String
  ): Date
  children: [Node!]!
  id: ID!
  internal: Internal!
  parent: Node
}

type SiteBuildMetadataConnection {
  distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
  edges: [SiteBuildMetadataEdge!]!
  group(field: SiteBuildMetadataFieldsEnum!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
  max(field: SiteBuildMetadataFieldsEnum!): Float
  min(field: SiteBuildMetadataFieldsEnum!): Float
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  sum(field: SiteBuildMetadataFieldsEnum!): Float
  totalCount: Int!
}

type SiteBuildMetadataEdge {
  next: SiteBuildMetadata
  node: SiteBuildMetadata!
  previous: SiteBuildMetadata
}

enum SiteBuildMetadataFieldsEnum {
  buildTime
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
}

input SiteBuildMetadataFilterInput {
  buildTime: DateQueryOperatorInput
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  parent: NodeFilterInput
}

type SiteBuildMetadataGroupConnection {
  distinct(field: SiteBuildMetadataFieldsEnum!): [String!]!
  edges: [SiteBuildMetadataEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteBuildMetadataFieldsEnum!, limit: Int, skip: Int): [SiteBuildMetadataGroupConnection!]!
  max(field: SiteBuildMetadataFieldsEnum!): Float
  min(field: SiteBuildMetadataFieldsEnum!): Float
  nodes: [SiteBuildMetadata!]!
  pageInfo: PageInfo!
  sum(field: SiteBuildMetadataFieldsEnum!): Float
  totalCount: Int!
}

input SiteBuildMetadataSortInput {
  fields: [SiteBuildMetadataFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteConnection {
  distinct(field: SiteFieldsEnum!): [String!]!
  edges: [SiteEdge!]!
  group(field: SiteFieldsEnum!, limit: Int, skip: Int): [SiteGroupConnection!]!
  max(field: SiteFieldsEnum!): Float
  min(field: SiteFieldsEnum!): Float
  nodes: [Site!]!
  pageInfo: PageInfo!
  sum(field: SiteFieldsEnum!): Float
  totalCount: Int!
}

type SiteEdge {
  next: Site
  node: Site!
  previous: Site
}

enum SiteFieldsEnum {
  buildTime
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  jsxRuntime
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  pathPrefix
  polyfill
  siteMetadata___locale
  siteMetadata___siteName
  siteMetadata___siteUrl
  trailingSlash
}

input SiteFilterInput {
  buildTime: DateQueryOperatorInput
  children: NodeFilterListInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  jsxRuntime: StringQueryOperatorInput
  parent: NodeFilterInput
  pathPrefix: StringQueryOperatorInput
  polyfill: BooleanQueryOperatorInput
  siteMetadata: SiteMetadataFilterInput
  trailingSlash: StringQueryOperatorInput
}

type SiteFunction implements Node {
  absoluteCompiledFilePath: String!
  children: [Node!]!
  functionRoute: String!
  id: ID!
  internal: Internal!
  matchPath: String
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  parent: Node
  pluginName: String!
  relativeCompiledFilePath: String!
}

type SiteFunctionConnection {
  distinct(field: SiteFunctionFieldsEnum!): [String!]!
  edges: [SiteFunctionEdge!]!
  group(field: SiteFunctionFieldsEnum!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
  max(field: SiteFunctionFieldsEnum!): Float
  min(field: SiteFunctionFieldsEnum!): Float
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  sum(field: SiteFunctionFieldsEnum!): Float
  totalCount: Int!
}

type SiteFunctionEdge {
  next: SiteFunction
  node: SiteFunction!
  previous: SiteFunction
}

enum SiteFunctionFieldsEnum {
  absoluteCompiledFilePath
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  functionRoute
  id
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  matchPath
  originalAbsoluteFilePath
  originalRelativeFilePath
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  pluginName
  relativeCompiledFilePath
}

input SiteFunctionFilterInput {
  absoluteCompiledFilePath: StringQueryOperatorInput
  children: NodeFilterListInput
  functionRoute: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  matchPath: StringQueryOperatorInput
  originalAbsoluteFilePath: StringQueryOperatorInput
  originalRelativeFilePath: StringQueryOperatorInput
  parent: NodeFilterInput
  pluginName: StringQueryOperatorInput
  relativeCompiledFilePath: StringQueryOperatorInput
}

type SiteFunctionGroupConnection {
  distinct(field: SiteFunctionFieldsEnum!): [String!]!
  edges: [SiteFunctionEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteFunctionFieldsEnum!, limit: Int, skip: Int): [SiteFunctionGroupConnection!]!
  max(field: SiteFunctionFieldsEnum!): Float
  min(field: SiteFunctionFieldsEnum!): Float
  nodes: [SiteFunction!]!
  pageInfo: PageInfo!
  sum(field: SiteFunctionFieldsEnum!): Float
  totalCount: Int!
}

input SiteFunctionSortInput {
  fields: [SiteFunctionFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteGroupConnection {
  distinct(field: SiteFieldsEnum!): [String!]!
  edges: [SiteEdge!]!
  field: String!
  fieldValue: String
  group(field: SiteFieldsEnum!, limit: Int, skip: Int): [SiteGroupConnection!]!
  max(field: SiteFieldsEnum!): Float
  min(field: SiteFieldsEnum!): Float
  nodes: [Site!]!
  pageInfo: PageInfo!
  sum(field: SiteFieldsEnum!): Float
  totalCount: Int!
}

type SiteMetadata {
  locale: String!
  siteName: String
  siteUrl: String!
}

input SiteMetadataFilterInput {
  locale: StringQueryOperatorInput
  siteName: StringQueryOperatorInput
  siteUrl: StringQueryOperatorInput
}

type SitePage implements Node {
  children: [Node!]!
  component: String!
  componentChunkName: String!
  id: ID!
  internal: Internal!
  internalComponentName: String!
  matchPath: String
  pageContext: JSON
  parent: Node
  path: String!
}

type SitePageConnection {
  distinct(field: SitePageFieldsEnum!): [String!]!
  edges: [SitePageEdge!]!
  group(field: SitePageFieldsEnum!, limit: Int, skip: Int): [SitePageGroupConnection!]!
  max(field: SitePageFieldsEnum!): Float
  min(field: SitePageFieldsEnum!): Float
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  sum(field: SitePageFieldsEnum!): Float
  totalCount: Int!
}

type SitePageEdge {
  next: SitePage
  node: SitePage!
  previous: SitePage
}

enum SitePageFieldsEnum {
  children
  children___children
  children___children___children
  children___children___children___children
  children___children___children___id
  children___children___id
  children___children___internal___content
  children___children___internal___contentDigest
  children___children___internal___description
  children___children___internal___fieldOwners
  children___children___internal___ignoreType
  children___children___internal___mediaType
  children___children___internal___owner
  children___children___internal___type
  children___children___parent___children
  children___children___parent___id
  children___id
  children___internal___content
  children___internal___contentDigest
  children___internal___description
  children___internal___fieldOwners
  children___internal___ignoreType
  children___internal___mediaType
  children___internal___owner
  children___internal___type
  children___parent___children
  children___parent___children___children
  children___parent___children___id
  children___parent___id
  children___parent___internal___content
  children___parent___internal___contentDigest
  children___parent___internal___description
  children___parent___internal___fieldOwners
  children___parent___internal___ignoreType
  children___parent___internal___mediaType
  children___parent___internal___owner
  children___parent___internal___type
  children___parent___parent___children
  children___parent___parent___id
  component
  componentChunkName
  id
  internalComponentName
  internal___content
  internal___contentDigest
  internal___description
  internal___fieldOwners
  internal___ignoreType
  internal___mediaType
  internal___owner
  internal___type
  matchPath
  pageContext
  parent___children
  parent___children___children
  parent___children___children___children
  parent___children___children___id
  parent___children___id
  parent___children___internal___content
  parent___children___internal___contentDigest
  parent___children___internal___description
  parent___children___internal___fieldOwners
  parent___children___internal___ignoreType
  parent___children___internal___mediaType
  parent___children___internal___owner
  parent___children___internal___type
  parent___children___parent___children
  parent___children___parent___id
  parent___id
  parent___internal___content
  parent___internal___contentDigest
  parent___internal___description
  parent___internal___fieldOwners
  parent___internal___ignoreType
  parent___internal___mediaType
  parent___internal___owner
  parent___internal___type
  parent___parent___children
  parent___parent___children___children
  parent___parent___children___id
  parent___parent___id
  parent___parent___internal___content
  parent___parent___internal___contentDigest
  parent___parent___internal___description
  parent___parent___internal___fieldOwners
  parent___parent___internal___ignoreType
  parent___parent___internal___mediaType
  parent___parent___internal___owner
  parent___parent___internal___type
  parent___parent___parent___children
  parent___parent___parent___id
  path
}

input SitePageFilterInput {
  children: NodeFilterListInput
  component: StringQueryOperatorInput
  componentChunkName: StringQueryOperatorInput
  id: StringQueryOperatorInput
  internal: InternalFilterInput
  internalComponentName: StringQueryOperatorInput
  matchPath: StringQueryOperatorInput
  pageContext: JSONQueryOperatorInput
  parent: NodeFilterInput
  path: StringQueryOperatorInput
}

type SitePageGroupConnection {
  distinct(field: SitePageFieldsEnum!): [String!]!
  edges: [SitePageEdge!]!
  field: String!
  fieldValue: String
  group(field: SitePageFieldsEnum!, limit: Int, skip: Int): [SitePageGroupConnection!]!
  max(field: SitePageFieldsEnum!): Float
  min(field: SitePageFieldsEnum!): Float
  nodes: [SitePage!]!
  pageInfo: PageInfo!
  sum(field: SitePageFieldsEnum!): Float
  totalCount: Int!
}

input SitePageSortInput {
  fields: [SitePageFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

type SiteSiteMetadata {
  description: String
  title: String
}

input SiteSortInput {
  fields: [SiteFieldsEnum]
  order: [SortOrderEnum] = [ASC]
}

enum SortOrderEnum {
  ASC
  DESC
}

input StringQueryOperatorInput {
  eq: String
  glob: String
  in: [String]
  ne: String
  nin: [String]
  regex: String
}

input TransformOptions {
  cropFocus: ImageCropFocus = ATTENTION
  duotone: DuotoneGradient = {}
  fit: ImageFit = COVER
  grayscale: Boolean = false
  rotate: Int = 0
  trim: Float = 0
}

input WebPOptions {
  quality: Int
}
